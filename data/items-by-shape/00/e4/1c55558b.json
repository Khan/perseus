{"answerArea":{"calculator":false,"chi2Table":false,"periodicTable":false,"tTable":false,"zTable":false},"hints":[{"content":"A procedure with parameters is a great way to generalize code inside our programs. Generally, whenever we see duplicated lines of code that differ in predictable ways, we can define a procedure that runs that code and pass parameters to alter the values inside.","images":{},"replace":false,"widgets":{}},{"content":"Generally, whenever we see duplicated lines of code that differ in predictable ways, we can define a procedure that runs that code and pass parameters to alter the values inside.\n\nIn Maria's code, we see very similar code repeated 3 times: a line that sets the `numSold` variable, a line that sets `pricePer`, a line to calculate `moneyMade`, and 2 lines to display the results.\n\n```\nnumSold ‚Üê 10\npricePer ‚Üê 2\nmoneyMade ‚Üê numSold * pricePer\nDISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\nDISPLAY(CONCAT(\" = \", moneyMade))\n```\n","images":{},"replace":false,"widgets":{}},{"content":"The only differences in each of the 3 repeated blocks are the values of `numSold` and `pricePer`.\n\n```\nnumSold ‚Üê 10\npricePer ‚Üê 2\n\nnumSold ‚Üê 20\npricePer ‚Üê 1.5\n\nnumSold ‚Üê 30\npricePer ‚Üê 1.25\n```\n\nSince those are the values that change, those are what we will pass as parameters to the procedure.","images":{},"replace":false,"widgets":{}},{"content":"The beginning of our procedure definition should look like this:\n\n````\nPROCEDURE calcProfit(numSold, pricePer) {\n```","images":{},"replace":false,"widgets":{}},{"content":"Inside the procedure, we can put the code that is the same for each of the repeated blocks.\n\n```\nmoneyMade ‚Üê numSold * pricePer\nDISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\nDISPLAY(CONCAT(\" = \", moneyMade))\n```","images":{},"replace":false,"widgets":{}},{"content":"Thus, our final procedure looks like:\n\n```\nPROCEDURE calcProfit(numSold, pricePer) {\n    moneyMade ‚Üê numSold * pricePer\n    DISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\n    DISPLAY(CONCAT(\" = \", moneyMade))\n}\n```\n\nMaria can call it easily like this:\n\n```\ncalcProfit(10, 2)\ncalcProfit(20, 1.5)\ncalcProfit(30, 1.25)\n```\n\nIt will be much easier for her to experiment with new values now, and her code will be more organized and maintainable.","images":{},"replace":false,"widgets":{}}],"itemDataVersion":{"major":0,"minor":1},"question":{"content":"Maria is baking cookies for a bake sale and writing a program to help her decide what price to sell them at. Her program computes possible profits based on estimates for how many she'll sell at different price points.\n\n```\nnumSold ‚Üê 10\npricePer ‚Üê 2\nmoneyMade ‚Üê numSold * pricePer\nDISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\nDISPLAY(CONCAT(\" = \", moneyMade))\n\nnumSold ‚Üê 20\npricePer ‚Üê 1.5\nmoneyMade ‚Üê numSold * pricePer\nDISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\nDISPLAY(CONCAT(\" = \", moneyMade))\n\nnumSold ‚Üê 30\npricePer ‚Üê 1.25\nmoneyMade ‚Üê numSold * pricePer\nDISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\nDISPLAY(CONCAT(\" = \", moneyMade))\n```\n\nMaria realizes her program has a lot of duplicate code, and decides to make a procedure to reduce the duplicated code.\n\n**Which of these procedures best generalizes her code for easy reuse?**\n\n[[‚òÉ radio 1]]\n\nü§î[[‚òÉ explanation 1]]","images":{},"widgets":{"explanation 1":{"alignment":"default","graded":true,"options":{"explanation":"This code is written in **pseudocode**. You can't actually run pseudocode, but we use it for planning programs and for thinking about code independently of specific programming language. \n\nAP CSP exam questions use pseudocode, so it's helpful to become familiar with it.\n\nHere is a reference for the pseudocode used here:\n\n****\n\n`PROCEDURE name (parameter1, parameter2, ...)\n{\n     <instructions>\n}`\n\nA procedure called \"name\" that takes zero or more parameters. The procedure contains programming instructions.\n\n****\n\n`a ‚Üê expression`\n\nEvaluates `expression` and assigns the result to the variable `a`.\n\n\n****\n\n`DISPLAY (expression)` \n\nDisplays the value of expression, followed by a space.\n\n****\n\n|| **Arithmetic operators** ||\nInstruction | Explanation\n- | - | -\n`a + b` | Evaluates to the result of `b` added to `a`\n`a - b` | Evaluates to the result of `b` subtracted from `a` \n`a * b` | Evaluates to the result of `a` multiplied by `b`\n`a / b` | Evaluates to the result of `a` divided by `b` \n","hidePrompt":"Hide explanation","showPrompt":"What language is the code in?","static":false,"widgets":{}},"static":false,"type":"explanation","version":{"major":0,"minor":0}},"radio 1":{"alignment":"default","graded":true,"options":{"choices":[{"content":"```\nPROCEDURE calcProfit(numSold, pricePer) {\n    moneyMade ‚Üê numSold * pricePer\n    DISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\n    DISPLAY(CONCAT(\" = \", moneyMade))\n}\n```","correct":true},{"clue":"This procedure \"hardcodes\" the `pricePer` value inside the instructions, so it can't be used to generically compute the profit for any price. This is not the most general solution.","content":"```\nPROCEDURE calcProfit(numSold) {\n    pricePer ‚Üê 1.5\n    moneyMade ‚Üê numSold * pricePer\n    DISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\n    DISPLAY(CONCAT(\" = \", moneyMade))\n}\n```","correct":false},{"clue":"This procedure \"hardcodes\" the `numSold` value inside the instructions, so it can't be used to generically compute the profit for any number sold. This is not the most general solution.","content":"```\nPROCEDURE calcProfit(pricePer) {\n    numSold ‚Üê 10\n    moneyMade ‚Üê numSold * pricePer\n    DISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\n    DISPLAY(CONCAT(\" = \", moneyMade))\n}\n```","isNoneOfTheAbove":false},{"clue":"This procedure only takes care of displaying the `moneyMade` line. It will reduce some duplicate code, but not as much as possible.","content":"```\nPROCEDURE calcProfit(moneyMade) {\n    DISPLAY(CONCAT(\" = \", moneyMade))\n}\n```","isNoneOfTheAbove":false},{"clue":"This procedure does not include the line that computes `moneyMade`, so the second line will not display a value. This code is incorrect.","content":"```\nPROCEDURE calcProfit(numSold, pricePer) {\n    DISPLAY(CONCAT(numSold, CONCAT(\" x \", pricePer)))\n    DISPLAY(CONCAT(\" = \", moneyMade))\n}\n```","isNoneOfTheAbove":false}],"countChoices":false,"deselectEnabled":false,"displayCount":null,"hasNoneOfTheAbove":false,"multipleSelect":false,"randomize":true},"static":false,"type":"radio","version":{"major":1,"minor":0}}}}}
