/*! Perseus | http://github.com/Khan/perseus */
// commit 7562c789067400aa8f2bac185f553df2778457cf
// branch react-15
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Perseus = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

/*
Software License Agreement (BSD License)

Copyright (c) 2009-2011, Kevin Decker <kpdecker@gmail.com>

All rights reserved.

Redistribution and use of this software in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above
  copyright notice, this list of conditions and the
  following disclaimer.

* Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the
  following disclaimer in the documentation and/or other
  materials provided with the distribution.

* Neither the name of Kevin Decker nor the names of its
  contributors may be used to endorse or promote products
  derived from this software without specific prior
  written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */
var JsDiff = function () {
  /*jshint maxparams: 5*/
  function clonePath(path) {
    return { newPos: path.newPos, components: path.components.slice(0) };
  }
  function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  }
  function escapeHTML(s) {
    var n = s;
    n = n.replace(/&/g, '&amp;');
    n = n.replace(/</g, '&lt;');
    n = n.replace(/>/g, '&gt;');
    n = n.replace(/"/g, '&quot;');

    return n;
  }

  var Diff = function Diff(ignoreWhitespace) {
    this.ignoreWhitespace = ignoreWhitespace;
  };
  Diff.prototype = {
    diff: function diff(oldString, newString) {
      // Handle the identity case (this is due to unrolling editLength == 0
      if (newString === oldString) {
        return [{ value: newString }];
      }
      if (!newString) {
        return [{ value: oldString, removed: true }];
      }
      if (!oldString) {
        return [{ value: newString, added: true }];
      }

      newString = this.tokenize(newString);
      oldString = this.tokenize(oldString);

      var newLen = newString.length,
          oldLen = oldString.length;
      var maxEditLength = newLen + oldLen;
      var bestPath = [{ newPos: -1, components: [] }];

      // Seed editLength = 0
      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
        return bestPath[0].components;
      }

      for (var editLength = 1; editLength <= maxEditLength; editLength++) {
        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
          var basePath;
          var addPath = bestPath[diagonalPath - 1],
              removePath = bestPath[diagonalPath + 1];
          oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
          if (addPath) {
            // No one else is going to attempt to use this value, clear it
            bestPath[diagonalPath - 1] = undefined;
          }

          var canAdd = addPath && addPath.newPos + 1 < newLen;
          var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;
          if (!canAdd && !canRemove) {
            bestPath[diagonalPath] = undefined;
            continue;
          }

          // Select the diagonal that we want to branch from. We select the prior
          // path whose position in the new string is the farthest from the origin
          // and does not pass the bounds of the diff graph
          if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
            basePath = clonePath(removePath);
            this.pushComponent(basePath.components, oldString[oldPos], undefined, true);
          } else {
            basePath = clonePath(addPath);
            basePath.newPos++;
            this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);
          }

          var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);

          if (basePath.newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
            return basePath.components;
          } else {
            bestPath[diagonalPath] = basePath;
          }
        }
      }
    },

    pushComponent: function pushComponent(components, value, added, removed) {
      var last = components[components.length - 1];
      if (last && last.added === added && last.removed === removed) {
        // We need to clone here as the component clone operation is just
        // as shallow array clone
        components[components.length - 1] = { value: this.join(last.value, value), added: added, removed: removed };
      } else {
        components.push({ value: value, added: added, removed: removed });
      }
    },
    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
      var newLen = newString.length,
          oldLen = oldString.length,
          newPos = basePath.newPos,
          oldPos = newPos - diagonalPath;
      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
        newPos++;
        oldPos++;

        this.pushComponent(basePath.components, newString[newPos], undefined, undefined);
      }
      basePath.newPos = newPos;
      return oldPos;
    },

    equals: function equals(left, right) {
      var reWhitespace = /\S/;
      if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {
        return true;
      } else {
        return left === right;
      }
    },
    join: function join(left, right) {
      return left + right;
    },
    tokenize: function tokenize(value) {
      return value;
    }
  };

  var CharDiff = new Diff();

  var WordDiff = new Diff(true);
  var WordWithSpaceDiff = new Diff();
  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function (value) {
    return removeEmpty(value.split(/(\s+|\b)/));
  };

  var CssDiff = new Diff(true);
  CssDiff.tokenize = function (value) {
    return removeEmpty(value.split(/([{}:;,]|\s+)/));
  };

  var LineDiff = new Diff();
  LineDiff.tokenize = function (value) {
    var retLines = [],
        lines = value.split(/^/m);

    for (var i = 0; i < lines.length; i++) {
      var line = lines[i],
          lastLine = lines[i - 1];

      // Merge lines that may contain windows new lines
      if (line == '\n' && lastLine && lastLine[lastLine.length - 1] === '\r') {
        retLines[retLines.length - 1] += '\n';
      } else if (line) {
        retLines.push(line);
      }
    }

    return retLines;
  };

  return {
    Diff: Diff,

    diffChars: function diffChars(oldStr, newStr) {
      return CharDiff.diff(oldStr, newStr);
    },
    diffWords: function diffWords(oldStr, newStr) {
      return WordDiff.diff(oldStr, newStr);
    },
    diffWordsWithSpace: function diffWordsWithSpace(oldStr, newStr) {
      return WordWithSpaceDiff.diff(oldStr, newStr);
    },
    diffLines: function diffLines(oldStr, newStr) {
      return LineDiff.diff(oldStr, newStr);
    },

    diffCss: function diffCss(oldStr, newStr) {
      return CssDiff.diff(oldStr, newStr);
    },

    createPatch: function createPatch(fileName, oldStr, newStr, oldHeader, newHeader) {
      var ret = [];

      ret.push('Index: ' + fileName);
      ret.push('===================================================================');
      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\t' + oldHeader));
      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\t' + newHeader));

      var diff = LineDiff.diff(oldStr, newStr);
      if (!diff[diff.length - 1].value) {
        diff.pop(); // Remove trailing newline add
      }
      diff.push({ value: '', lines: [] }); // Append an empty value to make cleanup easier

      function contextLines(lines) {
        return lines.map(function (entry) {
          return ' ' + entry;
        });
      }
      function eofNL(curRange, i, current) {
        var last = diff[diff.length - 2],
            isLast = i === diff.length - 2,
            isLastOfType = i === diff.length - 3 && (current.added !== last.added || current.removed !== last.removed);

        // Figure out if this is the last line for the given file and missing NL
        if (!/\n$/.test(current.value) && (isLast || isLastOfType)) {
          curRange.push('\\ No newline at end of file');
        }
      }

      var oldRangeStart = 0,
          newRangeStart = 0,
          curRange = [],
          oldLine = 1,
          newLine = 1;
      for (var i = 0; i < diff.length; i++) {
        var current = diff[i],
            lines = current.lines || current.value.replace(/\n$/, '').split('\n');
        current.lines = lines;

        if (current.added || current.removed) {
          if (!oldRangeStart) {
            var prev = diff[i - 1];
            oldRangeStart = oldLine;
            newRangeStart = newLine;

            if (prev) {
              curRange = contextLines(prev.lines.slice(-4));
              oldRangeStart -= curRange.length;
              newRangeStart -= curRange.length;
            }
          }
          curRange.push.apply(curRange, lines.map(function (entry) {
            return (current.added ? '+' : '-') + entry;
          }));
          eofNL(curRange, i, current);

          if (current.added) {
            newLine += lines.length;
          } else {
            oldLine += lines.length;
          }
        } else {
          if (oldRangeStart) {
            // Close out any changes that have been output (or join overlapping)
            if (lines.length <= 8 && i < diff.length - 2) {
              // Overlapping
              curRange.push.apply(curRange, contextLines(lines));
            } else {
              // end the range and output
              var contextSize = Math.min(lines.length, 4);
              ret.push('@@ -' + oldRangeStart + ',' + (oldLine - oldRangeStart + contextSize) + ' +' + newRangeStart + ',' + (newLine - newRangeStart + contextSize) + ' @@');
              ret.push.apply(ret, curRange);
              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));
              if (lines.length <= 4) {
                eofNL(ret, i, current);
              }

              oldRangeStart = 0;newRangeStart = 0;curRange = [];
            }
          }
          oldLine += lines.length;
          newLine += lines.length;
        }
      }

      return ret.join('\n') + '\n';
    },

    applyPatch: function applyPatch(oldStr, uniDiff) {
      var diffstr = uniDiff.split('\n');
      var diff = [];
      var remEOFNL = false,
          addEOFNL = false;

      for (var i = diffstr[0][0] === 'I' ? 4 : 0; i < diffstr.length; i++) {
        if (diffstr[i][0] === '@') {
          var meh = diffstr[i].split(/@@ -(\d+),(\d+) \+(\d+),(\d+) @@/);
          diff.unshift({
            start: meh[3],
            oldlength: meh[2],
            oldlines: [],
            newlength: meh[4],
            newlines: []
          });
        } else if (diffstr[i][0] === '+') {
          diff[0].newlines.push(diffstr[i].substr(1));
        } else if (diffstr[i][0] === '-') {
          diff[0].oldlines.push(diffstr[i].substr(1));
        } else if (diffstr[i][0] === ' ') {
          diff[0].newlines.push(diffstr[i].substr(1));
          diff[0].oldlines.push(diffstr[i].substr(1));
        } else if (diffstr[i][0] === '\\') {
          if (diffstr[i - 1][0] === '+') {
            remEOFNL = true;
          } else if (diffstr[i - 1][0] === '-') {
            addEOFNL = true;
          }
        }
      }

      var str = oldStr.split('\n');
      for (var i = diff.length - 1; i >= 0; i--) {
        var d = diff[i];
        for (var j = 0; j < d.oldlength; j++) {
          if (str[d.start - 1 + j] !== d.oldlines[j]) {
            return false;
          }
        }
        Array.prototype.splice.apply(str, [d.start - 1, +d.oldlength].concat(d.newlines));
      }

      if (remEOFNL) {
        while (!str[str.length - 1]) {
          str.pop();
        }
      } else if (addEOFNL) {
        str.push('');
      }
      return str.join('\n');
    },

    convertChangesToXML: function convertChangesToXML(changes) {
      var ret = [];
      for (var i = 0; i < changes.length; i++) {
        var change = changes[i];
        if (change.added) {
          ret.push('<ins>');
        } else if (change.removed) {
          ret.push('<del>');
        }

        ret.push(escapeHTML(change.value));

        if (change.added) {
          ret.push('</ins>');
        } else if (change.removed) {
          ret.push('</del>');
        }
      }
      return ret.join('');
    },

    // See: http://code.google.com/p/google-diff-match-patch/wiki/API
    convertChangesToDMP: function convertChangesToDMP(changes) {
      var ret = [],
          change;
      for (var i = 0; i < changes.length; i++) {
        change = changes[i];
        ret.push([change.added ? 1 : change.removed ? -1 : 0, change.value]);
      }
      return ret;
    }
  };
}();

if (typeof module !== 'undefined') {
  module.exports = JsDiff;
}

},{}],2:[function(require,module,exports){
"use strict";

/*
 ResponsiveVoice JS v1.4.7

 (c) 2015 LearnBrite

 License: http://responsivevoice.org/license
*/
if ("undefined" != typeof responsiveVoice) console.log("ResponsiveVoice already loaded"), console.log(responsiveVoice);else var ResponsiveVoice = function ResponsiveVoice() {
  var a = this;a.version = "1.4.7";console.log("ResponsiveVoice r" + a.version);a.responsivevoices = [{ name: "UK English Female", flag: "gb", gender: "f", voiceIDs: [3, 5, 1, 6, 7, 171, 201, 8] }, { name: "UK English Male", flag: "gb", gender: "m", voiceIDs: [0, 4, 2, 75, 202, 159, 6, 7] }, { name: "US English Female", flag: "us", gender: "f", voiceIDs: [39, 40, 41, 42, 43, 173, 205, 204, 44] }, { name: "Arabic Male",
    flag: "ar", gender: "m", voiceIDs: [96, 95, 97, 196, 98], deprecated: !0 }, { name: "Arabic Female", flag: "ar", gender: "f", voiceIDs: [96, 95, 97, 196, 98] }, { name: "Armenian Male", flag: "hy", gender: "f", voiceIDs: [99] }, { name: "Australian Female", flag: "au", gender: "f", voiceIDs: [87, 86, 5, 201, 88] }, { name: "Brazilian Portuguese Female", flag: "br", gender: "f", voiceIDs: [124, 123, 125, 186, 223, 126] }, { name: "Chinese Female", flag: "cn", gender: "f", voiceIDs: [58, 59, 60, 155, 191, 231, 61] }, { name: "Czech Female", flag: "cz", gender: "f", voiceIDs: [101, 100, 102, 197, 103] }, { name: "Danish Female", flag: "dk", gender: "f", voiceIDs: [105, 104, 106, 198, 107] }, { name: "Deutsch Female", flag: "de", gender: "f", voiceIDs: [27, 28, 29, 30, 31, 78, 170, 199, 32] }, { name: "Dutch Female", flag: "nl", gender: "f", voiceIDs: [219, 84, 157, 158, 184, 45] }, { name: "Finnish Female", flag: "fi", gender: "f", voiceIDs: [90, 89, 91, 209, 92] }, { name: "French Female", flag: "fr", gender: "f", voiceIDs: [21, 22, 23, 77, 178, 210, 26] }, { name: "Greek Female", flag: "gr", gender: "f", voiceIDs: [62, 63, 80, 200, 64] }, { name: "Hatian Creole Female", flag: "ht",
    gender: "f", voiceIDs: [109] }, { name: "Hindi Female", flag: "hi", gender: "f", voiceIDs: [66, 154, 179, 213, 67] }, { name: "Hungarian Female", flag: "hu", gender: "f", voiceIDs: [9, 10, 81, 214, 11] }, { name: "Indonesian Female", flag: "id", gender: "f", voiceIDs: [111, 112, 180, 215, 113] }, { name: "Italian Female", flag: "it", gender: "f", voiceIDs: [33, 34, 35, 36, 37, 79, 181, 216, 38] }, { name: "Japanese Female", flag: "jp", gender: "f", voiceIDs: [50, 51, 52, 153, 182, 217, 53] }, { name: "Korean Female", flag: "kr", gender: "f", voiceIDs: [54, 55, 56, 156, 183, 218, 57] }, { name: "Latin Female",
    flag: "va", gender: "f", voiceIDs: [114] }, { name: "Norwegian Female", flag: "no", gender: "f", voiceIDs: [72, 73, 221, 74] }, { name: "Polish Female", flag: "pl", gender: "f", voiceIDs: [120, 119, 121, 185, 222, 122] }, { name: "Portuguese Female", flag: "br", gender: "f", voiceIDs: [128, 127, 129, 187, 224, 130] }, { name: "Romanian Male", flag: "ro", gender: "m", voiceIDs: [151, 150, 152, 225, 46] }, { name: "Russian Female", flag: "ru", gender: "f", voiceIDs: [47, 48, 83, 188, 226, 49] }, { name: "Slovak Female", flag: "sk", gender: "f", voiceIDs: [133, 132, 134, 227, 135] }, { name: "Spanish Female",
    flag: "es", gender: "f", voiceIDs: [19, 16, 17, 18, 20, 76, 174, 207, 15] }, { name: "Spanish Latin American Female", flag: "es", gender: "f", voiceIDs: [137, 136, 138, 175, 208, 139] }, { name: "Swedish Female", flag: "sv", gender: "f", voiceIDs: [85, 148, 149, 228, 65] }, { name: "Tamil Male", flag: "hi", gender: "m", voiceIDs: [141] }, { name: "Thai Female", flag: "th", gender: "f", voiceIDs: [143, 142, 144, 189, 229, 145] }, { name: "Turkish Female", flag: "tr", gender: "f", voiceIDs: [69, 70, 82, 190, 230, 71] }, { name: "Afrikaans Male", flag: "af", gender: "m", voiceIDs: [93] }, { name: "Albanian Male",
    flag: "sq", gender: "m", voiceIDs: [94] }, { name: "Bosnian Male", flag: "bs", gender: "m", voiceIDs: [14] }, { name: "Catalan Male", flag: "catalonia", gender: "m", voiceIDs: [68] }, { name: "Croatian Male", flag: "hr", gender: "m", voiceIDs: [13] }, { name: "Czech Male", flag: "cz", gender: "m", voiceIDs: [161] }, { name: "Danish Male", flag: "da", gender: "m", voiceIDs: [162], deprecated: !0 }, { name: "Esperanto Male", flag: "eo", gender: "m", voiceIDs: [108] }, { name: "Finnish Male", flag: "fi", gender: "m", voiceIDs: [160], deprecated: !0 }, { name: "Greek Male", flag: "gr",
    gender: "m", voiceIDs: [163], deprecated: !0 }, { name: "Hungarian Male", flag: "hu", gender: "m", voiceIDs: [164] }, { name: "Icelandic Male", flag: "is", gender: "m", voiceIDs: [110] }, { name: "Latin Male", flag: "va", gender: "m", voiceIDs: [165], deprecated: !0 }, { name: "Latvian Male", flag: "lv", gender: "m", voiceIDs: [115] }, { name: "Macedonian Male", flag: "mk", gender: "m", voiceIDs: [116] }, { name: "Moldavian Male", flag: "md", gender: "m", voiceIDs: [117] }, { name: "Montenegrin Male", flag: "me", gender: "m", voiceIDs: [118] }, { name: "Norwegian Male", flag: "no",
    gender: "m", voiceIDs: [166] }, { name: "Serbian Male", flag: "sr", gender: "m", voiceIDs: [12] }, { name: "Serbo-Croatian Male", flag: "hr", gender: "m", voiceIDs: [131] }, { name: "Slovak Male", flag: "sk", gender: "m", voiceIDs: [167], deprecated: !0 }, { name: "Swahili Male", flag: "sw", gender: "m", voiceIDs: [140] }, { name: "Swedish Male", flag: "sv", gender: "m", voiceIDs: [168], deprecated: !0 }, { name: "Vietnamese Male", flag: "vi", gender: "m", voiceIDs: [146], deprecated: !0 }, { name: "Welsh Male", flag: "cy", gender: "m", voiceIDs: [147] }, { name: "US English Male",
    flag: "us", gender: "m", voiceIDs: [0, 4, 2, 6, 7, 75, 159] }, { name: "Fallback UK Female", flag: "gb", gender: "f", voiceIDs: [8] }];a.voicecollection = [{ name: "Google UK English Male" }, { name: "Agnes" }, { name: "Daniel Compact" }, { name: "Google UK English Female" }, { name: "en-GB", rate: .25, pitch: 1 }, { name: "en-AU", rate: .25, pitch: 1 }, { name: "ingl\xE9s Reino Unido" }, { name: "English United Kingdom" }, { name: "Fallback en-GB Female", lang: "en-GB", fallbackvoice: !0 }, { name: "Eszter Compact" }, { name: "hu-HU", rate: .4 }, { name: "Fallback Hungarian",
    lang: "hu", fallbackvoice: !0, service: "g2" }, { name: "Fallback Serbian", lang: "sr", fallbackvoice: !0 }, { name: "Fallback Croatian", lang: "hr", fallbackvoice: !0 }, { name: "Fallback Bosnian", lang: "bs", fallbackvoice: !0 }, { name: "Fallback Spanish", lang: "es", fallbackvoice: !0 }, { name: "Spanish Spain" }, { name: "espa\xF1ol Espa\xF1a" }, { name: "Diego Compact", rate: .3 }, { name: "Google Espa\xF1ol" }, { name: "es-ES", rate: .2 }, { name: "Google Fran\xE7ais" }, { name: "French France" }, { name: "franc\xE9s Francia" }, { name: "Virginie Compact",
    rate: .5 }, { name: "fr-FR", rate: .25 }, { name: "Fallback French", lang: "fr", fallbackvoice: !0 }, { name: "Google Deutsch" }, { name: "German Germany" }, { name: "alem\xE1n Alemania" }, { name: "Yannick Compact", rate: .5 }, { name: "de-DE", rate: .25 }, { name: "Fallback Deutsch", lang: "de", fallbackvoice: !0 }, { name: "Google Italiano" }, { name: "Italian Italy" }, { name: "italiano Italia" }, { name: "Paolo Compact", rate: .5 }, { name: "it-IT", rate: .25 }, { name: "Fallback Italian", lang: "it", fallbackvoice: !0 }, { name: "Google US English", timerSpeed: 1 }, { name: "English United States" }, { name: "ingl\xE9s Estados Unidos" }, { name: "Vicki" }, { name: "en-US", rate: .2, pitch: 1, timerSpeed: 1.3 }, { name: "Fallback English", lang: "en-US", fallbackvoice: !0, timerSpeed: 0 }, { name: "Fallback Dutch", lang: "nl", fallbackvoice: !0, timerSpeed: 0 }, { name: "Fallback Romanian", lang: "ro", fallbackvoice: !0 }, { name: "Milena Compact" }, { name: "ru-RU", rate: .25 }, { name: "Fallback Russian", lang: "ru", fallbackvoice: !0 }, { name: "Google \u65E5\u672C\u4EBA", timerSpeed: 1 }, { name: "Kyoko Compact" }, { name: "ja-JP", rate: .25 }, { name: "Fallback Japanese",
    lang: "ja", fallbackvoice: !0 }, { name: "Google \uD55C\uAD6D\uC758", timerSpeed: 1 }, { name: "Narae Compact" }, { name: "ko-KR", rate: .25 }, { name: "Fallback Korean", lang: "ko", fallbackvoice: !0 }, { name: "Google \u4E2D\u56FD\u7684", timerSpeed: 1 }, { name: "Ting-Ting Compact" }, { name: "zh-CN", rate: .25 }, { name: "Fallback Chinese", lang: "zh-CN", fallbackvoice: !0 }, { name: "Alexandros Compact" }, { name: "el-GR", rate: .25 }, { name: "Fallback Greek", lang: "el", fallbackvoice: !0, service: "g2" }, { name: "Fallback Swedish", lang: "sv", fallbackvoice: !0, service: "g2" }, { name: "hi-IN", rate: .25 }, { name: "Fallback Hindi", lang: "hi", fallbackvoice: !0 }, { name: "Fallback Catalan", lang: "ca", fallbackvoice: !0 }, { name: "Aylin Compact" }, { name: "tr-TR", rate: .25 }, { name: "Fallback Turkish", lang: "tr", fallbackvoice: !0 }, { name: "Stine Compact" }, { name: "no-NO", rate: .25 }, { name: "Fallback Norwegian", lang: "no", fallbackvoice: !0, service: "g2" }, { name: "Daniel" }, { name: "Monica" }, { name: "Amelie" }, { name: "Anna" }, { name: "Alice" }, { name: "Melina" }, { name: "Mariska" }, { name: "Yelda" }, { name: "Milena" }, { name: "Xander" }, { name: "Alva" }, { name: "Lee Compact" }, { name: "Karen" }, { name: "Fallback Australian", lang: "en-AU", fallbackvoice: !0 }, { name: "Mikko Compact" }, { name: "Satu" }, { name: "fi-FI", rate: .25 }, { name: "Fallback Finnish", lang: "fi", fallbackvoice: !0, service: "g2" }, { name: "Fallback Afrikans", lang: "af", fallbackvoice: !0 }, { name: "Fallback Albanian", lang: "sq", fallbackvoice: !0 }, { name: "Maged Compact" }, { name: "Tarik" }, { name: "ar-SA", rate: .25 }, { name: "Fallback Arabic", lang: "ar", fallbackvoice: !0, service: "g2" }, { name: "Fallback Armenian", lang: "hy", fallbackvoice: !0,
    service: "g2" }, { name: "Zuzana Compact" }, { name: "Zuzana" }, { name: "cs-CZ", rate: .25 }, { name: "Fallback Czech", lang: "cs", fallbackvoice: !0, service: "g2" }, { name: "Ida Compact" }, { name: "Sara" }, { name: "da-DK", rate: .25 }, { name: "Fallback Danish", lang: "da", fallbackvoice: !0, service: "g2" }, { name: "Fallback Esperanto", lang: "eo", fallbackvoice: !0 }, { name: "Fallback Hatian Creole", lang: "ht", fallbackvoice: !0 }, { name: "Fallback Icelandic", lang: "is", fallbackvoice: !0 }, { name: "Damayanti" }, { name: "id-ID", rate: .25 }, { name: "Fallback Indonesian",
    lang: "id", fallbackvoice: !0 }, { name: "Fallback Latin", lang: "la", fallbackvoice: !0, service: "g2" }, { name: "Fallback Latvian", lang: "lv", fallbackvoice: !0 }, { name: "Fallback Macedonian", lang: "mk", fallbackvoice: !0 }, { name: "Fallback Moldavian", lang: "mo", fallbackvoice: !0, service: "g2" }, { name: "Fallback Montenegrin", lang: "sr-ME", fallbackvoice: !0 }, { name: "Agata Compact" }, { name: "Zosia" }, { name: "pl-PL", rate: .25 }, { name: "Fallback Polish", lang: "pl", fallbackvoice: !0 }, { name: "Raquel Compact" }, { name: "Luciana" }, { name: "pt-BR", rate: .25 }, { name: "Fallback Brazilian Portugese", lang: "pt-BR", fallbackvoice: !0, service: "g2" }, { name: "Joana Compact" }, { name: "Joana" }, { name: "pt-PT", rate: .25 }, { name: "Fallback Portuguese", lang: "pt-PT", fallbackvoice: !0 }, { name: "Fallback Serbo-Croation", lang: "sh", fallbackvoice: !0, service: "g2" }, { name: "Laura Compact" }, { name: "Laura" }, { name: "sk-SK", rate: .25 }, { name: "Fallback Slovak", lang: "sk", fallbackvoice: !0, service: "g2" }, { name: "Javier Compact" }, { name: "Paulina" }, { name: "es-MX", rate: .25 }, { name: "Fallback Spanish (Latin American)",
    lang: "es-419", fallbackvoice: !0, service: "g2" }, { name: "Fallback Swahili", lang: "sw", fallbackvoice: !0 }, { name: "Fallback Tamil", lang: "ta", fallbackvoice: !0 }, { name: "Narisa Compact" }, { name: "Kanya" }, { name: "th-TH", rate: .25 }, { name: "Fallback Thai", lang: "th", fallbackvoice: !0 }, { name: "Fallback Vietnamese", lang: "vi", fallbackvoice: !0 }, { name: "Fallback Welsh", lang: "cy", fallbackvoice: !0 }, { name: "Oskar Compact" }, { name: "sv-SE", rate: .25 }, { name: "Simona Compact" }, { name: "Ioana" }, { name: "ro-RO", rate: .25 }, { name: "Kyoko" }, { name: "Lekha" }, { name: "Ting-Ting" }, { name: "Yuna" }, { name: "Xander Compact" }, { name: "nl-NL", rate: .25 }, { name: "Fallback UK English Male", lang: "en-GB", fallbackvoice: !0, service: "g1", voicename: "rjs" }, { name: "Finnish Male", lang: "fi", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Czech Male", lang: "cs", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Danish Male", lang: "da", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Greek Male", lang: "el", fallbackvoice: !0, service: "g1", voicename: "", rate: .25 }, { name: "Hungarian Male",
    lang: "hu", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Latin Male", lang: "la", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Norwegian Male", lang: "no", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Slovak Male", lang: "sk", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Swedish Male", lang: "sv", fallbackvoice: !0, service: "g1", voicename: "" }, { name: "Fallback US English Male", lang: "en", fallbackvoice: !0, service: "tts-api", voicename: "" }, { name: "German Germany", lang: "de_DE" }, { name: "English United Kingdom",
    lang: "en_GB" }, { name: "English India", lang: "en_IN" }, { name: "English United States", lang: "en_US" }, { name: "Spanish Spain", lang: "es_ES" }, { name: "Spanish Mexico", lang: "es_MX" }, { name: "Spanish United States", lang: "es_US" }, { name: "French Belgium", lang: "fr_BE" }, { name: "French France", lang: "fr_FR" }, { name: "Hindi India", lang: "hi_IN" }, { name: "Indonesian Indonesia", lang: "in_ID" }, { name: "Italian Italy", lang: "it_IT" }, { name: "Japanese Japan", lang: "ja_JP" }, { name: "Korean South Korea", lang: "ko_KR" }, { name: "Dutch Netherlands",
    lang: "nl_NL" }, { name: "Polish Poland", lang: "pl_PL" }, { name: "Portuguese Brazil", lang: "pt_BR" }, { name: "Portuguese Portugal", lang: "pt_PT" }, { name: "Russian Russia", lang: "ru_RU" }, { name: "Thai Thailand", lang: "th_TH" }, { name: "Turkish Turkey", lang: "tr_TR" }, { name: "Chinese China", lang: "zh_CN_#Hans" }, { name: "Chinese Hong Kong", lang: "zh_HK_#Hans" }, { name: "Chinese Hong Kong", lang: "zh_HK_#Hant" }, { name: "Chinese Taiwan", lang: "zh_TW_#Hant" }, { name: "Alex" }, { name: "Maged", lang: "ar-SA" }, { name: "Zuzana", lang: "cs-CZ" }, { name: "Sara",
    lang: "da-DK" }, { name: "Anna", lang: "de-DE" }, { name: "Melina", lang: "el-GR" }, { name: "Karen", lang: "en-AU" }, { name: "Daniel", lang: "en-GB" }, { name: "Moira", lang: "en-IE" }, { name: "Samantha (Enhanced)", lang: "en-US" }, { name: "Samantha", lang: "en-US" }, { name: "Tessa", lang: "en-ZA" }, { name: "Monica", lang: "es-ES" }, { name: "Paulina", lang: "es-MX" }, { name: "Satu", lang: "fi-FI" }, { name: "Amelie", lang: "fr-CA" }, { name: "Thomas", lang: "fr-FR" }, { name: "Carmit", lang: "he-IL" }, { name: "Lekha", lang: "hi-IN" }, { name: "Mariska", lang: "hu-HU" }, { name: "Damayanti",
    lang: "id-ID" }, { name: "Alice", lang: "it-IT" }, { name: "Kyoko", lang: "ja-JP" }, { name: "Yuna", lang: "ko-KR" }, { name: "Ellen", lang: "nl-BE" }, { name: "Xander", lang: "nl-NL" }, { name: "Nora", lang: "no-NO" }, { name: "Zosia", lang: "pl-PL" }, { name: "Luciana", lang: "pt-BR" }, { name: "Joana", lang: "pt-PT" }, { name: "Ioana", lang: "ro-RO" }, { name: "Milena", lang: "ru-RU" }, { name: "Laura", lang: "sk-SK" }, { name: "Alva", lang: "sv-SE" }, { name: "Kanya", lang: "th-TH" }, { name: "Yelda", lang: "tr-TR" }, { name: "Ting-Ting", lang: "zh-CN" }, { name: "Sin-Ji", lang: "zh-HK" }, { name: "Mei-Jia",
    lang: "zh-TW" }];a.iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent);a.iOS9 = /(iphone|ipod|ipad).* os 9_/.test(navigator.userAgent.toLowerCase());a.is_chrome = -1 < navigator.userAgent.indexOf("Chrome");a.is_safari = -1 < navigator.userAgent.indexOf("Safari");a.is_chrome && a.is_safari && (a.is_safari = !1);a.is_opera = !!window.opera || 0 <= navigator.userAgent.indexOf(" OPR/");a.is_android = -1 < navigator.userAgent.toLowerCase().indexOf("android");a.iOS_initialized = !1;a.iOS9_initialized = !1;a.cache_ios_voices = [{ name: "he-IL",
    voiceURI: "he-IL", lang: "he-IL" }, { name: "th-TH", voiceURI: "th-TH", lang: "th-TH" }, { name: "pt-BR", voiceURI: "pt-BR", lang: "pt-BR" }, { name: "sk-SK", voiceURI: "sk-SK", lang: "sk-SK" }, { name: "fr-CA", voiceURI: "fr-CA", lang: "fr-CA" }, { name: "ro-RO", voiceURI: "ro-RO", lang: "ro-RO" }, { name: "no-NO", voiceURI: "no-NO", lang: "no-NO" }, { name: "fi-FI", voiceURI: "fi-FI", lang: "fi-FI" }, { name: "pl-PL", voiceURI: "pl-PL", lang: "pl-PL" }, { name: "de-DE", voiceURI: "de-DE", lang: "de-DE" }, { name: "nl-NL", voiceURI: "nl-NL", lang: "nl-NL" }, { name: "id-ID", voiceURI: "id-ID",
    lang: "id-ID" }, { name: "tr-TR", voiceURI: "tr-TR", lang: "tr-TR" }, { name: "it-IT", voiceURI: "it-IT", lang: "it-IT" }, { name: "pt-PT", voiceURI: "pt-PT", lang: "pt-PT" }, { name: "fr-FR", voiceURI: "fr-FR", lang: "fr-FR" }, { name: "ru-RU", voiceURI: "ru-RU", lang: "ru-RU" }, { name: "es-MX", voiceURI: "es-MX", lang: "es-MX" }, { name: "zh-HK", voiceURI: "zh-HK", lang: "zh-HK" }, { name: "sv-SE", voiceURI: "sv-SE", lang: "sv-SE" }, { name: "hu-HU", voiceURI: "hu-HU", lang: "hu-HU" }, { name: "zh-TW", voiceURI: "zh-TW", lang: "zh-TW" }, { name: "es-ES", voiceURI: "es-ES", lang: "es-ES" }, { name: "zh-CN", voiceURI: "zh-CN", lang: "zh-CN" }, { name: "nl-BE", voiceURI: "nl-BE", lang: "nl-BE" }, { name: "en-GB", voiceURI: "en-GB", lang: "en-GB" }, { name: "ar-SA", voiceURI: "ar-SA", lang: "ar-SA" }, { name: "ko-KR", voiceURI: "ko-KR", lang: "ko-KR" }, { name: "cs-CZ", voiceURI: "cs-CZ", lang: "cs-CZ" }, { name: "en-ZA", voiceURI: "en-ZA", lang: "en-ZA" }, { name: "en-AU", voiceURI: "en-AU", lang: "en-AU" }, { name: "da-DK", voiceURI: "da-DK", lang: "da-DK" }, { name: "en-US", voiceURI: "en-US", lang: "en-US" }, { name: "en-IE", voiceURI: "en-IE", lang: "en-IE" }, { name: "hi-IN",
    voiceURI: "hi-IN", lang: "hi-IN" }, { name: "el-GR", voiceURI: "el-GR", lang: "el-GR" }, { name: "ja-JP", voiceURI: "ja-JP", lang: "ja-JP" }];a.cache_ios9_voices = [{ name: "Maged", voiceURI: "com.apple.ttsbundle.Maged-compact", lang: "ar-SA", localService: !0, "default": !0 }, { name: "Zuzana", voiceURI: "com.apple.ttsbundle.Zuzana-compact", lang: "cs-CZ", localService: !0, "default": !0 }, { name: "Sara", voiceURI: "com.apple.ttsbundle.Sara-compact", lang: "da-DK", localService: !0, "default": !0 }, { name: "Anna", voiceURI: "com.apple.ttsbundle.Anna-compact",
    lang: "de-DE", localService: !0, "default": !0 }, { name: "Melina", voiceURI: "com.apple.ttsbundle.Melina-compact", lang: "el-GR", localService: !0, "default": !0 }, { name: "Karen", voiceURI: "com.apple.ttsbundle.Karen-compact", lang: "en-AU", localService: !0, "default": !0 }, { name: "Daniel", voiceURI: "com.apple.ttsbundle.Daniel-compact", lang: "en-GB", localService: !0, "default": !0 }, { name: "Moira", voiceURI: "com.apple.ttsbundle.Moira-compact", lang: "en-IE", localService: !0, "default": !0 }, { name: "Samantha (Enhanced)", voiceURI: "com.apple.ttsbundle.Samantha-premium",
    lang: "en-US", localService: !0, "default": !0 }, { name: "Samantha", voiceURI: "com.apple.ttsbundle.Samantha-compact", lang: "en-US", localService: !0, "default": !0 }, { name: "Tessa", voiceURI: "com.apple.ttsbundle.Tessa-compact", lang: "en-ZA", localService: !0, "default": !0 }, { name: "Monica", voiceURI: "com.apple.ttsbundle.Monica-compact", lang: "es-ES", localService: !0, "default": !0 }, { name: "Paulina", voiceURI: "com.apple.ttsbundle.Paulina-compact", lang: "es-MX", localService: !0, "default": !0 }, { name: "Satu", voiceURI: "com.apple.ttsbundle.Satu-compact",
    lang: "fi-FI", localService: !0, "default": !0 }, { name: "Amelie", voiceURI: "com.apple.ttsbundle.Amelie-compact", lang: "fr-CA", localService: !0, "default": !0 }, { name: "Thomas", voiceURI: "com.apple.ttsbundle.Thomas-compact", lang: "fr-FR", localService: !0, "default": !0 }, { name: "Carmit", voiceURI: "com.apple.ttsbundle.Carmit-compact", lang: "he-IL", localService: !0, "default": !0 }, { name: "Lekha", voiceURI: "com.apple.ttsbundle.Lekha-compact", lang: "hi-IN", localService: !0, "default": !0 }, { name: "Mariska", voiceURI: "com.apple.ttsbundle.Mariska-compact",
    lang: "hu-HU", localService: !0, "default": !0 }, { name: "Damayanti", voiceURI: "com.apple.ttsbundle.Damayanti-compact", lang: "id-ID", localService: !0, "default": !0 }, { name: "Alice", voiceURI: "com.apple.ttsbundle.Alice-compact", lang: "it-IT", localService: !0, "default": !0 }, { name: "Kyoko", voiceURI: "com.apple.ttsbundle.Kyoko-compact", lang: "ja-JP", localService: !0, "default": !0 }, { name: "Yuna", voiceURI: "com.apple.ttsbundle.Yuna-compact", lang: "ko-KR", localService: !0, "default": !0 }, { name: "Ellen", voiceURI: "com.apple.ttsbundle.Ellen-compact",
    lang: "nl-BE", localService: !0, "default": !0 }, { name: "Xander", voiceURI: "com.apple.ttsbundle.Xander-compact", lang: "nl-NL", localService: !0, "default": !0 }, { name: "Nora", voiceURI: "com.apple.ttsbundle.Nora-compact", lang: "no-NO", localService: !0, "default": !0 }, { name: "Zosia", voiceURI: "com.apple.ttsbundle.Zosia-compact", lang: "pl-PL", localService: !0, "default": !0 }, { name: "Luciana", voiceURI: "com.apple.ttsbundle.Luciana-compact", lang: "pt-BR", localService: !0, "default": !0 }, { name: "Joana", voiceURI: "com.apple.ttsbundle.Joana-compact",
    lang: "pt-PT", localService: !0, "default": !0 }, { name: "Ioana", voiceURI: "com.apple.ttsbundle.Ioana-compact", lang: "ro-RO", localService: !0, "default": !0 }, { name: "Milena", voiceURI: "com.apple.ttsbundle.Milena-compact", lang: "ru-RU", localService: !0, "default": !0 }, { name: "Laura", voiceURI: "com.apple.ttsbundle.Laura-compact", lang: "sk-SK", localService: !0, "default": !0 }, { name: "Alva", voiceURI: "com.apple.ttsbundle.Alva-compact", lang: "sv-SE", localService: !0, "default": !0 }, { name: "Kanya", voiceURI: "com.apple.ttsbundle.Kanya-compact",
    lang: "th-TH", localService: !0, "default": !0 }, { name: "Yelda", voiceURI: "com.apple.ttsbundle.Yelda-compact", lang: "tr-TR", localService: !0, "default": !0 }, { name: "Ting-Ting", voiceURI: "com.apple.ttsbundle.Ting-Ting-compact", lang: "zh-CN", localService: !0, "default": !0 }, { name: "Sin-Ji", voiceURI: "com.apple.ttsbundle.Sin-Ji-compact", lang: "zh-HK", localService: !0, "default": !0 }, { name: "Mei-Jia", voiceURI: "com.apple.ttsbundle.Mei-Jia-compact", lang: "zh-TW", localService: !0, "default": !0 }];a.systemvoices = null;a.CHARACTER_LIMIT = 100;a.VOICESUPPORT_ATTEMPTLIMIT = 5;a.voicesupport_attempts = 0;a.fallbackMode = !1;a.WORDS_PER_MINUTE = 130;a.fallback_parts = null;a.fallback_part_index = 0;a.fallback_audio = null;a.fallback_playbackrate = 1;a.def_fallback_playbackrate = a.fallback_playbackrate;a.fallback_audiopool = [];a.msgparameters = null;a.timeoutId = null;a.OnLoad_callbacks = [];a.useTimer = !1;a.utterances = [];a.tstCompiled = function (a) {
    return eval("typeof xy === 'undefined'");
  };a.fallbackServicePath = "https://code.responsivevoice.org/" + (a.tstCompiled() ? "" : "develop/") + "getvoice.php";a.default_rv = a.responsivevoices[0];a.init = function () {
    a.is_android && (a.useTimer = !0);a.is_opera || "undefined" === typeof speechSynthesis ? (console.log("RV: Voice synthesis not supported"), a.enableFallbackMode()) : setTimeout(function () {
      var b = setInterval(function () {
        var c = window.speechSynthesis.getVoices();0 != c.length || null != a.systemvoices && 0 != a.systemvoices.length ? (console.log("RV: Voice support ready"), a.systemVoicesReady(c), clearInterval(b)) : (console.log("Voice support NOT ready"), a.voicesupport_attempts++, a.voicesupport_attempts > a.VOICESUPPORT_ATTEMPTLIMIT && (clearInterval(b), null != window.speechSynthesis ? a.iOS ? (a.iOS9 ? a.systemVoicesReady(a.cache_ios9_voices) : a.systemVoicesReady(a.cache_ios_voices), console.log("RV: Voice support ready (cached)")) : (console.log("RV: speechSynthesis present but no system voices found"), a.enableFallbackMode()) : a.enableFallbackMode()));
      }, 100);
    }, 100);a.Dispatch("OnLoad");
  };a.systemVoicesReady = function (b) {
    a.systemvoices = b;a.mapRVs();null != a.OnVoiceReady && a.OnVoiceReady.call();a.Dispatch("OnReady");window.hasOwnProperty("dispatchEvent") && window.dispatchEvent(new Event("ResponsiveVoice_OnReady"));
  };a.enableFallbackMode = function () {
    a.fallbackMode = !0;console.log("RV: Enabling fallback mode");a.mapRVs();null != a.OnVoiceReady && a.OnVoiceReady.call();a.Dispatch("OnReady");window.hasOwnProperty("dispatchEvent") && window.dispatchEvent(new Event("ResponsiveVoice_OnReady"));
  };a.getVoices = function () {
    for (var b = [], c = 0; c < a.responsivevoices.length; c++) {
      b.push({ name: a.responsivevoices[c].name });
    }return b;
  };a.speak = function (b, c, f) {
    if (a.iOS9 && !a.iOS9_initialized) console.log("Initializing ios9"), setTimeout(function () {
      a.speak(b, c, f);
    }, 100), a.clickEvent(), a.iOS9_initialized = !0;else {
      a.isPlaying() && (console.log("Cancelling previous speech"), a.cancel());a.fallbackMode && 0 < a.fallback_audiopool.length && a.clearFallbackPool();b = b.replace(/[\"\`]/gm, "'");a.msgparameters = f || {};a.msgtext = b;a.msgvoicename = c;a.onstartFired = !1;var h = [];if (b.length > a.CHARACTER_LIMIT) {
        for (var e = b; e.length > a.CHARACTER_LIMIT;) {
          var g = e.search(/[:!?.;]+/),
              d = "";if (-1 == g || g >= a.CHARACTER_LIMIT) g = e.search(/[,]+/);-1 == g && -1 == e.search(" ") && (g = 99);if (-1 == g || g >= a.CHARACTER_LIMIT) for (var k = e.split(" "), g = 0; g < k.length && !(d.length + k[g].length + 1 > a.CHARACTER_LIMIT); g++) {
            d += (0 != g ? " " : "") + k[g];
          } else d = e.substr(0, g + 1);e = e.substr(d.length, e.length - d.length);h.push(d);
        }0 < e.length && h.push(e);
      } else h.push(b);a.multipartText = h;g = null == c ? a.default_rv : a.getResponsiveVoice(c);!0 === g.deprecated && console.warn("ResponsiveVoice: Voice " + g.name + " is deprecated and will be removed in future releases");
      e = {};if (null != g.mappedProfile) e = g.mappedProfile;else if (e.systemvoice = a.getMatchedVoice(g), e.collectionvoice = {}, null == e.systemvoice) {
        console.log("RV: ERROR: No voice found for: " + c + " " + JSON.stringify(g));return;
      }1 == e.collectionvoice.fallbackvoice ? (a.fallbackMode = !0, a.fallback_parts = []) : a.fallbackMode = !1;a.msgprofile = e;a.utterances = [];for (g = 0; g < h.length; g++) {
        if (a.fallbackMode) {
          a.fallback_playbackrate = a.def_fallback_playbackrate;var d = a.selectBest([e.collectionvoice.pitch, e.systemvoice.pitch, 1]),
              k = a.selectBest([a.iOS9 ? 1 : null, e.collectionvoice.rate, e.systemvoice.rate, 1]),
              l = a.selectBest([e.collectionvoice.volume, e.systemvoice.volume, 1]);null != f && (d *= null != f.pitch ? f.pitch : 1, k *= null != f.rate ? f.rate : 1, l *= null != f.volume ? f.volume : 1);d /= 2;k /= 2;l *= 2;d = Math.min(Math.max(d, 0), 1);k = Math.min(Math.max(k, 0), 1);l = Math.min(Math.max(l, 0), 1);d = a.fallbackServicePath + "?t=" + encodeURIComponent(h[g]) + "&tl=" + (e.collectionvoice.lang || e.systemvoice.lang || "en-US") + "&sv=" + (e.collectionvoice.service || e.systemvoice.service || "") + "&vn=" + (e.collectionvoice.voicename || e.systemvoice.voicename || "") + "&pitch=" + d.toString() + "&rate=" + k.toString() + "&vol=" + l.toString();k = document.createElement("AUDIO");k.src = d;k.playbackRate = a.fallback_playbackrate;k.preload = "auto";k.load();a.fallback_parts.push(k);
        } else d = new SpeechSynthesisUtterance(), d.voice = e.systemvoice, d.voiceURI = e.systemvoice.voiceURI, d.volume = a.selectBest([e.collectionvoice.volume, e.systemvoice.volume, 1]), d.rate = a.selectBest([a.iOS9 ? 1 : null, e.collectionvoice.rate, e.systemvoice.rate, 1]), d.pitch = a.selectBest([e.collectionvoice.pitch, e.systemvoice.pitch, 1]), d.text = h[g], d.lang = a.selectBest([e.collectionvoice.lang, e.systemvoice.lang]), d.rvIndex = g, d.rvTotal = h.length, 0 == g && (d.onstart = a.speech_onstart), a.msgparameters.onendcalled = !1, null != f ? (g < h.length - 1 && 1 < h.length ? (d.onend = a.onPartEnd, d.hasOwnProperty("addEventListener") && d.addEventListener("end", a.onPartEnd)) : (d.onend = a.speech_onend, d.hasOwnProperty("addEventListener") && d.addEventListener("end", a.speech_onend)), d.onerror = f.onerror || function (a) {
          console.log("RV: Unknow Error");console.log(a);
        }, d.onpause = f.onpause, d.onresume = f.onresume, d.onmark = f.onmark, d.onboundary = f.onboundary || a.onboundary, d.pitch = null != f.pitch ? f.pitch : d.pitch, d.rate = a.iOS ? (null != f.rate ? f.rate * f.rate : 1) * d.rate : (null != f.rate ? f.rate : 1) * d.rate, d.volume = null != f.volume ? f.volume : d.volume) : (d.onend = a.speech_onend, d.onerror = function (a) {
          console.log("RV: Unknow Error");console.log(a);
        }), a.utterances.push(d), 0 == g && (a.currentMsg = d), console.log(d), a.tts_speak(d);
      }a.fallbackMode && (a.fallback_part_index = 0, a.fallback_startPart());
    }
  };a.startTimeout = function (b, c) {
    var f = a.msgprofile.collectionvoice.timerSpeed;null == a.msgprofile.collectionvoice.timerSpeed && (f = 1);if (!(0 >= f)) {
      var h = b.split(/\s+/).length,
          e = (b.match(/[^ ]/igm) || b).length,
          f = 60 / a.WORDS_PER_MINUTE * f * 1E3 * (e / h / 5.1) * h;3 > h && (f = 4E3);3E3 > f && (f = 3E3);a.timeoutId = setTimeout(c, f);
    }
  };a.checkAndCancelTimeout = function () {
    null != a.timeoutId && (clearTimeout(a.timeoutId), a.timeoutId = null);
  };a.speech_timedout = function () {
    a.cancel();a.cancelled = !1;a.speech_onend();
  };a.speech_onend = function () {
    a.checkAndCancelTimeout();
    !0 === a.cancelled ? a.cancelled = !1 : null != a.msgparameters && null != a.msgparameters.onend && 1 != a.msgparameters.onendcalled && (a.msgparameters.onendcalled = !0, a.msgparameters.onend());
  };a.speech_onstart = function () {
    if (!a.onstartFired) {
      a.onstartFired = !0;if (a.iOS || a.is_safari || a.useTimer) a.fallbackMode || a.startTimeout(a.msgtext, a.speech_timedout);a.msgparameters.onendcalled = !1;if (null != a.msgparameters && null != a.msgparameters.onstart) a.msgparameters.onstart();
    }
  };a.fallback_startPart = function () {
    0 == a.fallback_part_index && a.speech_onstart();a.fallback_audio = a.fallback_parts[a.fallback_part_index];if (null == a.fallback_audio) console.log("RV: Fallback Audio is not available");else {
      var b = a.fallback_audio;a.fallback_audiopool.push(b);setTimeout(function () {
        b.playbackRate = a.fallback_playbackrate;
      }, 50);b.onloadedmetadata = function () {
        b.play();b.playbackRate = a.fallback_playbackrate;
      };a.fallback_audio.play();a.fallback_audio.addEventListener("ended", a.fallback_finishPart);a.useTimer && a.startTimeout(a.multipartText[a.fallback_part_index], a.fallback_finishPart);
    }
  };a.fallback_finishPart = function (b) {
    a.checkAndCancelTimeout();a.fallback_part_index < a.fallback_parts.length - 1 ? (a.fallback_part_index++, a.fallback_startPart()) : a.speech_onend();
  };a.cancel = function () {
    a.checkAndCancelTimeout();a.fallbackMode ? (null != a.fallback_audio && a.fallback_audio.pause(), a.clearFallbackPool()) : (a.cancelled = !0, speechSynthesis.cancel());
  };a.voiceSupport = function () {
    return "speechSynthesis" in window;
  };a.OnFinishedPlaying = function (b) {
    if (null != a.msgparameters && null != a.msgparameters.onend) a.msgparameters.onend();
  };a.setDefaultVoice = function (b) {
    b = a.getResponsiveVoice(b);null != b && (a.default_rv = b);
  };a.mapRVs = function () {
    for (var b = 0; b < a.responsivevoices.length; b++) {
      for (var c = a.responsivevoices[b], f = 0; f < c.voiceIDs.length; f++) {
        var h = a.voicecollection[c.voiceIDs[f]];if (1 != h.fallbackvoice) {
          var e = a.getSystemVoice(h.name);if (null != e) {
            c.mappedProfile = { systemvoice: e, collectionvoice: h };break;
          }
        } else {
          c.mappedProfile = { systemvoice: {}, collectionvoice: h };break;
        }
      }
    }
  };a.getMatchedVoice = function (b) {
    for (var c = 0; c < b.voiceIDs.length; c++) {
      var f = a.getSystemVoice(a.voicecollection[b.voiceIDs[c]].name);if (null != f) return f;
    }return null;
  };a.getSystemVoice = function (b) {
    if ("undefined" === typeof a.systemvoices || null === a.systemvoices) return null;for (var c = 0; c < a.systemvoices.length; c++) {
      if (a.systemvoices[c].name == b) return a.systemvoices[c];
    }return null;
  };a.getResponsiveVoice = function (b) {
    for (var c = 0; c < a.responsivevoices.length; c++) {
      if (a.responsivevoices[c].name == b) return a.responsivevoices[c];
    }return null;
  };a.Dispatch = function (b) {
    if (a.hasOwnProperty(b + "_callbacks") && null != a[b + "_callbacks"] && 0 < a[b + "_callbacks"].length) {
      for (var c = a[b + "_callbacks"], f = 0; f < c.length; f++) {
        c[f]();
      }return !0;
    }var h = b + "_callbacks_timeout",
        e = b + "_callbacks_timeoutCount";a.hasOwnProperty(h) || (a[e] = 10, a[h] = setInterval(function () {
      --a[e];(a.Dispatch(b) || 0 > a[e]) && clearTimeout(a[h]);
    }, 50));return !1;
  };a.AddEventListener = function (b, c) {
    a.hasOwnProperty(b + "_callbacks") || (a[b + "_callbacks"] = []);a[b + "_callbacks"].push(c);
  };a.addEventListener = a.AddEventListener;a.clickEvent = function () {
    if (a.iOS && !a.iOS_initialized) {
      console.log("Initializing iOS click event");var b = new SpeechSynthesisUtterance(" ");speechSynthesis.speak(b);a.iOS_initialized = !0;
    }
  };a.isPlaying = function () {
    return a.fallbackMode ? null != a.fallback_audio && !a.fallback_audio.ended && !a.fallback_audio.paused : speechSynthesis.speaking;
  };a.clearFallbackPool = function () {
    for (var b = 0; b < a.fallback_audiopool.length; b++) {
      null != a.fallback_audiopool[b] && (a.fallback_audiopool[b].pause(), a.fallback_audiopool[b].src = "");
    }a.fallback_audiopool = [];
  };"complete" === document.readyState ? a.init() : document.addEventListener("DOMContentLoaded", function () {
    a.init();
  });a.selectBest = function (a) {
    for (var c = 0; c < a.length; c++) {
      if (null != a[c]) return a[c];
    }return null;
  };a.pause = function () {
    a.fallbackMode ? null != a.fallback_audio && a.fallback_audio.pause() : speechSynthesis.pause();
  };a.resume = function () {
    a.fallbackMode ? null != a.fallback_audio && a.fallback_audio.play() : speechSynthesis.resume();
  };a.tts_speak = function (b) {
    setTimeout(function () {
      a.cancelled = !1;speechSynthesis.speak(b);
    }, .01);
  };a.setVolume = function (b) {
    if (a.isPlaying()) if (a.fallbackMode) {
      for (var c = 0; c < a.fallback_parts.length; c++) {
        a.fallback_parts[c].volume = b;
      }for (c = 0; c < a.fallback_audiopool.length; c++) {
        a.fallback_audiopool[c].volume = b;
      }a.fallback_audio.volume = b;
    } else for (c = 0; c < a.utterances.length; c++) {
      a.utterances[c].volume = b;
    }
  };a.onPartEnd = function (b) {
    if (null != a.msgparameters && null != a.msgparameters.onchuckend) a.msgparameters.onchuckend();a.Dispatch("OnPartEnd");b = a.utterances.indexOf(b.utterance);a.currentMsg = a.utterances[b + 1];
  };a.onboundary = function (b) {
    console.log("On Boundary");a.iOS && !a.onstartFired && a.speech_onstart();
  };
},
    responsiveVoice = new ResponsiveVoice();module.exports = ResponsiveVoice;

},{}],3:[function(require,module,exports){
'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('./util');

var _inject = require('./inject');

/* ::
import type { SelectorHandler } from './generate.js';
export type SheetDefinition = { [id:string]: any };
export type SheetDefinitions = SheetDefinition | SheetDefinition[];
type RenderFunction = () => string;
type Extension = {
    selectorHandler: SelectorHandler
};
export type MaybeSheetDefinition = SheetDefinition | false | null | void
*/

var StyleSheet = {
    create: function create(sheetDefinition /* : SheetDefinition */) {
        return (0, _util.mapObj)(sheetDefinition, function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2);

            var key = _ref2[0];
            var val = _ref2[1];

            return [key, {
                // TODO(emily): Make a 'production' mode which doesn't prepend
                // the class name here, to make the generated CSS smaller.
                _name: key + '_' + (0, _util.hashObject)(val),
                _definition: val
            }];
        });
    },

    rehydrate: function rehydrate() {
        var renderedClassNames /* : string[] */ = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        (0, _inject.addRenderedClassNames)(renderedClassNames);
    }
};

/**
 * Utilities for using Aphrodite server-side.
 */
var StyleSheetServer = {
    renderStatic: function renderStatic(renderFunc /* : RenderFunction */) {
        (0, _inject.reset)();
        (0, _inject.startBuffering)();
        var html = renderFunc();
        var cssContent = (0, _inject.flushToString)();

        return {
            html: html,
            css: {
                content: cssContent,
                renderedClassNames: (0, _inject.getRenderedClassNames)()
            }
        };
    }
};

/**
 * Utilities for using Aphrodite in tests.
 *
 * Not meant to be used in production.
 */
var StyleSheetTestUtils = {
    /**
     * Prevent styles from being injected into the DOM.
     *
     * This is useful in situations where you'd like to test rendering UI
     * components which use Aphrodite without any of the side-effects of
     * Aphrodite happening. Particularly useful for testing the output of
     * components when you have no DOM, e.g. testing in Node without a fake DOM.
     *
     * Should be paired with a subsequent call to
     * clearBufferAndResumeStyleInjection.
     */
    suppressStyleInjection: function suppressStyleInjection() {
        (0, _inject.reset)();
        (0, _inject.startBuffering)();
    },

    /**
     * Opposite method of preventStyleInject.
     */
    clearBufferAndResumeStyleInjection: function clearBufferAndResumeStyleInjection() {
        (0, _inject.reset)();
    }
};

/**
 * Generate the Aphrodite API exports, with given `selectorHandlers` and
 * `useImportant` state.
 */
var makeExports = function makeExports(useImportant, /* : boolean */
selectorHandlers /* : SelectorHandler[] */
) {
    return {
        StyleSheet: _extends({}, StyleSheet, {

            /**
             * Returns a version of the exports of Aphrodite (i.e. an object
             * with `css` and `StyleSheet` properties) which have some
             * extensions included.
             *
             * @param {Array.<Object>} extensions: An array of extensions to
             *     add to this instance of Aphrodite. Each object should have a
             *     single property on it, defining which kind of extension to
             *     add.
             * @param {SelectorHandler} [extensions[].selectorHandler]: A
             *     selector handler extension. See `defaultSelectorHandlers` in
             *     generate.js.
             *
             * @returns {Object} An object containing the exports of the new
             *     instance of Aphrodite.
             */
            extend: function extend(extensions /* : Extension[] */) {
                var extensionSelectorHandlers = extensions
                // Pull out extensions with a selectorHandler property
                .map(function (extension) {
                    return extension.selectorHandler;
                })
                // Remove nulls (i.e. extensions without a selectorHandler
                // property).
                .filter(function (handler) {
                    return handler;
                });

                return makeExports(useImportant, selectorHandlers.concat(extensionSelectorHandlers));
            }
        }),

        StyleSheetServer: StyleSheetServer,
        StyleSheetTestUtils: StyleSheetTestUtils,

        css: function css() /* : MaybeSheetDefinition[] */{
            for (var _len = arguments.length, styleDefinitions = Array(_len), _key = 0; _key < _len; _key++) {
                styleDefinitions[_key] = arguments[_key];
            }

            return (0, _inject.injectAndGetClassName)(useImportant, styleDefinitions, selectorHandlers);
        }
    };
};

module.exports = makeExports;
},{"./inject":6,"./util":9}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inlineStylePrefixerStaticCreatePrefixer = require('inline-style-prefixer/static/createPrefixer');

var _inlineStylePrefixerStaticCreatePrefixer2 = _interopRequireDefault(_inlineStylePrefixerStaticCreatePrefixer);

var _libStaticPrefixData = require('../lib/staticPrefixData');

var _libStaticPrefixData2 = _interopRequireDefault(_libStaticPrefixData);

var _orderedElements = require('./ordered-elements');

var _orderedElements2 = _interopRequireDefault(_orderedElements);

var _util = require('./util');

var prefixAll = (0, _inlineStylePrefixerStaticCreatePrefixer2['default'])(_libStaticPrefixData2['default']);

/* ::
import type { SheetDefinition } from './index.js';
type StringHandlers = { [id:string]: Function };
type SelectorCallback = (selector: string) => any;
export type SelectorHandler = (
    selector: string,
    baseSelector: string,
    callback: SelectorCallback
) => string | null;
*/

/**
 * `selectorHandlers` are functions which handle special selectors which act
 * differently than normal style definitions. These functions look at the
 * current selector and can generate CSS for the styles in their subtree by
 * calling the callback with a new selector.
 *
 * For example, when generating styles with a base selector of '.foo' and the
 * following styles object:
 *
 *   {
 *     ':nth-child(2n)': {
 *       ':hover': {
 *         color: 'red'
 *       }
 *     }
 *   }
 *
 * when we reach the ':hover' style, we would call our selector handlers like
 *
 *   handler(':hover', '.foo:nth-child(2n)', callback)
 *
 * Since our `pseudoSelectors` handles ':hover' styles, that handler would call
 * the callback like
 *
 *   callback('.foo:nth-child(2n):hover')
 *
 * to generate its subtree `{ color: 'red' }` styles with a
 * '.foo:nth-child(2n):hover' selector. The callback would return CSS like
 *
 *   '.foo:nth-child(2n):hover{color:red !important;}'
 *
 * and the handler would then return that resulting CSS.
 *
 * `defaultSelectorHandlers` is the list of default handlers used in a call to
 * `generateCSS`.
 *
 * @name SelectorHandler
 * @function
 * @param {string} selector: The currently inspected selector. ':hover' in the
 *     example above.
 * @param {string} baseSelector: The selector of the parent styles.
 *     '.foo:nth-child(2n)' in the example above.
 * @param {function} generateSubtreeStyles: A function which can be called to
 *     generate CSS for the subtree of styles corresponding to the selector.
 *     Accepts a new baseSelector to use for generating those styles.
 * @returns {?string} The generated CSS for this selector, or null if we don't
 *     handle this selector.
 */
var defaultSelectorHandlers = [
// Handle pseudo-selectors, like :hover and :nth-child(3n)
function pseudoSelectors(selector, /* : string */
baseSelector, /* : string */
generateSubtreeStyles /* : Function */
) /* */{
    if (selector[0] !== ":") {
        return null;
    }
    return generateSubtreeStyles(baseSelector + selector);
},

// Handle media queries (or font-faces)
function mediaQueries(selector, /* : string */
baseSelector, /* : string */
generateSubtreeStyles /* : Function */
) /* */{
    if (selector[0] !== "@") {
        return null;
    }
    // Generate the styles normally, and then wrap them in the media query.
    var generated = generateSubtreeStyles(baseSelector);
    return selector + '{' + generated + '}';
}];

exports.defaultSelectorHandlers = defaultSelectorHandlers;
/**
 * Generate CSS for a selector and some styles.
 *
 * This function handles the media queries and pseudo selectors that can be used
 * in aphrodite styles.
 *
 * @param {string} selector: A base CSS selector for the styles to be generated
 *     with.
 * @param {Object} styleTypes: A list of properties of the return type of
 *     StyleSheet.create, e.g. [styles.red, styles.blue].
 * @param {Array.<SelectorHandler>} selectorHandlers: A list of selector
 *     handlers to use for handling special selectors. See
 *     `defaultSelectorHandlers`.
 * @param stringHandlers: See `generateCSSRuleset`
 * @param useImportant: See `generateCSSRuleset`
 *
 * To actually generate the CSS special-construct-less styles are passed to
 * `generateCSSRuleset`.
 *
 * For instance, a call to
 *
 *     generateCSS(".foo", [{
 *       color: "red",
 *       "@media screen": {
 *         height: 20,
 *         ":hover": {
 *           backgroundColor: "black"
 *         }
 *       },
 *       ":active": {
 *         fontWeight: "bold"
 *       }
 *     }], defaultSelectorHandlers);
 *
 * with the default `selectorHandlers` will make 5 calls to
 * `generateCSSRuleset`:
 *
 *     generateCSSRuleset(".foo", { color: "red" }, ...)
 *     generateCSSRuleset(".foo:active", { fontWeight: "bold" }, ...)
 *     // These 2 will be wrapped in @media screen {}
 *     generateCSSRuleset(".foo", { height: 20 }, ...)
 *     generateCSSRuleset(".foo:hover", { backgroundColor: "black" }, ...)
 */
var generateCSS = function generateCSS(selector, /* : string */
styleTypes, /* : SheetDefinition[] */
selectorHandlers, /* : SelectorHandler[] */
stringHandlers, /* : StringHandlers */
useImportant /* : boolean */
) /* : string */{
    var merged = new _orderedElements2['default']();

    for (var i = 0; i < styleTypes.length; i++) {
        merged.addStyleType(styleTypes[i]);
    }

    var plainDeclarations = new _orderedElements2['default']();
    var generatedStyles = "";

    // TODO(emily): benchmark this to see if a plain for loop would be faster.
    merged.forEach(function (val, key) {
        // For each key, see if one of the selector handlers will handle these
        // styles.
        var foundHandler = selectorHandlers.some(function (handler) {
            var result = handler(key, selector, function (newSelector) {
                return generateCSS(newSelector, [val], selectorHandlers, stringHandlers, useImportant);
            });
            if (result != null) {
                // If the handler returned something, add it to the generated
                // CSS and stop looking for another handler.
                generatedStyles += result;
                return true;
            }
        });
        // If none of the handlers handled it, add it to the list of plain
        // style declarations.
        if (!foundHandler) {
            plainDeclarations.set(key, val);
        }
    });

    return generateCSSRuleset(selector, plainDeclarations, stringHandlers, useImportant, selectorHandlers) + generatedStyles;
};

exports.generateCSS = generateCSS;
/**
 * Helper method of generateCSSRuleset to facilitate custom handling of certain
 * CSS properties. Used for e.g. font families.
 *
 * See generateCSSRuleset for usage and documentation of paramater types.
 */
var runStringHandlers = function runStringHandlers(declarations, /* : OrderedElements */
stringHandlers, /* : StringHandlers */
selectorHandlers /* : SelectorHandler[] */
) /* : OrderedElements */{
    if (!stringHandlers) {
        return declarations;
    }

    var stringHandlerKeys = Object.keys(stringHandlers);
    for (var i = 0; i < stringHandlerKeys.length; i++) {
        var key = stringHandlerKeys[i];
        if (declarations.has(key)) {
            // A declaration exists for this particular string handler, so we
            // need to let the string handler interpret the declaration first
            // before proceeding.
            //
            // TODO(emily): Pass in a callback which generates CSS, similar to
            // how our selector handlers work, instead of passing in
            // `selectorHandlers` and have them make calls to `generateCSS`
            // themselves. Right now, this is impractical because our string
            // handlers are very specialized and do complex things.
            declarations.set(key, stringHandlers[key](declarations.get(key), selectorHandlers));
        }
    }

    return declarations;
};

var transformRule = function transformRule(key, /* : string */
value, /* : string */
transformValue /* : function */
) {
    return (/* : string */(0, _util.kebabifyStyleName)(key) + ':' + transformValue(key, value) + ';'
    );
};

/**
 * Generate a CSS ruleset with the selector and containing the declarations.
 *
 * This function assumes that the given declarations don't contain any special
 * children (such as media queries, pseudo-selectors, or descendant styles).
 *
 * Note that this method does not deal with nesting used for e.g.
 * psuedo-selectors or media queries. That responsibility is left to  the
 * `generateCSS` function.
 *
 * @param {string} selector: the selector associated with the ruleset
 * @param {Object} declarations: a map from camelCased CSS property name to CSS
 *     property value.
 * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS
 *     property name to a function which will map the given value to the value
 *     that is output.
 * @param {bool} useImportant: A boolean saying whether to append "!important"
 *     to each of the CSS declarations.
 * @returns {string} A string of raw CSS.
 *
 * Examples:
 *
 *    generateCSSRuleset(".blah", { color: "red" })
 *    -> ".blah{color: red !important;}"
 *    generateCSSRuleset(".blah", { color: "red" }, {}, false)
 *    -> ".blah{color: red}"
 *    generateCSSRuleset(".blah", { color: "red" }, {color: c => c.toUpperCase})
 *    -> ".blah{color: RED}"
 *    generateCSSRuleset(".blah:hover", { color: "red" })
 *    -> ".blah:hover{color: red}"
 */
var generateCSSRuleset = function generateCSSRuleset(selector, /* : string */
declarations, /* : OrderedElements */
stringHandlers, /* : StringHandlers */
useImportant, /* : boolean */
selectorHandlers /* : SelectorHandler[] */
) /* : string */{
    // Mutates declarations
    runStringHandlers(declarations, stringHandlers, selectorHandlers);

    var originalElements = _extends({}, declarations.elements);

    // NOTE(emily): This mutates handledDeclarations.elements.
    var prefixedElements = prefixAll(declarations.elements);

    var elementNames = Object.keys(prefixedElements);
    if (elementNames.length !== declarations.keyOrder.length) {
        // There are some prefixed values, so we need to figure out how to sort
        // them.
        //
        // Loop through prefixedElements, looking for anything that is not in
        // sortOrder, which means it was added by prefixAll. This means that we
        // need to figure out where it should appear in the sortOrder.
        for (var i = 0; i < elementNames.length; i++) {
            if (!originalElements.hasOwnProperty(elementNames[i])) {
                // This element is not in the sortOrder, which means it is a prefixed
                // value that was added by prefixAll. Let's try to figure out where it
                // goes.
                var originalStyle = undefined;
                if (elementNames[i][0] === 'W') {
                    // This is a Webkit-prefixed style, like "WebkitTransition". Let's
                    // find its original style's sort order.
                    originalStyle = elementNames[i][6].toLowerCase() + elementNames[i].slice(7);
                } else if (elementNames[i][1] === 'o') {
                    // This is a Moz-prefixed style, like "MozTransition". We check
                    // the second character to avoid colliding with Ms-prefixed
                    // styles. Let's find its original style's sort order.
                    originalStyle = elementNames[i][3].toLowerCase() + elementNames[i].slice(4);
                } else {
                    // if (elementNames[i][1] === 's') {
                    // This is a Ms-prefixed style, like "MsTransition".
                    originalStyle = elementNames[i][2].toLowerCase() + elementNames[i].slice(3);
                }

                if (originalStyle && originalElements.hasOwnProperty(originalStyle)) {
                    var originalIndex = declarations.keyOrder.indexOf(originalStyle);
                    declarations.keyOrder.splice(originalIndex, 0, elementNames[i]);
                } else {
                    // We don't know what the original style was, so sort it to
                    // top. This can happen for styles that are added that don't
                    // have the same base name as the original style.
                    declarations.keyOrder.unshift(elementNames[i]);
                }
            }
        }
    }

    var transformValue = useImportant === false ? _util.stringifyValue : _util.stringifyAndImportantifyValue;

    var rules = [];
    for (var i = 0; i < declarations.keyOrder.length; i++) {
        var key = declarations.keyOrder[i];
        var value = prefixedElements[key];
        if (Array.isArray(value)) {
            // inline-style-prefixer returns an array when there should be
            // multiple rules for the same key. Here we flatten to multiple
            // pairs with the same key.
            for (var j = 0; j < value.length; j++) {
                rules.push(transformRule(key, value[j], transformValue));
            }
        } else {
            rules.push(transformRule(key, value, transformValue));
        }
    }

    if (rules.length) {
        return selector + '{' + rules.join("") + '}';
    } else {
        return "";
    }
};
exports.generateCSSRuleset = generateCSSRuleset;
},{"../lib/staticPrefixData":8,"./ordered-elements":7,"./util":9,"inline-style-prefixer/static/createPrefixer":39}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _generate = require('./generate');

var _exports2 = require('./exports');

var _exports3 = _interopRequireDefault(_exports2);

var useImportant = true; // Add !important to all style definitions
exports['default'] = (0, _exports3['default'])(useImportant, _generate.defaultSelectorHandlers);
module.exports = exports['default'];
},{"./exports":3,"./generate":4}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _asap = require('asap');

var _asap2 = _interopRequireDefault(_asap);

var _orderedElements = require('./ordered-elements');

var _orderedElements2 = _interopRequireDefault(_orderedElements);

var _generate = require('./generate');

var _util = require('./util');

/* ::
import type { SheetDefinition, SheetDefinitions } from './index.js';
import type { MaybeSheetDefinition } from './exports.js';
import type { SelectorHandler } from './generate.js';
type ProcessedStyleDefinitions = {
  classNameBits: Array<string>,
  definitionBits: Array<Object>,
};
*/

// The current <style> tag we are inserting into, or null if we haven't
// inserted anything yet. We could find this each time using
// `document.querySelector("style[data-aphrodite"])`, but holding onto it is
// faster.
var styleTag = null;

// Inject a string of styles into a <style> tag in the head of the document. This
// will automatically create a style tag and then continue to use it for
// multiple injections. It will also use a style tag with the `data-aphrodite`
// tag on it if that exists in the DOM. This could be used for e.g. reusing the
// same style tag that server-side rendering inserts.
var injectStyleTag = function injectStyleTag(cssContents /* : string */) {
    if (styleTag == null) {
        // Try to find a style tag with the `data-aphrodite` attribute first.
        styleTag = document.querySelector("style[data-aphrodite]");

        // If that doesn't work, generate a new style tag.
        if (styleTag == null) {
            // Taken from
            // http://stackoverflow.com/questions/524696/how-to-create-a-style-tag-with-javascript
            var head = document.head || document.getElementsByTagName('head')[0];
            styleTag = document.createElement('style');

            styleTag.type = 'text/css';
            styleTag.setAttribute("data-aphrodite", "");
            head.appendChild(styleTag);
        }
    }

    if (styleTag.styleSheet) {
        // $FlowFixMe: legacy Internet Explorer compatibility
        styleTag.styleSheet.cssText += cssContents;
    } else {
        styleTag.appendChild(document.createTextNode(cssContents));
    }
};

// Custom handlers for stringifying CSS values that have side effects
// (such as fontFamily, which can cause @font-face rules to be injected)
var stringHandlers = {
    // With fontFamily we look for objects that are passed in and interpret
    // them as @font-face rules that we need to inject. The value of fontFamily
    // can either be a string (as normal), an object (a single font face), or
    // an array of objects and strings.
    fontFamily: function fontFamily(val) {
        if (Array.isArray(val)) {
            return val.map(fontFamily).join(",");
        } else if (typeof val === "object") {
            injectStyleOnce(val.src, "@font-face", [val], false);
            return '"' + val.fontFamily + '"';
        } else {
            return val;
        }
    },

    // With animationName we look for an object that contains keyframes and
    // inject them as an `@keyframes` block, returning a uniquely generated
    // name. The keyframes object should look like
    //  animationName: {
    //    from: {
    //      left: 0,
    //      top: 0,
    //    },
    //    '50%': {
    //      left: 15,
    //      top: 5,
    //    },
    //    to: {
    //      left: 20,
    //      top: 20,
    //    }
    //  }
    // TODO(emily): `stringHandlers` doesn't let us rename the key, so I have
    // to use `animationName` here. Improve that so we can call this
    // `animation` instead of `animationName`.
    animationName: function animationName(val, selectorHandlers) {
        if (Array.isArray(val)) {
            return val.map(function (v) {
                return animationName(v, selectorHandlers);
            }).join(",");
        } else if (typeof val === "object") {
            // Generate a unique name based on the hash of the object. We can't
            // just use the hash because the name can't start with a number.
            // TODO(emily): this probably makes debugging hard, allow a custom
            // name?
            var _name = 'keyframe_' + (0, _util.hashObject)(val);

            // Since keyframes need 3 layers of nesting, we use `generateCSS` to
            // build the inner layers and wrap it in `@keyframes` ourselves.
            var finalVal = '@keyframes ' + _name + '{';

            // TODO see if we can find a way where checking for OrderedElements
            // here is not necessary. Alternatively, perhaps we should have a
            // utility method that can iterate over either a plain object, an
            // instance of OrderedElements, or a Map, and then use that here and
            // elsewhere.
            if (val instanceof _orderedElements2['default']) {
                val.forEach(function (valVal, valKey) {
                    finalVal += (0, _generate.generateCSS)(valKey, [valVal], selectorHandlers, stringHandlers, false);
                });
            } else {
                Object.keys(val).forEach(function (key) {
                    finalVal += (0, _generate.generateCSS)(key, [val[key]], selectorHandlers, stringHandlers, false);
                });
            }
            finalVal += '}';

            injectGeneratedCSSOnce(_name, finalVal);

            return _name;
        } else {
            return val;
        }
    }
};

// This is a map from Aphrodite's generated class names to `true` (acting as a
// set of class names)
var alreadyInjected = {};

// This is the buffer of styles which have not yet been flushed.
var injectionBuffer = "";

// A flag to tell if we are already buffering styles. This could happen either
// because we scheduled a flush call already, so newly added styles will
// already be flushed, or because we are statically buffering on the server.
var isBuffering = false;

var injectGeneratedCSSOnce = function injectGeneratedCSSOnce(key, generatedCSS) {
    if (alreadyInjected[key]) {
        return;
    }

    if (!isBuffering) {
        // We should never be automatically buffering on the server (or any
        // place without a document), so guard against that.
        if (typeof document === "undefined") {
            throw new Error("Cannot automatically buffer without a document");
        }

        // If we're not already buffering, schedule a call to flush the
        // current styles.
        isBuffering = true;
        (0, _asap2['default'])(flushToStyleTag);
    }

    injectionBuffer += generatedCSS;
    alreadyInjected[key] = true;
};

var injectStyleOnce = function injectStyleOnce(key, /* : string */
selector, /* : string */
definitions, /* : SheetDefinition[] */
useImportant /* : boolean */
) {
    var selectorHandlers /* : SelectorHandler[] */ = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];

    if (alreadyInjected[key]) {
        return;
    }

    var generated = (0, _generate.generateCSS)(selector, definitions, selectorHandlers, stringHandlers, useImportant);

    injectGeneratedCSSOnce(key, generated);
};

exports.injectStyleOnce = injectStyleOnce;
var reset = function reset() {
    injectionBuffer = "";
    alreadyInjected = {};
    isBuffering = false;
    styleTag = null;
};

exports.reset = reset;
var startBuffering = function startBuffering() {
    if (isBuffering) {
        throw new Error("Cannot buffer while already buffering");
    }
    isBuffering = true;
};

exports.startBuffering = startBuffering;
var flushToString = function flushToString() {
    isBuffering = false;
    var ret = injectionBuffer;
    injectionBuffer = "";
    return ret;
};

exports.flushToString = flushToString;
var flushToStyleTag = function flushToStyleTag() {
    var cssContent = flushToString();
    if (cssContent.length > 0) {
        injectStyleTag(cssContent);
    }
};

exports.flushToStyleTag = flushToStyleTag;
var getRenderedClassNames = function getRenderedClassNames() {
    return Object.keys(alreadyInjected);
};

exports.getRenderedClassNames = getRenderedClassNames;
var addRenderedClassNames = function addRenderedClassNames(classNames /* : string[] */) {
    classNames.forEach(function (className) {
        alreadyInjected[className] = true;
    });
};

exports.addRenderedClassNames = addRenderedClassNames;
var processStyleDefinitions = function processStyleDefinitions(styleDefinitions, /* : any[] */
result /* : ProcessedStyleDefinitions */
) /* : void */{
    for (var i = 0; i < styleDefinitions.length; i += 1) {
        // Filter out falsy values from the input, to allow for
        // `css(a, test && c)`
        if (styleDefinitions[i]) {
            if (Array.isArray(styleDefinitions[i])) {
                // We've encountered an array, so let's recurse
                processStyleDefinitions(styleDefinitions[i], result);
            } else {
                result.classNameBits.push(styleDefinitions[i]._name);
                result.definitionBits.push(styleDefinitions[i]._definition);
            }
        }
    }
};

/**
 * Inject styles associated with the passed style definition objects, and return
 * an associated CSS class name.
 *
 * @param {boolean} useImportant If true, will append !important to generated
 *     CSS output. e.g. {color: red} -> "color: red !important".
 * @param {(Object|Object[])[]} styleDefinitions style definition objects, or
 *     arbitrarily nested arrays of them, as returned as properties of the
 *     return value of StyleSheet.create().
 */
var injectAndGetClassName = function injectAndGetClassName(useImportant, /* : boolean */
styleDefinitions, /* : MaybeSheetDefinition[] */
selectorHandlers /* : SelectorHandler[] */
) /* : string */{
    var processedStyleDefinitions /* : ProcessedStyleDefinitions */ = {
        classNameBits: [],
        definitionBits: []
    };
    // Mutates processedStyleDefinitions
    processStyleDefinitions(styleDefinitions, processedStyleDefinitions);

    // Break if there aren't any valid styles.
    if (processedStyleDefinitions.classNameBits.length === 0) {
        return "";
    }
    var className = processedStyleDefinitions.classNameBits.join("-o_O-");

    injectStyleOnce(className, '.' + className, processedStyleDefinitions.definitionBits, useImportant, selectorHandlers);

    return className;
};
exports.injectAndGetClassName = injectAndGetClassName;
},{"./generate":4,"./ordered-elements":7,"./util":9,"asap":10}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var MAP_EXISTS = typeof Map !== 'undefined';

var OrderedElements = (function () {
    /* ::
    elements: {[string]: any};
    keyOrder: string[];
    */

    function OrderedElements() {
        _classCallCheck(this, OrderedElements);

        this.elements = {};
        this.keyOrder = [];
    }

    _createClass(OrderedElements, [{
        key: 'forEach',
        value: function forEach(callback /* : (string, any) => void */) {
            for (var i = 0; i < this.keyOrder.length; i++) {
                // (value, key) to match Map's API
                callback(this.elements[this.keyOrder[i]], this.keyOrder[i]);
            }
        }
    }, {
        key: 'set',
        value: function set(key, /* : string */value /* : any */) {
            var _this = this;

            if (!this.elements.hasOwnProperty(key)) {
                this.keyOrder.push(key);
            }

            if (value == null) {
                this.elements[key] = value;
                return;
            }

            if (MAP_EXISTS && value instanceof Map || value instanceof OrderedElements) {
                var _ret = (function () {
                    // We have found a nested Map, so we need to recurse so that all
                    // of the nested objects and Maps are merged properly.
                    var nested = _this.elements.hasOwnProperty(key) ? _this.elements[key] : new OrderedElements();
                    value.forEach(function (value, key) {
                        nested.set(key, value);
                    });
                    _this.elements[key] = nested;
                    return {
                        v: undefined
                    };
                })();

                if (typeof _ret === 'object') return _ret.v;
            }

            if (!Array.isArray(value) && typeof value === 'object') {
                // We have found a nested object, so we need to recurse so that all
                // of the nested objects and Maps are merged properly.
                var nested = this.elements.hasOwnProperty(key) ? this.elements[key] : new OrderedElements();
                var keys = Object.keys(value);
                for (var i = 0; i < keys.length; i += 1) {
                    nested.set(keys[i], value[keys[i]]);
                }
                this.elements[key] = nested;
                return;
            }

            this.elements[key] = value;
        }
    }, {
        key: 'get',
        value: function get(key /* : string */) /* : any */{
            return this.elements[key];
        }
    }, {
        key: 'has',
        value: function has(key /* : string */) /* : boolean */{
            return this.elements.hasOwnProperty(key);
        }
    }, {
        key: 'addStyleType',
        value: function addStyleType(styleType /* : any */) /* : void */{
            var _this2 = this;

            if (MAP_EXISTS && styleType instanceof Map || styleType instanceof OrderedElements) {
                styleType.forEach(function (value, key) {
                    _this2.set(key, value);
                });
            } else {
                var keys = Object.keys(styleType);
                for (var i = 0; i < keys.length; i++) {
                    this.set(keys[i], styleType[keys[i]]);
                }
            }
        }
    }]);

    return OrderedElements;
})();

exports['default'] = OrderedElements;
module.exports = exports['default'];
},{}],8:[function(require,module,exports){
var calc = require('inline-style-prefixer/static/plugins/calc')
var crossFade = require('inline-style-prefixer/static/plugins/crossFade')
var cursor = require('inline-style-prefixer/static/plugins/cursor')
var filter = require('inline-style-prefixer/static/plugins/filter')
var flex = require('inline-style-prefixer/static/plugins/flex')
var flexboxIE = require('inline-style-prefixer/static/plugins/flexboxIE')
var flexboxOld = require('inline-style-prefixer/static/plugins/flexboxOld')
var gradient = require('inline-style-prefixer/static/plugins/gradient')
var imageSet = require('inline-style-prefixer/static/plugins/imageSet')
var position = require('inline-style-prefixer/static/plugins/position')
var sizing = require('inline-style-prefixer/static/plugins/sizing')
var transition = require('inline-style-prefixer/static/plugins/transition')

module.exports =  {
  plugins: [calc,crossFade,cursor,filter,flex,flexboxIE,flexboxOld,gradient,imageSet,position,sizing,transition],
  prefixMap: {"transform":["Webkit","ms"],"transformOrigin":["Webkit","ms"],"transformOriginX":["Webkit","ms"],"transformOriginY":["Webkit","ms"],"backfaceVisibility":["Webkit"],"perspective":["Webkit"],"perspectiveOrigin":["Webkit"],"transformStyle":["Webkit"],"transformOriginZ":["Webkit"],"animation":["Webkit"],"animationDelay":["Webkit"],"animationDirection":["Webkit"],"animationFillMode":["Webkit"],"animationDuration":["Webkit"],"animationIterationCount":["Webkit"],"animationName":["Webkit"],"animationPlayState":["Webkit"],"animationTimingFunction":["Webkit"],"appearance":["Webkit","Moz"],"userSelect":["Webkit","Moz","ms"],"fontKerning":["Webkit"],"textEmphasisPosition":["Webkit"],"textEmphasis":["Webkit"],"textEmphasisStyle":["Webkit"],"textEmphasisColor":["Webkit"],"boxDecorationBreak":["Webkit"],"clipPath":["Webkit"],"maskImage":["Webkit"],"maskMode":["Webkit"],"maskRepeat":["Webkit"],"maskPosition":["Webkit"],"maskClip":["Webkit"],"maskOrigin":["Webkit"],"maskSize":["Webkit"],"maskComposite":["Webkit"],"mask":["Webkit"],"maskBorderSource":["Webkit"],"maskBorderMode":["Webkit"],"maskBorderSlice":["Webkit"],"maskBorderWidth":["Webkit"],"maskBorderOutset":["Webkit"],"maskBorderRepeat":["Webkit"],"maskBorder":["Webkit"],"maskType":["Webkit"],"textDecorationStyle":["Webkit","Moz"],"textDecorationSkip":["Webkit","Moz"],"textDecorationLine":["Webkit","Moz"],"textDecorationColor":["Webkit","Moz"],"filter":["Webkit"],"fontFeatureSettings":["Webkit","Moz"],"breakAfter":["Webkit","Moz","ms"],"breakBefore":["Webkit","Moz","ms"],"breakInside":["Webkit","Moz","ms"],"columnCount":["Webkit","Moz"],"columnFill":["Webkit","Moz"],"columnGap":["Webkit","Moz"],"columnRule":["Webkit","Moz"],"columnRuleColor":["Webkit","Moz"],"columnRuleStyle":["Webkit","Moz"],"columnRuleWidth":["Webkit","Moz"],"columns":["Webkit","Moz"],"columnSpan":["Webkit","Moz"],"columnWidth":["Webkit","Moz"],"flex":["Webkit","ms"],"flexBasis":["Webkit"],"flexDirection":["Webkit","ms"],"flexGrow":["Webkit"],"flexFlow":["Webkit","ms"],"flexShrink":["Webkit"],"flexWrap":["Webkit","ms"],"alignContent":["Webkit"],"alignItems":["Webkit"],"alignSelf":["Webkit"],"justifyContent":["Webkit"],"order":["Webkit"],"transitionDelay":["Webkit"],"transitionDuration":["Webkit"],"transitionProperty":["Webkit"],"transitionTimingFunction":["Webkit"],"backdropFilter":["Webkit"],"scrollSnapType":["Webkit","ms"],"scrollSnapPointsX":["Webkit","ms"],"scrollSnapPointsY":["Webkit","ms"],"scrollSnapDestination":["Webkit","ms"],"scrollSnapCoordinate":["Webkit","ms"],"shapeImageThreshold":["Webkit"],"shapeImageMargin":["Webkit"],"shapeImageOutside":["Webkit"],"hyphens":["Webkit","Moz","ms"],"flowInto":["Webkit","ms"],"flowFrom":["Webkit","ms"],"regionFragment":["Webkit","ms"],"boxSizing":["Moz"],"textAlignLast":["Moz"],"tabSize":["Moz"],"wrapFlow":["ms"],"wrapThrough":["ms"],"wrapMargin":["ms"],"touchAction":["ms"],"gridTemplateColumns":["ms"],"gridTemplateRows":["ms"],"gridTemplateAreas":["ms"],"gridTemplate":["ms"],"gridAutoColumns":["ms"],"gridAutoRows":["ms"],"gridAutoFlow":["ms"],"grid":["ms"],"gridRowStart":["ms"],"gridColumnStart":["ms"],"gridRowEnd":["ms"],"gridRow":["ms"],"gridColumn":["ms"],"gridColumnEnd":["ms"],"gridColumnGap":["ms"],"gridRowGap":["ms"],"gridArea":["ms"],"gridGap":["ms"],"textSizeAdjust":["Webkit","ms"],"borderImage":["Webkit"],"borderImageOutset":["Webkit"],"borderImageRepeat":["Webkit"],"borderImageSlice":["Webkit"],"borderImageSource":["Webkit"],"borderImageWidth":["Webkit"]}
}
},{"inline-style-prefixer/static/plugins/calc":40,"inline-style-prefixer/static/plugins/crossFade":41,"inline-style-prefixer/static/plugins/cursor":42,"inline-style-prefixer/static/plugins/filter":43,"inline-style-prefixer/static/plugins/flex":44,"inline-style-prefixer/static/plugins/flexboxIE":45,"inline-style-prefixer/static/plugins/flexboxOld":46,"inline-style-prefixer/static/plugins/gradient":47,"inline-style-prefixer/static/plugins/imageSet":48,"inline-style-prefixer/static/plugins/position":49,"inline-style-prefixer/static/plugins/sizing":50,"inline-style-prefixer/static/plugins/transition":51}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _stringHash = require('string-hash');

var _stringHash2 = _interopRequireDefault(_stringHash);

/* ::
type Pair = [ string, any ];
type Pairs = Pair[];
type PairsMapper = (pair: Pair) => Pair;
type ObjectMap = { [id:string]: any };
*/

var mapObj = function mapObj(obj, /* : ObjectMap */
fn /* : PairsMapper */
) /* : ObjectMap */{
    var keys = Object.keys(obj);
    var mappedObj = {};
    for (var i = 0; i < keys.length; i += 1) {
        var _fn = fn([keys[i], obj[keys[i]]]);

        var _fn2 = _slicedToArray(_fn, 2);

        var newKey = _fn2[0];
        var newValue = _fn2[1];

        mappedObj[newKey] = newValue;
    }
    return mappedObj;
};

exports.mapObj = mapObj;
var UPPERCASE_RE = /([A-Z])/g;
var UPPERCASE_RE_TO_KEBAB = function UPPERCASE_RE_TO_KEBAB(match /* : string */) {
    return (/* : string */'-' + match.toLowerCase()
    );
};

var kebabifyStyleName = function kebabifyStyleName(string /* : string */) /* : string */{
    var result = string.replace(UPPERCASE_RE, UPPERCASE_RE_TO_KEBAB);
    if (result[0] === 'm' && result[1] === 's' && result[2] === '-') {
        return '-' + result;
    }
    return result;
};

exports.kebabifyStyleName = kebabifyStyleName;
/**
 * CSS properties which accept numbers but are not in units of "px".
 * Taken from React's CSSProperty.js
 */
var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridColumn: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,

    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
};

/**
 * Taken from React's CSSProperty.js
 *
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 * Taken from React's CSSProperty.js
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
// Taken from React's CSSProperty.js
Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
});

var stringifyValue = function stringifyValue(key, /* : string */
prop /* : any */
) /* : string */{
    if (typeof prop === "number") {
        if (isUnitlessNumber[key]) {
            return "" + prop;
        } else {
            return prop + "px";
        }
    } else {
        return '' + prop;
    }
};

exports.stringifyValue = stringifyValue;
var stringifyAndImportantifyValue = function stringifyAndImportantifyValue(key, /* : string */
prop /* : any */
) {
    return (/* : string */importantify(stringifyValue(key, prop))
    );
};

exports.stringifyAndImportantifyValue = stringifyAndImportantifyValue;
// Hash a javascript object using JSON.stringify. This is very fast, about 3
// microseconds on my computer for a sample object:
// http://jsperf.com/test-hashfnv32a-hash/5
//
// Note that this uses JSON.stringify to stringify the objects so in order for
// this to produce consistent hashes browsers need to have a consistent
// ordering of objects. Ben Alpert says that Facebook depends on this, so we
// can probably depend on this too.
var hashObject = function hashObject(object /* : ObjectMap */) {
    return (/* : string */(0, _stringHash2['default'])(JSON.stringify(object)).toString(36)
    );
};

exports.hashObject = hashObject;
// Given a single style value string like the "b" from "a: b;", adds !important
// to generate "b !important".
var importantify = function importantify(string /* : string */) {
    return (/* : string */
        // Bracket string character access is very fast, and in the default case we
        // normally don't expect there to be "!important" at the end of the string
        // so we can use this simple check to take an optimized path. If there
        // happens to be a "!" in this position, we follow up with a more thorough
        // check.
        string[string.length - 10] === '!' && string.slice(-11) === ' !important' ? string : string + ' !important'
    );
};
},{"string-hash":247}],10:[function(require,module,exports){
"use strict";

// rawAsap provides everything we need except exception management.
var rawAsap = require("./raw");
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

},{"./raw":11}],11:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

/* globals self */
var scope = typeof global !== "undefined" ? global : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],12:[function(require,module,exports){
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(null, arg));
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hyphenateProperty;

var _hyphenateStyleName = require('hyphenate-style-name');

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hyphenateProperty(property) {
  return (0, _hyphenateStyleName2.default)(property);
}
module.exports = exports['default'];
},{"hyphenate-style-name":38}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPrefixedValue;

var regex = /-webkit-|-moz-|-ms-/;

function isPrefixedValue(value) {
  return typeof value === 'string' && regex.test(value);
}
module.exports = exports['default'];
},{}],15:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
}).call(this,require('_process'))
},{"./emptyFunction":22,"_process":58}],16:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],17:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],18:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":17}],19:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"./isTextNode":32}],20:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
}).call(this,require('_process'))
},{"./invariant":30,"_process":58}],21:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":16,"./createArrayFromMixed":20,"./getMarkupWrap":26,"./invariant":30,"_process":58}],22:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],23:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))
},{"_process":58}],24:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],25:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
},{}],26:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":16,"./invariant":30,"_process":58}],27:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],28:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],29:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":28}],30:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":58}],31:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],32:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":31}],33:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],34:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":16}],35:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":34}],36:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],37:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":22,"_process":58}],38:[function(require,module,exports){
'use strict';

var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function hyphenateStyleName(string) {
    return string in cache
    ? cache[string]
    : cache[string] = string
      .replace(uppercasePattern, '-$&')
      .toLowerCase()
      .replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

},{}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPrefixer;

var _prefixProperty = require('../utils/prefixProperty');

var _prefixProperty2 = _interopRequireDefault(_prefixProperty);

var _prefixValue = require('../utils/prefixValue');

var _prefixValue2 = _interopRequireDefault(_prefixValue);

var _addNewValuesOnly = require('../utils/addNewValuesOnly');

var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);

var _isObject = require('../utils/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createPrefixer(_ref) {
  var prefixMap = _ref.prefixMap,
      plugins = _ref.plugins;

  function prefixAll(style) {
    for (var property in style) {
      var value = style[property];

      // handle nested objects
      if ((0, _isObject2.default)(value)) {
        style[property] = prefixAll(value);
        // handle array values
      } else if (Array.isArray(value)) {
        var combinedValue = [];

        for (var i = 0, len = value.length; i < len; ++i) {
          var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, prefixMap);
          (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
        }

        // only modify the value if it was touched
        // by any plugin to prevent unnecessary mutations
        if (combinedValue.length > 0) {
          style[property] = combinedValue;
        }
      } else {
        var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);

        // only modify the value if it was touched
        // by any plugin to prevent unnecessary mutations
        if (_processedValue) {
          style[property] = _processedValue;
        }

        (0, _prefixProperty2.default)(prefixMap, property, style);
      }
    }

    return style;
  }

  return prefixAll;
}
module.exports = exports['default'];
},{"../utils/addNewValuesOnly":52,"../utils/isObject":54,"../utils/prefixProperty":55,"../utils/prefixValue":56}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calc;

var _isPrefixedValue = require('css-in-js-utils/lib/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ['-webkit-', '-moz-', ''];
function calc(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/calc\(/g, prefix + 'calc(');
    });
  }
}
module.exports = exports['default'];
},{"css-in-js-utils/lib/isPrefixedValue":14}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crossFade;

var _isPrefixedValue = require('css-in-js-utils/lib/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#search=cross-fade
var prefixes = ['-webkit-', ''];
function crossFade(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('cross-fade(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/cross-fade\(/g, prefix + 'cross-fade(');
    });
  }
}
module.exports = exports['default'];
},{"css-in-js-utils/lib/isPrefixedValue":14}],42:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cursor;
var prefixes = ['-webkit-', '-moz-', ''];

var values = {
  'zoom-in': true,
  'zoom-out': true,
  grab: true,
  grabbing: true
};

function cursor(property, value) {
  if (property === 'cursor' && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];
},{}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filter;

var _isPrefixedValue = require('css-in-js-utils/lib/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-filter-function
var prefixes = ['-webkit-', ''];
function filter(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('filter(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/filter\(/g, prefix + 'filter(');
    });
  }
}
module.exports = exports['default'];
},{"css-in-js-utils/lib/isPrefixedValue":14}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;
var values = {
  flex: true,
  'inline-flex': true
};

function flex(property, value) {
  if (property === 'display' && values.hasOwnProperty(value)) {
    return ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value];
  }
}
module.exports = exports['default'];
},{}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxIE;
var alternativeValues = {
  'space-around': 'distribute',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end'
};
var alternativeProps = {
  alignContent: 'msFlexLinePack',
  alignSelf: 'msFlexItemAlign',
  alignItems: 'msFlexAlign',
  justifyContent: 'msFlexPack',
  order: 'msFlexOrder',
  flexGrow: 'msFlexPositive',
  flexShrink: 'msFlexNegative',
  flexBasis: 'msPreferredSize'
};

function flexboxIE(property, value, style) {
  if (alternativeProps.hasOwnProperty(property)) {
    style[alternativeProps[property]] = alternativeValues[value] || value;
  }
}
module.exports = exports['default'];
},{}],46:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;
var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

function flexboxOld(property, value, style) {
  if (property === 'flexDirection' && typeof value === 'string') {
    if (value.indexOf('column') > -1) {
      style.WebkitBoxOrient = 'vertical';
    } else {
      style.WebkitBoxOrient = 'horizontal';
    }
    if (value.indexOf('reverse') > -1) {
      style.WebkitBoxDirection = 'reverse';
    } else {
      style.WebkitBoxDirection = 'normal';
    }
  }
  if (alternativeProps.hasOwnProperty(property)) {
    style[alternativeProps[property]] = alternativeValues[value] || value;
  }
}
module.exports = exports['default'];
},{}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _isPrefixedValue = require('css-in-js-utils/lib/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ['-webkit-', '-moz-', ''];

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];
},{"css-in-js-utils/lib/isPrefixedValue":14}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imageSet;

var _isPrefixedValue = require('css-in-js-utils/lib/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-image-set
var prefixes = ['-webkit-', ''];
function imageSet(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('image-set(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/image-set\(/g, prefix + 'image-set(');
    });
  }
}
module.exports = exports['default'];
},{"css-in-js-utils/lib/isPrefixedValue":14}],49:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;
function position(property, value) {
  if (property === 'position' && value === 'sticky') {
    return ['-webkit-sticky', 'sticky'];
  }
}
module.exports = exports['default'];
},{}],50:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;
var prefixes = ['-webkit-', '-moz-', ''];

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(property, value) {
  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];
},{}],51:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transition;

var _hyphenateProperty = require('css-in-js-utils/lib/hyphenateProperty');

var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);

var _isPrefixedValue = require('css-in-js-utils/lib/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

var _capitalizeString = require('../../utils/capitalizeString');

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var properties = {
  transition: true,
  transitionProperty: true,
  WebkitTransition: true,
  WebkitTransitionProperty: true,
  MozTransition: true,
  MozTransitionProperty: true
};


var prefixMapping = {
  Webkit: '-webkit-',
  Moz: '-moz-',
  ms: '-ms-'
};

function prefixValue(value, propertyPrefixMap) {
  if ((0, _isPrefixedValue2.default)(value)) {
    return value;
  }

  // only split multi values, not cubic beziers
  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

  for (var i = 0, len = multipleValues.length; i < len; ++i) {
    var singleValue = multipleValues[i];
    var values = [singleValue];
    for (var property in propertyPrefixMap) {
      var dashCaseProperty = (0, _hyphenateProperty2.default)(property);

      if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
        var prefixes = propertyPrefixMap[property];
        for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
          // join all prefixes and create a new value
          values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
        }
      }
    }

    multipleValues[i] = values.join(',');
  }

  return multipleValues.join(',');
}

function transition(property, value, style, propertyPrefixMap) {
  // also check for already prefixed transitions
  if (typeof value === 'string' && properties.hasOwnProperty(property)) {
    var outputValue = prefixValue(value, propertyPrefixMap);
    // if the property is already prefixed
    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-moz-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Webkit') > -1) {
      return webkitOutput;
    }

    var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-webkit-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Moz') > -1) {
      return mozOutput;
    }

    style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;
    style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;
    return outputValue;
  }
}
module.exports = exports['default'];
},{"../../utils/capitalizeString":53,"css-in-js-utils/lib/hyphenateProperty":13,"css-in-js-utils/lib/isPrefixedValue":14}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addNewValuesOnly;
function addIfNew(list, value) {
  if (list.indexOf(value) === -1) {
    list.push(value);
  }
}

function addNewValuesOnly(list, values) {
  if (Array.isArray(values)) {
    for (var i = 0, len = values.length; i < len; ++i) {
      addIfNew(list, values[i]);
    }
  } else {
    addIfNew(list, values);
  }
}
module.exports = exports["default"];
},{}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = capitalizeString;
function capitalizeString(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
module.exports = exports["default"];
},{}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isObject;
function isObject(value) {
  return value instanceof Object && !Array.isArray(value);
}
module.exports = exports["default"];
},{}],55:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixProperty;

var _capitalizeString = require('./capitalizeString');

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function prefixProperty(prefixProperties, property, style) {
  if (prefixProperties.hasOwnProperty(property)) {
    var requiredPrefixes = prefixProperties[property];
    for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
      style[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];
    }
  }
}
module.exports = exports['default'];
},{"./capitalizeString":53}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixValue;
function prefixValue(plugins, property, value, style, metaData) {
  for (var i = 0, len = plugins.length; i < len; ++i) {
    var processedValue = plugins[i](property, value, style, metaData);

    // we can stop processing if a value is returned
    // as all plugin criteria are unique
    if (processedValue) {
      return processedValue;
    }
  }
}
module.exports = exports["default"];
},{}],57:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],58:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],59:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require('fbjs/lib/invariant');
  var warning = require('fbjs/lib/warning');
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":62,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],60:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = require('./factoryWithTypeCheckers');
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"./factoryWithTypeCheckers":61}],61:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":59,"./lib/ReactPropTypesSecret":62,"_process":58,"fbjs/lib/emptyFunction":22,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],62:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],63:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var React = require('react');

var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
  Symbol.for &&
  Symbol.for('react.element')) ||
  0xeac7;

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function(match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

function traverseAllChildrenImpl(
  children,
  nameSoFar,
  callback,
  traverseContext
) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (
    children === null ||
    type === 'string' ||
    type === 'number' ||
    // The following is inlined from ReactElement. This means we can optimize
    // some checks. React Fiber also inlines this logic for similar purposes.
    (type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE)
  ) {
    callback(
      traverseContext,
      children,
      // If it's the only child, treat the name as if it was wrapped in an array
      // so that it's consistent if the number of children grows.
      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar
    );
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(
        child,
        nextName,
        callback,
        traverseContext
      );
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      if (process.env.NODE_ENV !== "production") {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          warning(
            didWarnAboutMaps,
            'Using Maps as children is unsupported and will likely yield ' +
              'unexpected results. Convert it to a sequence/iterable of keyed ' +
              'ReactElements instead.'
          );
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(
          child,
          nextName,
          callback,
          traverseContext
        );
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== "production") {
        addendum = ' If you meant to render a collection of children, use an array ' +
          'instead or wrap the object using createFragment(object) from the ' +
          'React add-ons.';
      }
      var childrenString = '' + children;
      invariant(
        false,
        'Objects are not valid as a React child (found: %s).%s',
        childrenString === '[object Object]'
          ? 'object with keys {' + Object.keys(children).join(', ') + '}'
          : childrenString,
        addendum
      );
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

function cloneAndReplaceKey(oldElement, newKey) {
  return React.cloneElement(
    oldElement,
    { key: newKey },
    oldElement.props !== undefined
      ? oldElement.props.children
      : undefined
  );
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var oneArgumentPooler = function(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var addPoolingTo = function addPoolingTo(
  CopyConstructor,
  pooler
) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  invariant(
    instance instanceof Klass,
    'Trying to release an instance into a pool of a different type.'
  );
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function() {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(
      mappedChild,
      result,
      childKey,
      emptyFunction.thatReturnsArgument
    );
  } else if (mappedChild != null) {
    if (React.isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(
        mappedChild,
        // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        keyPrefix +
          (mappedChild.key && (!child || child.key !== mappedChild.key)
            ? escapeUserProvidedKey(mappedChild.key) + '/'
            : '') +
          childKey
      );
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(
    array,
    escapedPrefix,
    func,
    context
  );
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

var numericPropertyRegex = /^\d+$/;

var warnedAboutNumeric = false;

function createReactFragment(object) {
  if (typeof object !== 'object' || !object || Array.isArray(object)) {
    warning(
      false,
      'React.addons.createFragment only accepts a single object. Got: %s',
      object
    );
    return object;
  }
  if (React.isValidElement(object)) {
    warning(
      false,
      'React.addons.createFragment does not accept a ReactElement ' +
        'without a wrapper object.'
    );
    return object;
  }

  invariant(
    object.nodeType !== 1,
    'React.addons.createFragment(...): Encountered an invalid child; DOM ' +
      'elements are not valid children of React components.'
  );

  var result = [];

  for (var key in object) {
    if (process.env.NODE_ENV !== "production") {
      if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
        warning(
          false,
          'React.addons.createFragment(...): Child objects should have ' +
            'non-numeric keys so ordering is preserved.'
        );
        warnedAboutNumeric = true;
      }
    }
    mapIntoWithKeyPrefixInternal(
      object[key],
      result,
      key,
      emptyFunction.thatReturnsArgument
    );
  }

  return result;
}

module.exports = createReactFragment;

}).call(this,require('_process'))
},{"_process":58,"fbjs/lib/emptyFunction":22,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"react":246}],64:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var shallowEqual = require('fbjs/lib/shallowEqual');

module.exports = {
  shouldComponentUpdate: function(nextProps, nextState) {
    return (
      !shallowEqual(this.props, nextProps) ||
      !shallowEqual(this.state, nextState)
    );
  },
};

},{"fbjs/lib/shallowEqual":36}],65:[function(require,module,exports){
"use strict";

var React = require("react");

/* You know when you want to propagate input to a parent...
 * but then that parent does something with the input...
 * then changing the props of the input...
 * on every keystroke...
 * so if some input is invalid or incomplete...
 * the input gets reset or otherwise effed...
 *
 * This is the solution.
 *
 * Enough melodrama. Its an input that only sends changes
 * to its parent on blur.
 */
var BlurInput = React.createClass({
    displayName: "BlurInput",

    propTypes: {
        className: React.PropTypes.string,
        style: React.PropTypes.any,
        value: React.PropTypes.string.isRequired,
        onChange: React.PropTypes.func.isRequired
    },
    getInitialState: function getInitialState() {
        return { value: this.props.value };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ value: nextProps.value });
    },
    handleChange: function handleChange(e) {
        this.setState({ value: e.target.value });
    },
    handleBlur: function handleBlur(e) {
        this.props.onChange(e.target.value);
    },
    render: function render() {
        return React.createElement("input", {
            className: this.props.className,
            style: this.props.style,
            type: "text",
            value: this.state.value,
            onChange: this.handleChange,
            onBlur: this.handleBlur
        });
    }
});

module.exports = BlurInput;

},{"react":246}],66:[function(require,module,exports){
'use strict';

/* ButtonGroup is an aesthetically pleasing group of buttons.
 *
 * The class requires these properties:
 *   buttons - an array of objects with keys:
 *     "value": this is the value returned when the button is selected
 *     "content": this is the JSX shown within the button, typically a string
 *         that gets rendered as the button's display text
 *     "title": this is the title-text shown on hover
 *   onChange - a function that is provided with the updated value
 *     (which it then is responsible for updating)
 *
 * The class has these optional properties:
 *   value - the initial value of the button selected, defaults to null.
 *   allowEmpty - if false, exactly one button _must_ be selected; otherwise
 *     it defaults to true and _at most_ one button (0 or 1) may be selected.
 *
 * Requires stylesheets/perseus-admin-package/editor.less to look nice.
 */

var React = require('react');
var ReactDOM = require("react-dom");
var styles = require('./styles.js');
var css = require("aphrodite").css;

var ButtonGroup = React.createClass({
    displayName: 'ButtonGroup',

    propTypes: {
        value: React.PropTypes.any,
        buttons: React.PropTypes.arrayOf(React.PropTypes.shape({
            value: React.PropTypes.any.isRequired,
            content: React.PropTypes.node,
            title: React.PropTypes.string
        })).isRequired,
        onChange: React.PropTypes.func.isRequired,
        allowEmpty: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            value: null,
            allowEmpty: true
        };
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this).focus();
        return true;
    },

    toggleSelect: function toggleSelect(newValue) {
        var value = this.props.value;

        if (this.props.allowEmpty) {
            // Select the new button or unselect if it's already selected
            this.props.onChange(value !== newValue ? newValue : null);
        } else {
            this.props.onChange(newValue);
        }
    },

    render: function render() {
        var _this = this;

        var value = this.props.value;
        var buttons = this.props.buttons.map(function (button, i) {
            return React.createElement(
                'button',
                { title: button.title,
                    type: 'button',
                    id: "" + i,
                    ref: "button" + i,
                    key: "" + i,
                    className: css(styles.button.buttonStyle, button.value === value && styles.button.selectedStyle),
                    onClick: _this.toggleSelect.bind(_this, button.value)
                },
                button.content || "" + button.value
            );
        });

        var outerStyle = {
            display: 'inline-block'
        };
        return React.createElement(
            'div',
            { style: outerStyle },
            buttons
        );
    }
});

module.exports = ButtonGroup;

},{"./styles.js":70,"aphrodite":75,"react":246,"react-dom":95}],67:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* This component makes its children a drag target. Example:
 *
 *     <DragTarget onDrop={this.handleDrop}>Drag to me</DragTarget>
 *
 *     ...
 *
 *     handleDrop: function(e) {
 *         this.addImages(e.nativeEvent.dataTransfer.files);
 *     }
 *
 * Now "Drag to me" will be a drag target - when something is dragged over it,
 * the element will become partially transparent as a visual indicator that
 * it's a target.
 */
// TODO(joel) - indicate before the hover is over the target that it's possible
// to drag into the target. This would (I think) require a high level handler -
// like on Perseus itself, waiting for onDragEnter, then passing down the
// event. Sounds like a pain. Possible workaround - create a div covering the
// entire page...
//
// Other extensions:
// * custom styles for global drag and dragOver
// * only respond to certain types of drags (only images for instance)!

var React = require('react');

var DragTarget = React.createClass({
    displayName: "DragTarget",

    propTypes: {
        // All props not listed here are forwarded to the root element without
        // modification.
        onDrop: React.PropTypes.func.isRequired,
        component: React.PropTypes.any, // component type
        shouldDragHighlight: React.PropTypes.func,
        style: React.PropTypes.any
    },
    getDefaultProps: function getDefaultProps() {
        return {
            component: "div",
            shouldDragHighlight: function shouldDragHighlight() {
                return true;
            }
        };
    },
    getInitialState: function getInitialState() {
        return { dragHover: false };
    },
    handleDrop: function handleDrop(e) {
        e.stopPropagation();
        e.preventDefault();
        this.setState({ dragHover: false });
        this.props.onDrop(e);
    },
    handleDragEnd: function handleDragEnd() {
        this.setState({ dragHover: false });
    },
    handleDragOver: function handleDragOver(e) {
        e.preventDefault();
    },
    handleDragLeave: function handleDragLeave() {
        this.setState({ dragHover: false });
    },
    handleDragEnter: function handleDragEnter(e) {
        this.setState({ dragHover: this.props.shouldDragHighlight(e) });
    },
    render: function render() {
        var opacity = this.state.dragHover ? { "opacity": 0.3 } : {};
        var Component = this.props.component;

        return React.createElement(Component, _extends({}, this.props, {
            style: Object.assign({}, this.props.style, opacity),
            onDrop: this.handleDrop,
            onDragEnd: this.handleDragEnd,
            onDragOver: this.handleDragOver,
            onDragEnter: this.handleDragEnter,
            onDragLeave: this.handleDragLeave
        }));
    }
});

module.exports = DragTarget;

},{"react":246}],68:[function(require,module,exports){
'use strict';

var _require = require("aphrodite"),
    StyleSheet = _require.StyleSheet,
    css = _require.css;

var React = require('react');

var colors = {
    grayLight: '#aaa',
    basicBorderColor: '#ccc',
    white: '#fff'
};

var triangleBeforeAfter = {
    borderBottom: '9px solid transparent',
    borderTop: '9px solid transparent',
    content: '" "',
    height: '0',
    position: 'absolute',
    top: '0',
    width: '0'
};

var styles = StyleSheet.create({
    infoTip: {
        display: 'inline-block',
        marginLeft: '5px',
        position: 'relative'
    },

    infoTipContainer: {
        position: 'absolute',
        top: '-12px',
        left: '22px',
        zIndex: '1000'
    },

    infoTipTriangle: {
        height: '10px',
        left: '0',
        position: 'absolute',
        top: '8px',
        width: '0',
        zIndex: '1',

        ':before': Object.assign({}, triangleBeforeAfter, {
            borderRight: '9px solid #bbb',
            right: '0'
        }),

        ':after': Object.assign({}, triangleBeforeAfter, {
            borderRight: '9px solid ' + colors.white,
            right: '-1px'
        })
    },

    verticalShadow: {
        border: '1px solid ' + colors.basicBorderColor,
        boxShadow: '0 1px 3px ' + colors.basicBorderColor,
        borderBottom: '1px solid ' + colors.grayLight
    },

    infoTipContentContainer: {
        background: colors.white,
        padding: '5px 10px',
        width: '240px'
    }
});

var questionMark = 'data:image/png;base64,' + 'iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAGXRFWHRTb2Z0d2FyZQBB' + 'ZG9iZSBJbWFnZVJlYWR5ccllPAAAA3NpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/' + 'eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+' + 'IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2Jl' + 'IFhNUCBDb3JlIDUuNS1jMDIxIDc5LjE1NDkxMSwgMjAxMy8xMC8yOS0xMTo0NzoxNiAg' + 'ICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5' + 'LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9' + 'IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHht' + 'bG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3Vy' + 'Y2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHht' + 'cE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2N2M3NTAxYS04YmVlLTQ0M2Mt' + 'YmRiNS04OGM2N2IxN2NhYzEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6OUJCRTk4' + 'Qjc4NjAwMTFFMzg3QUJDNEI4Mzk2QTRGQkQiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5p' + 'aWQ6OUJCRTk4QjY4NjAwMTFFMzg3QUJDNEI4Mzk2QTRGQkQiIHhtcDpDcmVhdG9yVG9v' + 'bD0iQWRvYmUgUGhvdG9zaG9wIENDIChNYWNpbnRvc2gpIj4gPHhtcE1NOkRlcml2ZWRG' + 'cm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NGE5ZDI0OTMtODk1NC00OGFkLTlh' + 'MTgtZDAwM2MwYWNjNDJlIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjY3Yzc1MDFh' + 'LThiZWUtNDQzYy1iZGI1LTg4YzY3YjE3Y2FjMSIvPiA8L3JkZjpEZXNjcmlwdGlvbj4g' + 'PC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pqm89uYAAADM' + 'SURBVHjaXJA9DoJAEIUH1M4TUHIFsCMGen9OwCGw1YRGW2ntKel0exsojHIBC0ouQAyU' + 'viFDstmXfNmZeS+zm7XSNCXRFiRgJf0bXIHixpbhGdxBBJYC1w/xaA424MhNEATkui71' + 'fU9KqfEU78UbD9PdbJRlOdae55GmhIP+1NV1TcMwkOM41DSNHvRtMhTHMRVFQW3b6mOL' + 'gx99kue5GRp/gIOZuZGvNpTNwjD8oliANU+qqqKu6/TQBdymN57AHjzBT+B6Jx79BRgA' + 'vc49kQA4yxgAAAAASUVORK5CYII=';

var InfoTip = React.createClass({
    displayName: 'InfoTip',

    propTypes: {
        children: React.PropTypes.node
    },

    getInitialState: function getInitialState() {
        return {
            hover: false
        };
    },

    handleMouseEnter: function handleMouseEnter() {
        this.setState({ hover: true });
    },

    handleMouseLeave: function handleMouseLeave() {
        this.setState({ hover: false });
    },

    render: function render() {
        return React.createElement(
            'div',
            { className: css(styles.infoTip) },
            React.createElement('img', { width: 10,
                height: 10,
                src: questionMark,
                onMouseEnter: this.handleMouseEnter,
                onMouseLeave: this.handleMouseLeave
            }),
            React.createElement(
                'div',
                {
                    className: css(styles.infoTipContainer),
                    style: { display: this.state.hover ? 'block' : 'none' }
                },
                React.createElement('div', { className: css(styles.infoTipTriangle) }),
                React.createElement(
                    'div',
                    { className: css(styles.verticalShadow, styles.infoTipContentContainer)
                    },
                    this.props.children
                )
            )
        );
    }
});

module.exports = InfoTip;

},{"aphrodite":75,"react":246}],69:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * KaTeX A11y
 * A library for converting KaTeX math into readable strings.
 */

// NOTE(jeresig): We need to keep this file as pure ES5 to avoid import
// problems into webapp.
/* eslint-disable no-var */
/* global katex */

var stringMap = {
    "(": "left parenthesis",
    ")": "right parenthesis",
    "[": "open bracket",
    "]": "close bracket",
    "\\{": "left brace",
    "\\}": "right brace",
    "\\lvert": "open vertical bar",
    "\\rvert": "close vertical bar",
    "|": "vertical bar",
    "\\uparrow": "up arrow",
    "\\Uparrow": "up arrow",
    "\\downarrow": "down arrow",
    "\\Downarrow": "down arrow",
    "\\updownarrow": "up down arrow",
    "\\leftarrow": "left arrow",
    "\\Leftarrow": "left arrow",
    "\\rightarrow": "right arrow",
    "\\Rightarrow": "right arrow",
    "\\langle": "open angle",
    "\\rangle": "close angle",
    "\\lfloor": "open floor",
    "\\rfloor": "close floor",
    "\\int": "integral",
    "\\intop": "integral",
    "\\lim": "limit",
    "\\ln": "natural log",
    "\\log": "log",
    "\\sin": "sine",
    "\\cos": "cosine",
    "\\tan": "tangent",
    "\\cot": "cotangent",
    "\\sum": "sum",
    "/": "slash",
    ",": "comma",
    ".": "point",
    "-": "negative",
    "+": "plus",
    "~": "tilde",
    ":": "colon",
    "?": "question mark",
    "'": "apostrophe",
    "\\%": "percent",
    " ": "space",
    "\\ ": "space",
    "\\$": "dollar sign",
    "\\angle": "angle",
    "\\degree": "degree",
    "\\circ": "circle",
    "\\vec": "vector",
    "\\triangle": "triangle",
    "\\pi": "pi",
    "\\prime": "prime",
    "\\infty": "infinity",
    "\\alpha": "alpha",
    "\\beta": "beta",
    "\\gamma": "gamma",
    "\\omega": "omega",
    "\\theta": "theta",
    "\\sigma": "sigma",
    "\\lambda": "lambda",
    "\\tau": "tau",
    "\\Delta": "delta",
    "\\delta": "delta",
    "\\mu": "mu",
    "\\rho": "rho",
    "\\nabla": "del",
    "\\ell": "ell",
    "\\ldots": "dots"
};

var powerMap = {
    "\\prime": "prime",
    "\\degree": "degree",
    "\\circ": "degree"
};

var openMap = {
    "|": "open vertical bar",
    ".": ""
};

var closeMap = {
    "|": "close vertical bar",
    ".": ""
};

var binMap = {
    "+": "plus",
    "-": "minus",
    "\\pm": "plus minus",
    "\\cdot": "dot",
    "*": "times",
    "/": "divided by",
    "\\times": "times",
    "\\div": "divided by",
    "\\circ": "circle",
    "\\bullet": "bullet"
};

var relMap = {
    "=": "equals",
    "\\approx": "approximately equals",
    "\\neq": "does not equal",
    "\\ne": "does not equal",
    "\\geq": "is greater than or equal to",
    "\\ge": "is greater than or equal to",
    "\\leq": "is less than or equal to",
    "\\le": "is less than or equal to",
    ">": "is greater than",
    "<": "is less than",
    "\\leftarrow": "left arrow",
    "\\Leftarrow": "left arrow",
    "\\rightarrow": "right arrow",
    "\\Rightarrow": "right arrow",
    ":": "colon"
};

var buildString = function buildString(str, type, a11yStrings) {
    if (!str) {
        return;
    }

    var ret;

    if (type === "open") {
        ret = str in openMap ? openMap[str] : stringMap[str] || str;
    } else if (type === "close") {
        ret = str in closeMap ? closeMap[str] : stringMap[str] || str;
    } else if (type === "bin") {
        ret = binMap[str] || str;
    } else if (type === "rel") {
        ret = relMap[str] || str;
    } else {
        ret = stringMap[str] || str;
    }

    // If nothing was found and it's not a plain string or number
    if (ret === str && !/^\w+$/.test(str)) {
        // This is likely a case that we'll need to handle
        throw new Error("KaTeX a11y " + type + " string not found: " + str);
    }

    // If the text to add is a number and there is already a string
    // in the list and the last string is a number then we should
    // combine them into a single number
    if (/^\d+$/.test(ret) && a11yStrings.length > 0 && /^\d+$/.test(a11yStrings[a11yStrings.length - 1])) {
        a11yStrings[a11yStrings.length - 1] += ret;
    } else if (ret) {
        a11yStrings.push(ret);
    }
};

var buildRegion = function buildRegion(a11yStrings, callback) {
    var region = [];
    a11yStrings.push(region);
    callback(region);
};

var typeHandlers = {
    accent: function accent(tree, a11yStrings) {
        buildRegion(a11yStrings, function (a11yStrings) {
            buildA11yStrings(tree.value.base, a11yStrings);
            a11yStrings.push("with");
            buildA11yStrings(tree.value.accent, a11yStrings);
            a11yStrings.push("on top");
        });
    },

    bin: function bin(tree, a11yStrings) {
        buildString(tree.value, "bin", a11yStrings);
    },

    close: function close(tree, a11yStrings) {
        buildString(tree.value, "close", a11yStrings);
    },

    color: function color(tree, a11yStrings) {
        var color = tree.value.color.replace(/katex-/, "");

        buildRegion(a11yStrings, function (a11yStrings) {
            a11yStrings.push("start color " + color);
            buildA11yStrings(tree.value.value, a11yStrings);
            a11yStrings.push("end color " + color);
        });
    },

    delimsizing: function delimsizing(tree, a11yStrings) {
        if (tree.value.value && tree.value.value !== ".") {
            buildString(tree.value.value, "normal", a11yStrings);
        }
    },

    genfrac: function genfrac(tree, a11yStrings) {
        buildRegion(a11yStrings, function (a11yStrings) {
            // NOTE: Not sure if this is a safe assumption
            // hasBarLine true -> fraction, false -> binomial
            if (tree.value.hasBarLine) {
                a11yStrings.push("start fraction");
                buildString(tree.value.leftDelim, "open", a11yStrings);
                buildA11yStrings(tree.value.numer, a11yStrings);
                a11yStrings.push("divided by");
                buildA11yStrings(tree.value.denom, a11yStrings);
                buildString(tree.value.rightDelim, "close", a11yStrings);
                a11yStrings.push("end fraction");
            } else {
                a11yStrings.push("start binomial");
                buildString(tree.value.leftDelim, "open", a11yStrings);
                buildA11yStrings(tree.value.numer, a11yStrings);
                a11yStrings.push("over");
                buildA11yStrings(tree.value.denom, a11yStrings);
                buildString(tree.value.rightDelim, "close", a11yStrings);
                a11yStrings.push("end binomial");
            }
        });
    },

    // inner

    katex: function katex(tree, a11yStrings) {
        a11yStrings.push("KaTeX");
    },

    leftright: function leftright(tree, a11yStrings) {
        buildRegion(a11yStrings, function (a11yStrings) {
            buildString(tree.value.left, "open", a11yStrings);
            buildA11yStrings(tree.value.body, a11yStrings);
            buildString(tree.value.right, "close", a11yStrings);
        });
    },

    llap: function llap(tree, a11yStrings) {
        buildA11yStrings(tree.value.body, a11yStrings);
    },

    mathord: function mathord(tree, a11yStrings) {
        buildA11yStrings(tree.value, a11yStrings);
    },

    op: function op(tree, a11yStrings) {
        buildString(tree.value.body, "normal", a11yStrings);
    },

    open: function open(tree, a11yStrings) {
        buildString(tree.value, "open", a11yStrings);
    },

    ordgroup: function ordgroup(tree, a11yStrings) {
        buildA11yStrings(tree.value, a11yStrings);
    },

    overline: function overline(tree, a11yStrings) {
        buildRegion(a11yStrings, function (a11yStrings) {
            a11yStrings.push("start overline");
            buildA11yStrings(tree.value.body, a11yStrings);
            a11yStrings.push("end overline");
        });
    },

    phantom: function phantom(tree, a11yStrings) {
        a11yStrings.push("empty space");
    },

    punct: function punct(tree, a11yStrings) {
        buildString(tree.value, "punct", a11yStrings);
    },

    rel: function rel(tree, a11yStrings) {
        buildString(tree.value, "rel", a11yStrings);
    },

    rlap: function rlap(tree, a11yStrings) {
        buildA11yStrings(tree.value.body, a11yStrings);
    },

    rule: function rule(tree, a11yStrings) {
        // NOTE: Is there something more useful that we can put here?
        a11yStrings.push("rule");
    },

    sizing: function sizing(tree, a11yStrings) {
        buildA11yStrings(tree.value.value, a11yStrings);
    },

    spacing: function spacing(tree, a11yStrings) {
        a11yStrings.push("space");
    },

    styling: function styling(tree, a11yStrings) {
        // We ignore the styling and just pass through the contents
        buildA11yStrings(tree.value.value, a11yStrings);
    },

    sqrt: function sqrt(tree, a11yStrings) {
        buildRegion(a11yStrings, function (a11yStrings) {
            if (tree.value.index) {
                a11yStrings.push("root");
                a11yStrings.push("start index");
                buildA11yStrings(tree.value.index, a11yStrings);
                a11yStrings.push("end index");
            }

            a11yStrings.push("square root of");
            buildA11yStrings(tree.value.body, a11yStrings);
            a11yStrings.push("end square root");
        });
    },

    supsub: function supsub(tree, a11yStrings) {
        if (tree.value.base) {
            buildA11yStrings(tree.value.base, a11yStrings);
        }

        if (tree.value.sub) {
            buildRegion(a11yStrings, function (a11yStrings) {
                a11yStrings.push("start subscript");
                buildA11yStrings(tree.value.sub, a11yStrings);
                a11yStrings.push("end subscript");
            });
        }

        var sup = tree.value.sup;

        if (sup) {
            // There are some cases that just read better if we don't have
            // the extra start/end baggage, so we skip the extra text
            var newPower = powerMap[sup];
            var supValue = sup.value;

            // The value stored inside the sup property is not always
            // consistent. It could be a string (handled above), an object
            // with a string property in value, or an array of objects that
            // have a value property.
            if (!newPower && supValue) {
                // If supValue is an object and it has a length of 1 we assume
                // it's an array that has only a single item in it. This is the
                // case that we care about and we only check that one value.
                if ((typeof supValue === "undefined" ? "undefined" : _typeof(supValue)) === "object" && supValue.length === 1) {
                    newPower = powerMap[supValue[0].value];

                    // This is the case where it's a string in the value property
                } else {
                    newPower = powerMap[supValue];
                }
            }

            buildRegion(a11yStrings, function (a11yStrings) {
                if (newPower) {
                    a11yStrings.push(newPower);
                    return;
                }

                a11yStrings.push("start superscript");
                buildA11yStrings(tree.value.sup, a11yStrings);
                a11yStrings.push("end superscript");
            });
        }
    },

    text: function text(tree, a11yStrings) {
        if (typeof tree.value !== "string") {
            buildA11yStrings(tree.value.body, a11yStrings);
        } else {
            buildString(tree, "normal", a11yStrings);
        }
    },

    textord: function textord(tree, a11yStrings) {
        buildA11yStrings(tree.value, a11yStrings);
    }
};

var buildA11yStrings = function buildA11yStrings(tree, a11yStrings) {
    a11yStrings = a11yStrings || [];

    // Handle strings
    if (typeof tree === "string") {
        buildString(tree, "normal", a11yStrings);

        // Handle arrays
    } else if (tree.constructor === Array) {
        for (var i = 0; i < tree.length; i++) {
            buildA11yStrings(tree[i], a11yStrings);
        }

        // Everything else is assumed to be an object...
    } else {
        if (!tree.type || !(tree.type in typeHandlers)) {
            throw new Error("KaTeX a11y un-recognized type: " + tree.type);
        } else {
            typeHandlers[tree.type](tree, a11yStrings);
        }
    }

    return a11yStrings;
};

var renderStrings = function renderStrings(a11yStrings, a11yNode) {
    var doc = a11yNode.ownerDocument;

    for (var i = 0; i < a11yStrings.length; i++) {
        var a11yString = a11yStrings[i];

        if (i > 0) {
            // Note: We insert commas in (not just spaces) to provide
            // screen readers with some "breathing room". When inserting the
            // commas the screen reader knows to pause slightly and it provides
            // an overall better listening experience.
            a11yNode.appendChild(doc.createTextNode(", "));
        }

        if (typeof a11yString === "string") {
            a11yNode.appendChild(doc.createTextNode(a11yString));
        } else {
            var newBaseNode = doc.createElement("span");
            // NOTE(jeresig): We may want to add in a tabIndex property
            // to the node here, in order to support keyboard navigation.
            a11yNode.appendChild(newBaseNode);
            renderStrings(a11yString, newBaseNode);
        }
    }
};

var flattenStrings = function flattenStrings(a11yStrings, results) {
    if (!results) {
        results = [];
    }

    for (var i = 0; i < a11yStrings.length; i++) {
        var a11yString = a11yStrings[i];

        if (typeof a11yString === "string") {
            results.push(a11yString);
        } else {
            flattenStrings(a11yString, results);
        }
    }

    return results;
};

var parseMath = function parseMath(text) {
    // NOTE: `katex` is a global, should be included using require
    return katex.__parse(text);
};

var render = function render(text, a11yNode) {
    var tree = parseMath(text);
    var a11yStrings = buildA11yStrings(tree);
    renderStrings(a11yStrings, a11yNode);
};

var flatten = function flatten(array) {
    var result = [];

    array.forEach(function (item) {
        if (Array.isArray(item)) {
            result = result.concat(flatten(item));
        } else {
            result.push(item);
        }
    });

    return result;
};

var renderString = function renderString(text) {
    var tree = parseMath(text);
    var a11yStrings = buildA11yStrings(tree);
    return flatten(a11yStrings).join(", ");
};

if (typeof module !== "undefined") {
    module.exports = {
        render: render,
        renderString: renderString,
        parseMath: parseMath
    };
} else {
    undefined.katexA11yRender = render;
}

},{}],70:[function(require,module,exports){
'use strict';

var StyleSheet = require("aphrodite").StyleSheet;

var button = StyleSheet.create({
    buttonStyle: {
        backgroundColor: 'white',
        border: '1px solid #ccc',
        borderLeft: '0',
        cursor: 'pointer',
        margin: '0',
        padding: '5px 10px',
        position: 'relative', // for hover

        ':first-child': {
            borderLeft: '1px solid #ccc',
            borderTopLeftRadius: '3px',
            borderBottomLeftRadius: '3px'
        },

        ':last-child': {
            borderRight: '1px solid #ccc',
            borderTopRightRadius: '3px',
            borderBottomRightRadius: '3px'
        },

        ':hover': {
            backgroundColor: '#ccc'
        },

        ':focus': {
            zIndex: '2'
        }
    },

    selectedStyle: {
        backgroundColor: '#ddd'
    }
});

module.exports = {
    button: button
};

},{"aphrodite":75}],71:[function(require,module,exports){
"use strict";
/**
 * For math rendered using KaTex and/or MathJax. Use me like <TeX>2x + 3</TeX>.
 */
/* global katex, MathJax */
// TODO(joel) - require MathJax / katex so they don't have to be global

var PureRenderMixin = require('react-addons-pure-render-mixin');
var React = require('react');
var ReactDOM = require('react-dom');

var katexA11y = require('./katex-a11y.js');

var pendingScripts = [];
var pendingCallbacks = [];
var needsProcess = false;

var process = function process(script, callback) {
    pendingScripts.push(script);
    pendingCallbacks.push(callback);
    if (!needsProcess) {
        needsProcess = true;
        setTimeout(doProcess, 0);
    }
};

var loadMathJax = function loadMathJax(callback) {
    if (typeof MathJax !== "undefined") {
        callback();
    } else if (typeof Khan !== "undefined" && Khan.mathJaxLoaded) {
        Khan.mathJaxLoaded.then(callback);
    } else {
        throw new Error("MathJax wasn't loaded before it was needed by <TeX/>");
    }
};

var doProcess = function doProcess() {
    loadMathJax(function () {
        MathJax.Hub.Queue(function () {
            var oldElementScripts = MathJax.Hub.elementScripts;
            MathJax.Hub.elementScripts = function (element) {
                return pendingScripts;
            };

            try {
                return MathJax.Hub.Process(null, function () {
                    // Trigger all of the pending callbacks before clearing them
                    // out.
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = pendingCallbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var callback = _step.value;

                            callback();
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    pendingScripts = [];
                    pendingCallbacks = [];
                    needsProcess = false;
                });
            } catch (e) {
                // IE8 requires `catch` in order to use `finally`
                throw e;
            } finally {
                MathJax.Hub.elementScripts = oldElementScripts;
            }
        });
    });
};

// Make content only visible to screen readers.
// Both collegeboard.org and Bootstrap 3 use this exact implementation.
var srOnly = {
    border: 0,
    clip: "rect(0,0,0,0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    width: "1px"
};

var TeX = React.createClass({
    displayName: 'TeX',

    propTypes: {
        children: React.PropTypes.node,
        onClick: React.PropTypes.func,
        onRender: React.PropTypes.func,
        style: React.PropTypes.any
    },

    mixins: [PureRenderMixin],

    getDefaultProps: function getDefaultProps() {
        return {
            // Called after math is rendered or re-rendered
            onRender: function onRender() {},
            onClick: null
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;

        this._root = ReactDOM.findDOMNode(this);

        if (this.refs.katex.childElementCount > 0) {
            // If we already rendered katex in the render function, we don't
            // need to render anything here.
            this.props.onRender(this._root);
            return;
        }

        var text = this.props.children;

        this.setScriptText(text);
        process(this.script, function () {
            return _this.props.onRender(_this._root);
        });
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        var _this2 = this;

        // If we already rendered katex in the render function, we don't
        // need to render anything here.
        if (this.refs.katex.childElementCount > 0) {
            if (this.script) {
                // If we successfully rendered KaTeX, check if there's
                // lingering MathJax from the last render, and if so remove it.
                loadMathJax(function () {
                    var jax = MathJax.Hub.getJaxFor(_this2.script);
                    if (jax) {
                        jax.Remove();
                    }
                });
            }

            this.props.onRender();
            return;
        }

        var newText = this.props.children;

        if (this.script) {
            loadMathJax(function () {
                MathJax.Hub.Queue(function () {
                    var jax = MathJax.Hub.getJaxFor(_this2.script);
                    if (jax) {
                        return jax.Text(newText, _this2.props.onRender);
                    } else {
                        _this2.setScriptText(newText);
                        process(_this2.script, _this2.props.onRender);
                    }
                });
            });
        } else {
            this.setScriptText(newText);
            process(this.script, this.props.onRender);
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this3 = this;

        if (this.script) {
            loadMathJax(function () {
                var jax = MathJax.Hub.getJaxFor(_this3.script);
                if (jax) {
                    jax.Remove();
                }
            });
        }
    },

    setScriptText: function setScriptText(text) {
        if (!this.script) {
            this.script = document.createElement("script");
            this.script.type = "math/tex";
            ReactDOM.findDOMNode(this.refs.mathjax).appendChild(this.script);
        }
        if ("text" in this.script) {
            // IE8, etc
            this.script.text = text;
        } else {
            this.script.textContent = text;
        }
    },

    render: function render() {
        var katexHtml = null;
        try {
            katexHtml = {
                __html: katex.renderToString(this.props.children)
            };
        } catch (e) {
            /* jshint -W103 */
            if (e.__proto__ !== katex.ParseError.prototype) {
                /* jshint +W103 */
                throw e;
            }
        }

        var katexA11yHtml = null;
        if (katexHtml) {
            try {
                katexA11yHtml = {
                    __html: katexA11y.renderString(this.props.children)
                };
            } catch (e) {
                // Nothing
            }
        }

        return React.createElement(
            'span',
            {
                style: this.props.style,
                onClick: this.props.onClick
            },
            React.createElement('span', { ref: 'mathjax' }),
            React.createElement('span', {
                ref: 'katex',
                dangerouslySetInnerHTML: katexHtml,
                'aria-hidden': !!katexHtml && !!katexA11yHtml
            }),
            React.createElement('span', {
                dangerouslySetInnerHTML: katexA11yHtml,
                style: srOnly
            })
        );
    }
});

module.exports = TeX;

},{"./katex-a11y.js":69,"react":246,"react-addons-pure-render-mixin":64,"react-dom":95}],72:[function(require,module,exports){
"use strict";

/**
 * A generic tooltip library for React.js
 *
 * This should eventually end up in react-components
 *
 * Interface: ({a, b} means one of a or b)
 * const Tooltip = require("./tooltip.jsx");
 * <Tooltip
 *     className="class-for-tooltip-contents"
 *     horizontalPosition="left" // one of "left", "right"
 *     horizontalAlign="left" // one of "left", "right"
 *     verticalPosition="bottom" // one of "top", "bottom"
 *     arrowSize={10} // arrow size in pixels
 *     borderColor="#ccc" // color of the border for the tooltip
 *     show={true} // whether the tooltip should currently be visible
 *     targetContainerStyle={targetContainerStyle}
 * >
 *     <TargetElementOfTheTooltip />
 *     <TooltipContents1 />
 *     <TooltipContents2 />
 * </Tooltip>
 *
 * To show/hide the tooltip, the parent component should call the
 * .show() and .hide() methods of the tooltip when appropriate.
 * (These are usually set up as handlers of events on the target element.)
 *
 * Notes:
 *     className should not specify a border; that is handled by borderColor
 *     so that the arrow and tooltip match
 */

//          __,,--``\\
//  _,,-''``         \\     ,
// '----------_.------'-.___|\__
//    _.--''``    `)__   )__   @\__
//   (  .. ''---/___,,E/__,E'------`
//    `-''`''
// Here be dragons.

// TODO(joel/aria) fix z-index issues https://s3.amazonaws.com/uploads.hipchat.com/6574/29028/yOApjwmgiMhEZYJ/Screen%20Shot%202014-05-30%20at%203.34.18%20PM.png
// z-index: 3 on perseus-formats-tooltip seemed to work

var React = require("react");
var ReactDOM = require("react-dom");

var zIndex = 10;

var Triangle = React.createClass({
    displayName: "Triangle",

    propTypes: {
        color: React.PropTypes.string.isRequired,
        left: React.PropTypes.number.isRequired,
        "top": React.PropTypes.number.isRequired,
        width: React.PropTypes.number.isRequired,
        height: React.PropTypes.number.isRequired,
        horizontalDirection: React.PropTypes.oneOf(["left", "right"]).isRequired,
        verticalDirection: React.PropTypes.oneOf(["top", "bottom"]).isRequired
    },

    render: function render() {
        var borderLeft = void 0;
        var borderRight = void 0;
        var borderTop = void 0;
        var borderBottom = void 0;

        var hBorder = this.props.width + "px solid transparent";
        if (this.props.horizontalDirection === "right") {
            borderLeft = hBorder;
        } else {
            borderRight = hBorder;
        }

        var vBorder = this.props.height + "px solid " + this.props.color;
        if (this.props.verticalDirection === "top") {
            borderTop = vBorder;
        } else {
            borderBottom = vBorder;
        }

        return React.createElement("div", {
            style: {
                display: "block",
                height: 0,
                width: 0,
                position: "absolute",
                left: this.props.left,
                "top": this.props["top"],
                borderLeft: borderLeft,
                borderRight: borderRight,
                borderTop: borderTop,
                borderBottom: borderBottom
            }
        });
    }
});

var TooltipArrow = React.createClass({
    displayName: "TooltipArrow",

    propTypes: {
        position: React.PropTypes.string,
        visibility: React.PropTypes.string,
        left: React.PropTypes.number,
        "top": React.PropTypes.number,
        color: React.PropTypes.string.isRequired, // a css color
        border: React.PropTypes.string.isRequired, // a css color
        width: React.PropTypes.number.isRequired,
        height: React.PropTypes.number.isRequired,
        horizontalDirection: React.PropTypes.oneOf(["left", "right"]).isRequired,
        verticalDirection: React.PropTypes.oneOf(["top", "bottom"]).isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            position: "relative",
            visibility: "visible",
            left: 0,
            "top": 0
        };
    },

    // TODO(aria): Think about adding a box-shadow to the triangle here
    // See http://css-tricks.com/triangle-with-shadow/
    render: function render() {
        //const isRight = (this.props.horizontalDirection === "right");
        var isTop = this.props.verticalDirection === "top";

        var frontTopOffset = isTop ? 0 : 1;
        var borderTopOffset = isTop ? 0 : -1;

        return React.createElement(
            "div",
            { style: {
                    display: "block",
                    position: this.props.position,
                    visibility: this.props.visibility,
                    left: this.props.left,
                    "top": this.props["top"],
                    width: this.props.width + 2,
                    height: this.props.height + 1,
                    marginTop: -1,
                    marginBottom: -2,
                    zIndex: zIndex
                }
            },
            React.createElement(Triangle, {
                horizontalDirection: this.props.horizontalDirection,
                verticalDirection: this.props.verticalDirection,
                color: this.props.border,
                left: 0,
                top: borderTopOffset,
                width: this.props.width + 2 // one extra for the diagonal
                , height: this.props.height + 2
            }),
            React.createElement(Triangle, {
                horizontalDirection: this.props.horizontalDirection,
                verticalDirection: this.props.verticalDirection,
                color: this.props.color,
                left: 1,
                top: frontTopOffset,
                width: this.props.width,
                height: this.props.height
            })
        );
    }
});

var VERTICAL_CORNERS = {
    "top": {
        "top": "-100%"
    },
    bottom: {
        "top": 0
    }
};

var HORIZONTAL_CORNERS = {
    left: {
        targetLeft: 0
    },

    right: {
        targetLeft: "100%"
    }
};

var HORIZONTAL_ALIGNMNENTS = {
    left: {
        tooltipLeft: 0,
        arrowLeft: function arrowLeft(arrowSize) {
            return 0;
        }
    },
    right: {
        tooltipLeft: "-100%",
        arrowLeft: function arrowLeft(arrowSize) {
            return -arrowSize - 2;
        }
    }
};

var Tooltip = React.createClass({
    displayName: "Tooltip",

    propTypes: {
        show: React.PropTypes.bool.isRequired,
        className: React.PropTypes.string,
        arrowSize: React.PropTypes.number,
        borderColor: React.PropTypes.string,
        verticalPosition: React.PropTypes.oneOf(Object.keys(VERTICAL_CORNERS)),
        horizontalPosition: React.PropTypes.oneOf(Object.keys(HORIZONTAL_CORNERS)),
        horizontalAlign: React.PropTypes.oneOf(Object.keys(HORIZONTAL_ALIGNMNENTS)),
        children: React.PropTypes.arrayOf(React.PropTypes.element).isRequired,
        targetContainerStyle: React.PropTypes.any },

    getDefaultProps: function getDefaultProps() {
        return {
            className: "",
            arrowSize: 10,
            borderColor: "#ccc",
            verticalPosition: "bottom",
            horizontalPosition: "left",
            horizontalAlign: "left",
            targetContainerStyle: {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            height: null };
    },

    componentDidMount: function componentDidMount() {
        this._updateHeight();
    },

    componentWillReceiveProps: function componentWillReceiveProps() {
        // If the contents have changed, reset our measure of the height
        this.setState({ height: null });
    },

    componentDidUpdate: function componentDidUpdate() {
        this._updateHeight();
    },

    _renderToolTipDiv: function _renderToolTipDiv(isTooltipAbove) {
        var settings = Object.assign({}, HORIZONTAL_CORNERS[this.props.horizontalPosition], HORIZONTAL_ALIGNMNENTS[this.props.horizontalAlign], VERTICAL_CORNERS[this.props.verticalPosition]);

        var arrowAbove = void 0;
        var arrowBelow = void 0;

        if (isTooltipAbove) {
            // We put an absolutely positioned arrow in the correct place
            arrowAbove = React.createElement(TooltipArrow, {
                verticalDirection: "top",
                horizontalDirection: this.props.horizontalAlign,
                position: "absolute",
                color: "white",
                border: this.props.borderColor,
                left: settings.arrowLeft(this.props.arrowSize),
                top: -this.props.arrowSize + 2,
                width: this.props.arrowSize,
                height: this.props.arrowSize,
                zIndex: zIndex
            });

            // And we use a visibility: hidden arrow below to shift up the
            // content by the correct amount
            arrowBelow = React.createElement(TooltipArrow, {
                verticalDirection: "top",
                horizontalDirection: this.props.horizontalAlign,
                visibility: "hidden",
                color: "white",
                border: this.props.borderColor,
                left: settings.arrowLeft(this.props.arrowSize),
                top: -1,
                width: this.props.arrowSize,
                height: this.props.arrowSize,
                zIndex: zIndex
            });
        } else {
            arrowAbove = React.createElement(TooltipArrow, {
                verticalDirection: "bottom",
                horizontalDirection: this.props.horizontalAlign,
                color: "white",
                border: this.props.borderColor,
                left: settings.arrowLeft(this.props.arrowSize),
                top: -1,
                width: this.props.arrowSize,
                height: this.props.arrowSize,
                zIndex: zIndex
            });

            arrowBelow = null;
        }

        /* A positioned div below the input to be the parent for our
            tooltip */
        return React.createElement(
            "div",
            { style: {
                    position: "relative",
                    height: 0,
                    display: this.props.show ? "block" : "none"
                }
            },
            React.createElement(
                "div",
                { ref: "tooltipContainer", className: "tooltipContainer", style: {
                        position: "absolute",
                        // height must start out undefined, not null, so that
                        // we can measure the actual height with jquery.
                        // This is used to position the tooltip with top: -100%
                        // when in verticalPosition: "top" mode
                        height: this.state.height || undefined,
                        left: settings.targetLeft
                    }
                },
                arrowAbove,
                React.createElement(
                    "div",
                    { className: this.props.className,
                        ref: "tooltipContent",
                        style: {
                            position: "relative",
                            top: settings["top"],
                            left: settings.tooltipLeft,
                            border: "1px solid " + this.props.borderColor,
                            WebkitBoxShadow: "0 1px 3px " + this.props.borderColor,
                            MozBoxShadow: "0 1px 3px " + this.props.borderColor,
                            boxShadow: "0 1px 3px " + this.props.borderColor,
                            zIndex: zIndex - 1
                        }
                    },
                    this.props.children.slice(1)
                ),
                arrowBelow
            )
        );
    },

    _updateHeight: function _updateHeight() {
        var height = ReactDOM.findDOMNode(this.refs.tooltipContainer).offsetHeight;
        if (height !== this.state.height) {
            this.setState({ height: height });
        }
    },

    render: function render() {
        var isTooltipAbove = this.props.verticalPosition === "top";

        /* We wrap the entire output in a span so that it displays inline */
        return React.createElement(
            "span",
            null,
            isTooltipAbove && this._renderToolTipDiv(isTooltipAbove),
            React.createElement(
                "div",
                { style: this.props.targetContainerStyle },
                this.props.children[0]
            ),
            !isTooltipAbove && this._renderToolTipDiv()
        );
    }
});

// Sorry.  // Apology-Oriented-Programming
module.exports = Tooltip;

},{"react":246,"react-dom":95}],73:[function(require,module,exports){
'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('./util');

var _inject = require('./inject');

var StyleSheet = {
    create: function create(sheetDefinition) {
        return (0, _util.mapObj)(sheetDefinition, function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2);

            var key = _ref2[0];
            var val = _ref2[1];

            return [key, {
                // TODO(emily): Make a 'production' mode which doesn't prepend
                // the class name here, to make the generated CSS smaller.
                _name: key + '_' + (0, _util.hashObject)(val),
                _definition: val
            }];
        });
    },

    rehydrate: function rehydrate() {
        var renderedClassNames = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

        (0, _inject.addRenderedClassNames)(renderedClassNames);
    }
};

/**
 * Utilities for using Aphrodite server-side.
 */
var StyleSheetServer = {
    renderStatic: function renderStatic(renderFunc) {
        (0, _inject.reset)();
        (0, _inject.startBuffering)();
        var html = renderFunc();
        var cssContent = (0, _inject.flushToString)();

        return {
            html: html,
            css: {
                content: cssContent,
                renderedClassNames: (0, _inject.getRenderedClassNames)()
            }
        };
    }
};

/**
 * Utilities for using Aphrodite in tests.
 *
 * Not meant to be used in production.
 */
var StyleSheetTestUtils = {
    /**
     * Prevent styles from being injected into the DOM.
     *
     * This is useful in situations where you'd like to test rendering UI
     * components which use Aphrodite without any of the side-effects of
     * Aphrodite happening. Particularly useful for testing the output of
     * components when you have no DOM, e.g. testing in Node without a fake DOM.
     *
     * Should be paired with a subsequent call to
     * clearBufferAndResumeStyleInjection.
     */
    suppressStyleInjection: function suppressStyleInjection() {
        (0, _inject.reset)();
        (0, _inject.startBuffering)();
    },

    /**
     * Opposite method of preventStyleInject.
     */
    clearBufferAndResumeStyleInjection: function clearBufferAndResumeStyleInjection() {
        (0, _inject.reset)();
    }
};

/**
 * Generate the Aphrodite API exports, with given `selectorHandlers` and
 * `useImportant` state.
 */
var makeExports = function makeExports(useImportant, selectorHandlers) {
    return {
        StyleSheet: _extends({}, StyleSheet, {

            /**
             * Returns a version of the exports of Aphrodite (i.e. an object
             * with `css` and `StyleSheet` properties) which have some
             * extensions included.
             *
             * @param {Array.<Object>} extensions: An array of extensions to
             *     add to this instance of Aphrodite. Each object should have a
             *     single property on it, defining which kind of extension to
             *     add.
             * @param {SelectorHandler} [extensions[].selectorHandler]: A
             *     selector handler extension. See `defaultSelectorHandlers` in
             *     generate.js.
             *
             * @returns {Object} An object containing the exports of the new
             *     instance of Aphrodite.
             */
            extend: function extend(extensions) {
                var extensionSelectorHandlers = extensions
                // Pull out extensions with a selectorHandler property
                .map(function (extension) {
                    return extension.selectorHandler;
                })
                // Remove nulls (i.e. extensions without a selectorHandler
                // property).
                .filter(function (handler) {
                    return handler;
                });

                return makeExports(useImportant, selectorHandlers.concat(extensionSelectorHandlers));
            }
        }),

        StyleSheetServer: StyleSheetServer,
        StyleSheetTestUtils: StyleSheetTestUtils,

        css: function css() {
            for (var _len = arguments.length, styleDefinitions = Array(_len), _key = 0; _key < _len; _key++) {
                styleDefinitions[_key] = arguments[_key];
            }

            return (0, _inject.injectAndGetClassName)(useImportant, styleDefinitions, selectorHandlers);
        }
    };
};

module.exports = makeExports;
},{"./inject":76,"./util":77}],74:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inlineStylePrefixerStatic = require('inline-style-prefixer/static');

var _inlineStylePrefixerStatic2 = _interopRequireDefault(_inlineStylePrefixerStatic);

var _util = require('./util');

/**
 * `selectorHandlers` are functions which handle special selectors which act
 * differently than normal style definitions. These functions look at the
 * current selector and can generate CSS for the styles in their subtree by
 * calling the callback with a new selector.
 *
 * For example, when generating styles with a base selector of '.foo' and the
 * following styles object:
 *
 *   {
 *     ':nth-child(2n)': {
 *       ':hover': {
 *         color: 'red'
 *       }
 *     }
 *   }
 *
 * when we reach the ':hover' style, we would call our selector handlers like
 *
 *   handler(':hover', '.foo:nth-child(2n)', callback)
 *
 * Since our `pseudoSelectors` handles ':hover' styles, that handler would call
 * the callback like
 *
 *   callback('.foo:nth-child(2n):hover')
 *
 * to generate its subtree `{ color: 'red' }` styles with a
 * '.foo:nth-child(2n):hover' selector. The callback would return CSS like
 *
 *   '.foo:nth-child(2n):hover{color:red !important;}'
 *
 * and the handler would then return that resulting CSS.
 *
 * `defaultSelectorHandlers` is the list of default handlers used in a call to
 * `generateCSS`.
 *
 * @name SelectorHandler
 * @function
 * @param {string} selector: The currently inspected selector. ':hover' in the
 *     example above.
 * @param {string} baseSelector: The selector of the parent styles.
 *     '.foo:nth-child(2n)' in the example above.
 * @param {function} generateSubtreeStyles: A function which can be called to
 *     generate CSS for the subtree of styles corresponding to the selector.
 *     Accepts a new baseSelector to use for generating those styles.
 * @returns {?string} The generated CSS for this selector, or null if we don't
 *     handle this selector.
 */
var defaultSelectorHandlers = [
// Handle pseudo-selectors, like :hover and :nth-child(3n)
function pseudoSelectors(selector, baseSelector, generateSubtreeStyles) {
    if (selector[0] !== ":") {
        return null;
    }
    return generateSubtreeStyles(baseSelector + selector);
},

// Handle media queries (or font-faces)
function mediaQueries(selector, baseSelector, generateSubtreeStyles) {
    if (selector[0] !== "@") {
        return null;
    }
    // Generate the styles normally, and then wrap them in the media query.
    var generated = generateSubtreeStyles(baseSelector);
    return selector + '{' + generated + '}';
}];

exports.defaultSelectorHandlers = defaultSelectorHandlers;
/**
 * Generate CSS for a selector and some styles.
 *
 * This function handles the media queries, pseudo selectors, and descendant
 * styles that can be used in aphrodite styles.
 *
 * @param {string} selector: A base CSS selector for the styles to be generated
 *     with.
 * @param {Object} styleTypes: A list of properties of the return type of
 *     StyleSheet.create, e.g. [styles.red, styles.blue].
 * @param {Array.<SelectorHandler>} selectorHandlers: A list of selector
 *     handlers to use for handling special selectors. See
 *     `defaultSelectorHandlers`.
 * @param stringHandlers: See `generateCSSRuleset`
 * @param useImportant: See `generateCSSRuleset`
 *
 * To actually generate the CSS special-construct-less styles are passed to
 * `generateCSSRuleset`.
 *
 * For instance, a call to
 *
 *     generateCSS(".foo", {
 *       color: "red",
 *       "@media screen": {
 *         height: 20,
 *         ":hover": {
 *           backgroundColor: "black"
 *         }
 *       },
 *       ":active": {
 *         fontWeight: "bold",
 *         ">>bar": {
 *           _names: { "foo_bar": true },
 *           height: 10,
 *         }
 *       }
 *     });
 *
 * with the default `selectorHandlers` will make 5 calls to
 * `generateCSSRuleset`:
 *
 *     generateCSSRuleset(".foo", { color: "red" }, ...)
 *     generateCSSRuleset(".foo:active", { fontWeight: "bold" }, ...)
 *     generateCSSRuleset(".foo:active .foo_bar", { height: 10 }, ...)
 *     // These 2 will be wrapped in @media screen {}
 *     generateCSSRuleset(".foo", { height: 20 }, ...)
 *     generateCSSRuleset(".foo:hover", { backgroundColor: "black" }, ...)
 */
var generateCSS = function generateCSS(selector, styleTypes) {
    var selectorHandlers = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
    var stringHandlers = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
    var useImportant = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];

    var merged = styleTypes.reduce(_util.recursiveMerge);

    var plainDeclarations = {};
    var generatedStyles = "";

    Object.keys(merged).forEach(function (key) {
        // For each key, see if one of the selector handlers will handle these
        // styles.
        var foundHandler = selectorHandlers.some(function (handler) {
            var result = handler(key, selector, function (newSelector) {
                return generateCSS(newSelector, [merged[key]], selectorHandlers, stringHandlers, useImportant);
            });
            if (result != null) {
                // If the handler returned something, add it to the generated
                // CSS and stop looking for another handler.
                generatedStyles += result;
                return true;
            }
        });
        // If none of the handlers handled it, add it to the list of plain
        // style declarations.
        if (!foundHandler) {
            plainDeclarations[key] = merged[key];
        }
    });

    return generateCSSRuleset(selector, plainDeclarations, stringHandlers, useImportant, selectorHandlers) + generatedStyles;
};

exports.generateCSS = generateCSS;
/**
 * Helper method of generateCSSRuleset to facilitate custom handling of certain
 * CSS properties. Used for e.g. font families.
 *
 * See generateCSSRuleset for usage and documentation of paramater types.
 */
var runStringHandlers = function runStringHandlers(declarations, stringHandlers, selectorHandlers) {
    var result = {};

    Object.keys(declarations).forEach(function (key) {
        // If a handler exists for this particular key, let it interpret
        // that value first before continuing
        if (stringHandlers && stringHandlers.hasOwnProperty(key)) {
            // TODO(emily): Pass in a callback which generates CSS, similar to
            // how our selector handlers work, instead of passing in
            // `selectorHandlers` and have them make calls to `generateCSS`
            // themselves. Right now, this is impractical because our string
            // handlers are very specialized and do complex things.
            result[key] = stringHandlers[key](declarations[key], selectorHandlers);
        } else {
            result[key] = declarations[key];
        }
    });

    return result;
};

/**
 * Generate a CSS ruleset with the selector and containing the declarations.
 *
 * This function assumes that the given declarations don't contain any special
 * children (such as media queries, pseudo-selectors, or descendant styles).
 *
 * Note that this method does not deal with nesting used for e.g.
 * psuedo-selectors or media queries. That responsibility is left to  the
 * `generateCSS` function.
 *
 * @param {string} selector: the selector associated with the ruleset
 * @param {Object} declarations: a map from camelCased CSS property name to CSS
 *     property value.
 * @param {Object.<string, function>} stringHandlers: a map from camelCased CSS
 *     property name to a function which will map the given value to the value
 *     that is output.
 * @param {bool} useImportant: A boolean saying whether to append "!important"
 *     to each of the CSS declarations.
 * @returns {string} A string of raw CSS.
 *
 * Examples:
 *
 *    generateCSSRuleset(".blah", { color: "red" })
 *    -> ".blah{color: red !important;}"
 *    generateCSSRuleset(".blah", { color: "red" }, {}, false)
 *    -> ".blah{color: red}"
 *    generateCSSRuleset(".blah", { color: "red" }, {color: c => c.toUpperCase})
 *    -> ".blah{color: RED}"
 *    generateCSSRuleset(".blah:hover", { color: "red" })
 *    -> ".blah:hover{color: red}"
 */
var generateCSSRuleset = function generateCSSRuleset(selector, declarations, stringHandlers, useImportant, selectorHandlers) {
    var handledDeclarations = runStringHandlers(declarations, stringHandlers, selectorHandlers);

    var prefixedDeclarations = (0, _inlineStylePrefixerStatic2['default'])(handledDeclarations);

    var prefixedRules = (0, _util.flatten)((0, _util.objectToPairs)(prefixedDeclarations).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var value = _ref2[1];

        if (Array.isArray(value)) {
            var _ret = (function () {
                // inline-style-prefix-all returns an array when there should be
                // multiple rules, we will flatten to single rules

                var prefixedValues = [];
                var unprefixedValues = [];

                value.forEach(function (v) {
                    if (v.indexOf('-') === 0) {
                        prefixedValues.push(v);
                    } else {
                        unprefixedValues.push(v);
                    }
                });

                prefixedValues.sort();
                unprefixedValues.sort();

                return {
                    v: prefixedValues.concat(unprefixedValues).map(function (v) {
                        return [key, v];
                    })
                };
            })();

            if (typeof _ret === 'object') return _ret.v;
        }
        return [[key, value]];
    }));

    var rules = prefixedRules.map(function (_ref3) {
        var _ref32 = _slicedToArray(_ref3, 2);

        var key = _ref32[0];
        var value = _ref32[1];

        var stringValue = (0, _util.stringifyValue)(key, value);
        var ret = (0, _util.kebabifyStyleName)(key) + ':' + stringValue + ';';
        return useImportant === false ? ret : (0, _util.importantify)(ret);
    }).join("");

    if (rules) {
        return selector + '{' + rules + '}';
    } else {
        return "";
    }
};
exports.generateCSSRuleset = generateCSSRuleset;
},{"./util":77,"inline-style-prefixer/static":94}],75:[function(require,module,exports){
arguments[4][5][0].apply(exports,arguments)
},{"./exports":73,"./generate":74,"dup":5}],76:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _asap = require('asap');

var _asap2 = _interopRequireDefault(_asap);

var _generate = require('./generate');

var _util = require('./util');

// The current <style> tag we are inserting into, or null if we haven't
// inserted anything yet. We could find this each time using
// `document.querySelector("style[data-aphrodite"])`, but holding onto it is
// faster.
var styleTag = null;

// Inject a string of styles into a <style> tag in the head of the document. This
// will automatically create a style tag and then continue to use it for
// multiple injections. It will also use a style tag with the `data-aphrodite`
// tag on it if that exists in the DOM. This could be used for e.g. reusing the
// same style tag that server-side rendering inserts.
var injectStyleTag = function injectStyleTag(cssContents) {
    if (styleTag == null) {
        // Try to find a style tag with the `data-aphrodite` attribute first.
        styleTag = document.querySelector("style[data-aphrodite]");

        // If that doesn't work, generate a new style tag.
        if (styleTag == null) {
            // Taken from
            // http://stackoverflow.com/questions/524696/how-to-create-a-style-tag-with-javascript
            var head = document.head || document.getElementsByTagName('head')[0];
            styleTag = document.createElement('style');

            styleTag.type = 'text/css';
            styleTag.setAttribute("data-aphrodite", "");
            head.appendChild(styleTag);
        }
    }

    if (styleTag.styleSheet) {
        styleTag.styleSheet.cssText += cssContents;
    } else {
        styleTag.appendChild(document.createTextNode(cssContents));
    }
};

// Custom handlers for stringifying CSS values that have side effects
// (such as fontFamily, which can cause @font-face rules to be injected)
var stringHandlers = {
    // With fontFamily we look for objects that are passed in and interpret
    // them as @font-face rules that we need to inject. The value of fontFamily
    // can either be a string (as normal), an object (a single font face), or
    // an array of objects and strings.
    fontFamily: function fontFamily(val) {
        if (Array.isArray(val)) {
            return val.map(fontFamily).join(",");
        } else if (typeof val === "object") {
            injectStyleOnce(val.src, "@font-face", [val], false);
            return '"' + val.fontFamily + '"';
        } else {
            return val;
        }
    },

    // With animationName we look for an object that contains keyframes and
    // inject them as an `@keyframes` block, returning a uniquely generated
    // name. The keyframes object should look like
    //  animationName: {
    //    from: {
    //      left: 0,
    //      top: 0,
    //    },
    //    '50%': {
    //      left: 15,
    //      top: 5,
    //    },
    //    to: {
    //      left: 20,
    //      top: 20,
    //    }
    //  }
    // TODO(emily): `stringHandlers` doesn't let us rename the key, so I have
    // to use `animationName` here. Improve that so we can call this
    // `animation` instead of `animationName`.
    animationName: function animationName(val, selectorHandlers) {
        if (Array.isArray(val)) {
            return val.map(function (v) {
                return animationName(v, selectorHandlers);
            }).join(",");
        } else if (typeof val === "object") {
            // Generate a unique name based on the hash of the object. We can't
            // just use the hash because the name can't start with a number.
            // TODO(emily): this probably makes debugging hard, allow a custom
            // name?
            var _name = 'keyframe_' + (0, _util.hashObject)(val);

            // Since keyframes need 3 layers of nesting, we use `generateCSS` to
            // build the inner layers and wrap it in `@keyframes` ourselves.
            var finalVal = '@keyframes ' + _name + '{';
            Object.keys(val).forEach(function (key) {
                finalVal += (0, _generate.generateCSS)(key, [val[key]], selectorHandlers, stringHandlers, false);
            });
            finalVal += '}';

            injectGeneratedCSSOnce(_name, finalVal);

            return _name;
        } else {
            return val;
        }
    }
};

// This is a map from Aphrodite's generated class names to `true` (acting as a
// set of class names)
var alreadyInjected = {};

// This is the buffer of styles which have not yet been flushed.
var injectionBuffer = "";

// A flag to tell if we are already buffering styles. This could happen either
// because we scheduled a flush call already, so newly added styles will
// already be flushed, or because we are statically buffering on the server.
var isBuffering = false;

var injectGeneratedCSSOnce = function injectGeneratedCSSOnce(key, generatedCSS) {
    if (!alreadyInjected[key]) {
        if (!isBuffering) {
            // We should never be automatically buffering on the server (or any
            // place without a document), so guard against that.
            if (typeof document === "undefined") {
                throw new Error("Cannot automatically buffer without a document");
            }

            // If we're not already buffering, schedule a call to flush the
            // current styles.
            isBuffering = true;
            (0, _asap2['default'])(flushToStyleTag);
        }

        injectionBuffer += generatedCSS;
        alreadyInjected[key] = true;
    }
};

var injectStyleOnce = function injectStyleOnce(key, selector, definitions, useImportant, selectorHandlers) {
    if (!alreadyInjected[key]) {
        var generated = (0, _generate.generateCSS)(selector, definitions, selectorHandlers, stringHandlers, useImportant);

        injectGeneratedCSSOnce(key, generated);
    }
};

exports.injectStyleOnce = injectStyleOnce;
var reset = function reset() {
    injectionBuffer = "";
    alreadyInjected = {};
    isBuffering = false;
    styleTag = null;
};

exports.reset = reset;
var startBuffering = function startBuffering() {
    if (isBuffering) {
        throw new Error("Cannot buffer while already buffering");
    }
    isBuffering = true;
};

exports.startBuffering = startBuffering;
var flushToString = function flushToString() {
    isBuffering = false;
    var ret = injectionBuffer;
    injectionBuffer = "";
    return ret;
};

exports.flushToString = flushToString;
var flushToStyleTag = function flushToStyleTag() {
    var cssContent = flushToString();
    if (cssContent.length > 0) {
        injectStyleTag(cssContent);
    }
};

exports.flushToStyleTag = flushToStyleTag;
var getRenderedClassNames = function getRenderedClassNames() {
    return Object.keys(alreadyInjected);
};

exports.getRenderedClassNames = getRenderedClassNames;
var addRenderedClassNames = function addRenderedClassNames(classNames) {
    classNames.forEach(function (className) {
        alreadyInjected[className] = true;
    });
};

exports.addRenderedClassNames = addRenderedClassNames;
/**
 * Inject styles associated with the passed style definition objects, and return
 * an associated CSS class name.
 *
 * @param {boolean} useImportant If true, will append !important to generated
 *     CSS output. e.g. {color: red} -> "color: red !important".
 * @param {(Object|Object[])[]} styleDefinitions style definition objects, or
 *     arbitrarily nested arrays of them, as returned as properties of the
 *     return value of StyleSheet.create().
 */
var injectAndGetClassName = function injectAndGetClassName(useImportant, styleDefinitions, selectorHandlers) {
    styleDefinitions = (0, _util.flattenDeep)(styleDefinitions);

    // Filter out falsy values from the input, to allow for
    // `css(a, test && c)`
    var validDefinitions = styleDefinitions.filter(function (def) {
        return def;
    });

    // Break if there aren't any valid styles.
    if (validDefinitions.length === 0) {
        return "";
    }

    var className = validDefinitions.map(function (s) {
        return s._name;
    }).join("-o_O-");
    injectStyleOnce(className, '.' + className, validDefinitions.map(function (d) {
        return d._definition;
    }), useImportant, selectorHandlers);

    return className;
};
exports.injectAndGetClassName = injectAndGetClassName;
},{"./generate":74,"./util":77,"asap":10}],77:[function(require,module,exports){
// {K1: V1, K2: V2, ...} -> [[K1, V1], [K2, V2]]
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var objectToPairs = function objectToPairs(obj) {
    return Object.keys(obj).map(function (key) {
        return [key, obj[key]];
    });
};

exports.objectToPairs = objectToPairs;
// [[K1, V1], [K2, V2]] -> {K1: V1, K2: V2, ...}
var pairsToObject = function pairsToObject(pairs) {
    var result = {};
    pairs.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var key = _ref2[0];
        var val = _ref2[1];

        result[key] = val;
    });
    return result;
};

var mapObj = function mapObj(obj, fn) {
    return pairsToObject(objectToPairs(obj).map(fn));
};

exports.mapObj = mapObj;
// Flattens an array one level
// [[A], [B, C, [D]]] -> [A, B, C, [D]]
var flatten = function flatten(list) {
    return list.reduce(function (memo, x) {
        return memo.concat(x);
    }, []);
};

exports.flatten = flatten;
var flattenDeep = function flattenDeep(list) {
    return list.reduce(function (memo, x) {
        return memo.concat(Array.isArray(x) ? flattenDeep(x) : x);
    }, []);
};

exports.flattenDeep = flattenDeep;
var UPPERCASE_RE = /([A-Z])/g;
var MS_RE = /^ms-/;

var kebabify = function kebabify(string) {
    return string.replace(UPPERCASE_RE, '-$1').toLowerCase();
};
var kebabifyStyleName = function kebabifyStyleName(string) {
    return kebabify(string).replace(MS_RE, '-ms-');
};

exports.kebabifyStyleName = kebabifyStyleName;
var recursiveMerge = function recursiveMerge(a, b) {
    // TODO(jlfwong): Handle malformed input where a and b are not the same
    // type.

    if (typeof a !== 'object') {
        return b;
    }

    var ret = _extends({}, a);

    Object.keys(b).forEach(function (key) {
        if (ret.hasOwnProperty(key)) {
            ret[key] = recursiveMerge(a[key], b[key]);
        } else {
            ret[key] = b[key];
        }
    });

    return ret;
};

exports.recursiveMerge = recursiveMerge;
/**
 * CSS properties which accept numbers but are not in units of "px".
 * Taken from React's CSSProperty.js
 */
var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridColumn: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,

    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
};

/**
 * Taken from React's CSSProperty.js
 *
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 * Taken from React's CSSProperty.js
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
// Taken from React's CSSProperty.js
Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
});

var stringifyValue = function stringifyValue(key, prop) {
    if (typeof prop === "number") {
        if (isUnitlessNumber[key]) {
            return "" + prop;
        } else {
            return prop + "px";
        }
    } else {
        return prop;
    }
};

exports.stringifyValue = stringifyValue;
/**
 * JS Implementation of MurmurHash2
 *
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/murmurhash-js
 * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
 * @see http://sites.google.com/site/murmurhash/
 *
 * @param {string} str ASCII only
 * @return {string} Base 36 encoded hash result
 */
function murmurhash2_32_gc(str) {
    var l = str.length;
    var h = l;
    var i = 0;
    var k = undefined;

    while (l >= 4) {
        k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;

        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
        k ^= k >>> 24;
        k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);

        h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;

        l -= 4;
        ++i;
    }

    /* eslint-disable no-fallthrough */ // forgive existing code
    switch (l) {
        case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            h ^= str.charCodeAt(i) & 0xff;
            h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    }
    /* eslint-enable no-fallthrough */

    h ^= h >>> 13;
    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
    h ^= h >>> 15;

    return (h >>> 0).toString(36);
}

// Hash a javascript object using JSON.stringify. This is very fast, about 3
// microseconds on my computer for a sample object:
// http://jsperf.com/test-hashfnv32a-hash/5
//
// Note that this uses JSON.stringify to stringify the objects so in order for
// this to produce consistent hashes browsers need to have a consistent
// ordering of objects. Ben Alpert says that Facebook depends on this, so we
// can probably depend on this too.
var hashObject = function hashObject(object) {
    return murmurhash2_32_gc(JSON.stringify(object));
};

exports.hashObject = hashObject;
var IMPORTANT_RE = /^([^:]+:.*?)( !important)?;$/;

// Given a single style rule string like "a: b;", adds !important to generate
// "a: b !important;".
var importantify = function importantify(string) {
    return string.replace(IMPORTANT_RE, function (_, base) {
        return base + " !important;";
    });
};
exports.importantify = importantify;
},{}],78:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calc;

var _joinPrefixedValue = require('../../utils/joinPrefixedValue');

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

var _isPrefixedValue = require('../../utils/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function calc(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
    return (0, _joinPrefixedValue2.default)(property, value, function (prefix, value) {
      return value.replace(/calc\(/g, prefix + 'calc(');
    });
  }
}
module.exports = exports['default'];
},{"../../utils/isPrefixedValue":91,"../../utils/joinPrefixedValue":92}],79:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cursor;

var _joinPrefixedValue = require('../../utils/joinPrefixedValue');

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var values = {
  'zoom-in': true,
  'zoom-out': true,
  grab: true,
  grabbing: true
};

function cursor(property, value) {
  if (property === 'cursor' && values[value]) {
    return (0, _joinPrefixedValue2.default)(property, value);
  }
}
module.exports = exports['default'];
},{"../../utils/joinPrefixedValue":92}],80:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;
var values = { flex: true, 'inline-flex': true };

function flex(property, value) {
  if (property === 'display' && values[value]) {
    return {
      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
    };
  }
}
module.exports = exports['default'];
},{}],81:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxIE;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var alternativeValues = {
  'space-around': 'distribute',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end'
};
var alternativeProps = {
  alignContent: 'msFlexLinePack',
  alignSelf: 'msFlexItemAlign',
  alignItems: 'msFlexAlign',
  justifyContent: 'msFlexPack',
  order: 'msFlexOrder',
  flexGrow: 'msFlexPositive',
  flexShrink: 'msFlexNegative',
  flexBasis: 'msPreferredSize'
};

function flexboxIE(property, value) {
  if (alternativeProps[property]) {
    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
  }
}
module.exports = exports['default'];
},{}],82:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

function flexboxOld(property, value) {
  if (property === 'flexDirection' && typeof value === 'string') {
    return {
      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
    };
  }
  if (alternativeProps[property]) {
    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
  }
}
module.exports = exports['default'];
},{}],83:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _joinPrefixedValue = require('../../utils/joinPrefixedValue');

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

var _isPrefixedValue = require('../../utils/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.match(values) !== null) {
    return (0, _joinPrefixedValue2.default)(property, value);
  }
}
module.exports = exports['default'];
},{"../../utils/isPrefixedValue":91,"../../utils/joinPrefixedValue":92}],84:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;
function position(property, value) {
  if (property === 'position' && value === 'sticky') {
    return { position: ['-webkit-sticky', 'sticky'] };
  }
}
module.exports = exports['default'];
},{}],85:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;

var _joinPrefixedValue = require('../../utils/joinPrefixedValue');

var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(property, value) {
  if (properties[property] && values[value]) {
    return (0, _joinPrefixedValue2.default)(property, value);
  }
}
module.exports = exports['default'];
},{"../../utils/joinPrefixedValue":92}],86:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transition;

var _hyphenateStyleName = require('hyphenate-style-name');

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

var _capitalizeString = require('../../utils/capitalizeString');

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

var _isPrefixedValue = require('../../utils/isPrefixedValue');

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

var _prefixProps = require('../prefixProps');

var _prefixProps2 = _interopRequireDefault(_prefixProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var properties = {
  transition: true,
  transitionProperty: true,
  WebkitTransition: true,
  WebkitTransitionProperty: true
};

function transition(property, value) {
  // also check for already prefixed transitions
  if (typeof value === 'string' && properties[property]) {
    var _ref2;

    var outputValue = prefixValue(value);
    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
      return value.match(/-moz-|-ms-/) === null;
    }).join(',');

    // if the property is already prefixed
    if (property.indexOf('Webkit') > -1) {
      return _defineProperty({}, property, webkitOutput);
    }

    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _capitalizeString2.default)(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
  }
}

function prefixValue(value) {
  if ((0, _isPrefixedValue2.default)(value)) {
    return value;
  }

  // only split multi values, not cubic beziers
  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

  // iterate each single value and check for transitioned properties
  // that need to be prefixed as well
  multipleValues.forEach(function (val, index) {
    multipleValues[index] = Object.keys(_prefixProps2.default).reduce(function (out, prefix) {
      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';

      Object.keys(_prefixProps2.default[prefix]).forEach(function (prop) {
        var dashCaseProperty = (0, _hyphenateStyleName2.default)(prop);

        if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
          // join all prefixes and create a new value
          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
        }
      });
      return out;
    }, val);
  });

  return multipleValues.join(',');
}
module.exports = exports['default'];
},{"../../utils/capitalizeString":89,"../../utils/isPrefixedValue":91,"../prefixProps":88,"hyphenate-style-name":38}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixAll;

var _prefixProps = require('./prefixProps');

var _prefixProps2 = _interopRequireDefault(_prefixProps);

var _capitalizeString = require('../utils/capitalizeString');

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

var _sortPrefixedStyle = require('../utils/sortPrefixedStyle');

var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);

var _position = require('./plugins/position');

var _position2 = _interopRequireDefault(_position);

var _calc = require('./plugins/calc');

var _calc2 = _interopRequireDefault(_calc);

var _cursor = require('./plugins/cursor');

var _cursor2 = _interopRequireDefault(_cursor);

var _flex = require('./plugins/flex');

var _flex2 = _interopRequireDefault(_flex);

var _sizing = require('./plugins/sizing');

var _sizing2 = _interopRequireDefault(_sizing);

var _gradient = require('./plugins/gradient');

var _gradient2 = _interopRequireDefault(_gradient);

var _transition = require('./plugins/transition');

var _transition2 = _interopRequireDefault(_transition);

var _flexboxIE = require('./plugins/flexboxIE');

var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

var _flexboxOld = require('./plugins/flexboxOld');

var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// special flexbox specifications


var plugins = [_position2.default, _calc2.default, _cursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default, _flex2.default];

/**
 * Returns a prefixed version of the style object using all vendor prefixes
 * @param {Object} styles - Style object that gets prefixed properties added
 * @returns {Object} - Style object with prefixed properties and values
 */
function prefixAll(styles) {
  Object.keys(styles).forEach(function (property) {
    var value = styles[property];
    if (value instanceof Object && !Array.isArray(value)) {
      // recurse through nested style objects
      styles[property] = prefixAll(value);
    } else {
      Object.keys(_prefixProps2.default).forEach(function (prefix) {
        var properties = _prefixProps2.default[prefix];
        // add prefixes if needed
        if (properties[property]) {
          styles[prefix + (0, _capitalizeString2.default)(property)] = value;
        }
      });
    }
  });

  Object.keys(styles).forEach(function (property) {
    [].concat(styles[property]).forEach(function (value, index) {
      // resolve every special plugins
      plugins.forEach(function (plugin) {
        return assignStyles(styles, plugin(property, value));
      });
    });
  });

  return (0, _sortPrefixedStyle2.default)(styles);
}

function assignStyles(base) {
  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  Object.keys(extend).forEach(function (property) {
    var baseValue = base[property];
    if (Array.isArray(baseValue)) {
      [].concat(extend[property]).forEach(function (value) {
        var valueIndex = baseValue.indexOf(value);
        if (valueIndex > -1) {
          base[property].splice(valueIndex, 1);
        }
        base[property].push(value);
      });
    } else {
      base[property] = extend[property];
    }
  });
}
module.exports = exports['default'];
},{"../utils/capitalizeString":89,"../utils/sortPrefixedStyle":93,"./plugins/calc":78,"./plugins/cursor":79,"./plugins/flex":80,"./plugins/flexboxIE":81,"./plugins/flexboxOld":82,"./plugins/gradient":83,"./plugins/position":84,"./plugins/sizing":85,"./plugins/transition":86,"./prefixProps":88}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
module.exports = exports["default"];
},{}],89:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
// helper to capitalize strings

exports.default = function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

module.exports = exports["default"];
},{}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (property) {
  return property.match(/^(Webkit|Moz|O|ms)/) !== null;
};

module.exports = exports["default"];
},{}],91:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (value) {
  if (Array.isArray(value)) value = value.join(',');

  return value.match(/-webkit-|-moz-|-ms-/) !== null;
};

module.exports = exports['default'];
},{}],92:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// returns a style object with a single concated prefixed value string

exports.default = function (property, value) {
  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
    return prefix + value;
  } : arguments[2];
  return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
    return replacer(prefix, value);
  }));
};

module.exports = exports['default'];
},{}],93:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sortPrefixedStyle;

var _isPrefixedProperty = require('./isPrefixedProperty');

var _isPrefixedProperty2 = _interopRequireDefault(_isPrefixedProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sortPrefixedStyle(style) {
  return Object.keys(style).sort(function (left, right) {
    if ((0, _isPrefixedProperty2.default)(left) && !(0, _isPrefixedProperty2.default)(right)) {
      return -1;
    } else if (!(0, _isPrefixedProperty2.default)(left) && (0, _isPrefixedProperty2.default)(right)) {
      return 1;
    }
    return 0;
  }).reduce(function (sortedStyle, prop) {
    sortedStyle[prop] = style[prop];
    return sortedStyle;
  }, {});
}
module.exports = exports['default'];
},{"./isPrefixedProperty":90}],94:[function(require,module,exports){
module.exports = require('./lib/static/prefixAll')

},{"./lib/static/prefixAll":87}],95:[function(require,module,exports){
'use strict';

module.exports = require('./lib/ReactDOM');

},{"./lib/ReactDOM":125}],96:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;
},{}],97:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var focusNode = require('fbjs/lib/focusNode');

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactDOMComponentTree":128,"fbjs/lib/focusNode":24}],98:[function(require,module,exports){
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventPropagators":114,"./FallbackCompositionState":115,"./SyntheticCompositionEvent":179,"./SyntheticInputEvent":183,"fbjs/lib/ExecutionEnvironment":16}],99:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],100:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInstrumentation = require('./ReactInstrumentation');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))
},{"./CSSProperty":99,"./ReactInstrumentation":157,"./dangerousStyleValue":196,"_process":58,"fbjs/lib/ExecutionEnvironment":16,"fbjs/lib/camelizeStyleName":18,"fbjs/lib/hyphenateStyleName":29,"fbjs/lib/memoizeStringOnly":33,"fbjs/lib/warning":37}],101:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = require('./PooledClass');

var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
}).call(this,require('_process'))
},{"./PooledClass":119,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],102:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventPluginHub":111,"./EventPropagators":114,"./ReactDOMComponentTree":128,"./ReactUpdates":172,"./SyntheticEvent":181,"./getEventTarget":204,"./isEventSupported":211,"./isTextInputElement":212,"fbjs/lib/ExecutionEnvironment":16}],103:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMLazyTree = require('./DOMLazyTree');
var Danger = require('./Danger');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))
},{"./DOMLazyTree":104,"./Danger":108,"./ReactDOMComponentTree":128,"./ReactInstrumentation":157,"./createMicrosoftUnsafeLocalFunction":195,"./setInnerHTML":216,"./setTextContent":217,"_process":58}],104:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = require('./DOMNamespaces');
var setInnerHTML = require('./setInnerHTML');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setTextContent = require('./setTextContent');

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"./DOMNamespaces":105,"./createMicrosoftUnsafeLocalFunction":195,"./setInnerHTML":216,"./setTextContent":217}],105:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;
},{}],106:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],107:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))
},{"./DOMProperty":106,"./ReactDOMComponentTree":128,"./ReactInstrumentation":157,"./quoteAttributeValueForBrowser":213,"_process":58,"fbjs/lib/warning":37}],108:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;
}).call(this,require('_process'))
},{"./DOMLazyTree":104,"./reactProdInvariant":214,"_process":58,"fbjs/lib/ExecutionEnvironment":16,"fbjs/lib/createNodesFromMarkup":21,"fbjs/lib/emptyFunction":22,"fbjs/lib/invariant":30}],109:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;
},{}],110:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventPropagators":114,"./ReactDOMComponentTree":128,"./SyntheticMouseEvent":185}],111:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))
},{"./EventPluginRegistry":112,"./EventPluginUtils":113,"./ReactErrorUtils":148,"./accumulateInto":192,"./forEachAccumulated":200,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],112:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],113:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))
},{"./ReactErrorUtils":148,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],114:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var warning = require('fbjs/lib/warning');

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))
},{"./EventPluginHub":111,"./EventPluginUtils":113,"./accumulateInto":192,"./forEachAccumulated":200,"_process":58,"fbjs/lib/warning":37}],115:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./PooledClass":119,"./getTextContentAccessor":208,"object-assign":57}],116:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":106}],117:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],118:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypesSecret = require('./ReactPropTypesSecret');
var propTypesFactory = require('prop-types/factory');

var React = require('react/lib/React');
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))
},{"./ReactPropTypesSecret":165,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"prop-types/factory":60,"react/lib/React":223}],119:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],120:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ViewportMetrics = require('./ViewportMetrics');

var getVendorPrefixedEventName = require('./getVendorPrefixedEventName');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;
},{"./EventPluginRegistry":112,"./ReactEventEmitterMixin":149,"./ViewportMetrics":191,"./getVendorPrefixedEventName":209,"./isEventSupported":211,"object-assign":57}],121:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":117,"./ReactReconciler":167,"./instantiateReactComponent":210,"./shouldUpdateReactComponent":218,"./traverseAllChildren":219,"_process":58,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],122:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;
},{"./DOMChildrenOperations":103,"./ReactDOMIDOperations":132}],123:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],124:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var React = require('react/lib/React');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactErrorUtils = require('./ReactErrorUtils');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactNodeTypes = require('./ReactNodeTypes');
var ReactReconciler = require('./ReactReconciler');

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = require('./checkReactTypeSpec');
}

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shallowEqual = require('fbjs/lib/shallowEqual');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))
},{"./ReactComponentEnvironment":123,"./ReactErrorUtils":148,"./ReactInstanceMap":156,"./ReactInstrumentation":157,"./ReactNodeTypes":162,"./ReactReconciler":167,"./checkReactTypeSpec":194,"./reactProdInvariant":214,"./shouldUpdateReactComponent":218,"_process":58,"fbjs/lib/emptyObject":23,"fbjs/lib/invariant":30,"fbjs/lib/shallowEqual":36,"fbjs/lib/warning":37,"object-assign":57,"react/lib/React":223,"react/lib/ReactCurrentOwner":228}],125:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactMount = require('./ReactMount');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = require('./ReactInstrumentation');
  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":128,"./ReactDOMInvalidARIAHook":134,"./ReactDOMNullInputValuePropHook":135,"./ReactDOMUnknownPropertyHook":142,"./ReactDefaultInjection":145,"./ReactInstrumentation":157,"./ReactMount":160,"./ReactReconciler":167,"./ReactUpdates":172,"./ReactVersion":173,"./findDOMNode":198,"./getHostComponentFromComposite":205,"./renderSubtreeIntoContainer":215,"_process":58,"fbjs/lib/ExecutionEnvironment":16,"fbjs/lib/warning":37}],126:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMLazyTree = require('./DOMLazyTree');
var DOMNamespaces = require('./DOMNamespaces');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMultiChild = require('./ReactMultiChild');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');

var emptyFunction = require('fbjs/lib/emptyFunction');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))
},{"./AutoFocusUtils":97,"./CSSPropertyOperations":100,"./DOMLazyTree":104,"./DOMNamespaces":105,"./DOMProperty":106,"./DOMPropertyOperations":107,"./EventPluginHub":111,"./EventPluginRegistry":112,"./ReactBrowserEventEmitter":120,"./ReactDOMComponentFlags":127,"./ReactDOMComponentTree":128,"./ReactDOMInput":133,"./ReactDOMOption":136,"./ReactDOMSelect":137,"./ReactDOMTextarea":140,"./ReactInstrumentation":157,"./ReactMultiChild":161,"./ReactServerRenderingTransaction":169,"./escapeTextContentForBrowser":197,"./isEventSupported":211,"./reactProdInvariant":214,"./validateDOMNesting":220,"_process":58,"fbjs/lib/emptyFunction":22,"fbjs/lib/invariant":30,"fbjs/lib/shallowEqual":36,"fbjs/lib/warning":37,"object-assign":57}],127:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;
},{}],128:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');

var invariant = require('fbjs/lib/invariant');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
}).call(this,require('_process'))
},{"./DOMProperty":106,"./ReactDOMComponentFlags":127,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],129:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var validateDOMNesting = require('./validateDOMNesting');

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
}).call(this,require('_process'))
},{"./validateDOMNesting":220,"_process":58}],130:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;
},{"./DOMLazyTree":104,"./ReactDOMComponentTree":128,"object-assign":57}],131:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;
},{}],132:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;
},{"./DOMChildrenOperations":103,"./ReactDOMComponentTree":128}],133:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMPropertyOperations = require('./DOMPropertyOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        // eslint-disable-next-line
        if (value != valueAsNumber) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
        // eslint-disable-next-line
      } else if (value != node.value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))
},{"./DOMPropertyOperations":107,"./LinkedValueUtils":118,"./ReactDOMComponentTree":128,"./ReactUpdates":172,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"object-assign":57}],134:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
}).call(this,require('_process'))
},{"./DOMProperty":106,"_process":58,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],135:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
}).call(this,require('_process'))
},{"_process":58,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],136:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var React = require('react/lib/React');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMSelect = require('./ReactDOMSelect');

var warning = require('fbjs/lib/warning');
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":128,"./ReactDOMSelect":137,"_process":58,"fbjs/lib/warning":37,"object-assign":57,"react/lib/React":223}],137:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))
},{"./LinkedValueUtils":118,"./ReactDOMComponentTree":128,"./ReactUpdates":172,"_process":58,"fbjs/lib/warning":37,"object-assign":57}],138:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":207,"./getTextContentAccessor":208,"fbjs/lib/ExecutionEnvironment":16}],139:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))
},{"./DOMChildrenOperations":103,"./DOMLazyTree":104,"./ReactDOMComponentTree":128,"./escapeTextContentForBrowser":197,"./reactProdInvariant":214,"./validateDOMNesting":220,"_process":58,"fbjs/lib/invariant":30,"object-assign":57}],140:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))
},{"./LinkedValueUtils":118,"./ReactDOMComponentTree":128,"./ReactUpdates":172,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"object-assign":57}],141:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],142:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
}).call(this,require('_process'))
},{"./DOMProperty":106,"./EventPluginRegistry":112,"_process":58,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],143:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');
var ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var performanceNow = require('fbjs/lib/performanceNow');
var warning = require('fbjs/lib/warning');

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
}).call(this,require('_process'))
},{"./ReactHostOperationHistoryHook":153,"./ReactInvalidSetStateWarningHook":158,"_process":58,"fbjs/lib/ExecutionEnvironment":16,"fbjs/lib/performanceNow":35,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],144:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./ReactUpdates":172,"./Transaction":190,"fbjs/lib/emptyFunction":22,"object-assign":57}],145:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = require('./ARIADOMPropertyConfig');
var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');
var ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');
var SelectEventPlugin = require('./SelectEventPlugin');
var SimpleEventPlugin = require('./SimpleEventPlugin');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};
},{"./ARIADOMPropertyConfig":96,"./BeforeInputEventPlugin":98,"./ChangeEventPlugin":102,"./DefaultEventPluginOrder":109,"./EnterLeaveEventPlugin":110,"./HTMLDOMPropertyConfig":116,"./ReactComponentBrowserEnvironment":122,"./ReactDOMComponent":126,"./ReactDOMComponentTree":128,"./ReactDOMEmptyComponent":130,"./ReactDOMTextComponent":139,"./ReactDOMTreeTraversal":141,"./ReactDefaultBatchingStrategy":144,"./ReactEventListener":150,"./ReactInjection":154,"./ReactReconcileTransaction":166,"./SVGDOMPropertyConfig":174,"./SelectEventPlugin":175,"./SimpleEventPlugin":176}],146:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],147:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],148:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))
},{"_process":58}],149:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":111}],150:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./PooledClass":119,"./ReactDOMComponentTree":128,"./ReactUpdates":172,"./getEventTarget":204,"fbjs/lib/EventListener":15,"fbjs/lib/ExecutionEnvironment":16,"fbjs/lib/getUnboundedScrollPosition":27,"object-assign":57}],151:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
},{}],152:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],153:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
},{}],154:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactHostComponent = require('./ReactHostComponent');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":106,"./EventPluginHub":111,"./EventPluginUtils":113,"./ReactBrowserEventEmitter":120,"./ReactComponentEnvironment":123,"./ReactEmptyComponent":147,"./ReactHostComponent":152,"./ReactUpdates":172}],155:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":138,"fbjs/lib/containsNode":19,"fbjs/lib/focusNode":24,"fbjs/lib/getActiveElement":25}],156:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],157:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = require('./ReactDebugTool');
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
}).call(this,require('_process'))
},{"./ReactDebugTool":143,"_process":58}],158:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var warning = require('fbjs/lib/warning');

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
}).call(this,require('_process'))
},{"_process":58,"fbjs/lib/warning":37}],159:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":193}],160:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var DOMProperty = require('./DOMProperty');
var React = require('react/lib/React');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMContainerInfo = require('./ReactDOMContainerInfo');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
}).call(this,require('_process'))
},{"./DOMLazyTree":104,"./DOMProperty":106,"./ReactBrowserEventEmitter":120,"./ReactDOMComponentTree":128,"./ReactDOMContainerInfo":129,"./ReactDOMFeatureFlags":131,"./ReactFeatureFlags":151,"./ReactInstanceMap":156,"./ReactInstrumentation":157,"./ReactMarkupChecksum":159,"./ReactReconciler":167,"./ReactUpdateQueue":171,"./ReactUpdates":172,"./instantiateReactComponent":210,"./reactProdInvariant":214,"./setInnerHTML":216,"./shouldUpdateReactComponent":218,"_process":58,"fbjs/lib/emptyObject":23,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"react/lib/React":223,"react/lib/ReactCurrentOwner":228}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var emptyFunction = require('fbjs/lib/emptyFunction');
var flattenChildren = require('./flattenChildren');
var invariant = require('fbjs/lib/invariant');

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))
},{"./ReactChildReconciler":121,"./ReactComponentEnvironment":123,"./ReactInstanceMap":156,"./ReactInstrumentation":157,"./ReactReconciler":167,"./flattenChildren":199,"./reactProdInvariant":214,"_process":58,"fbjs/lib/emptyFunction":22,"fbjs/lib/invariant":30,"react/lib/ReactCurrentOwner":228}],162:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var React = require('react/lib/React');

var invariant = require('fbjs/lib/invariant');

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"react/lib/React":223}],163:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],164:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))
},{"_process":58}],165:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],166:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactInputSelection = require('./ReactInputSelection');
var ReactInstrumentation = require('./ReactInstrumentation');
var Transaction = require('./Transaction');
var ReactUpdateQueue = require('./ReactUpdateQueue');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
}).call(this,require('_process'))
},{"./CallbackQueue":101,"./PooledClass":119,"./ReactBrowserEventEmitter":120,"./ReactInputSelection":155,"./ReactInstrumentation":157,"./ReactUpdateQueue":171,"./Transaction":190,"_process":58,"object-assign":57}],167:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactRef = require('./ReactRef');
var ReactInstrumentation = require('./ReactInstrumentation');

var warning = require('fbjs/lib/warning');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
}).call(this,require('_process'))
},{"./ReactInstrumentation":157,"./ReactRef":168,"_process":58,"fbjs/lib/warning":37}],168:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":163}],169:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');
var Transaction = require('./Transaction');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactServerUpdateQueue = require('./ReactServerUpdateQueue');

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
}).call(this,require('_process'))
},{"./PooledClass":119,"./ReactInstrumentation":157,"./ReactServerUpdateQueue":170,"./Transaction":190,"_process":58,"object-assign":57}],170:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = require('./ReactUpdateQueue');

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
}).call(this,require('_process'))
},{"./ReactUpdateQueue":171,"_process":58,"fbjs/lib/warning":37}],171:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))
},{"./ReactInstanceMap":156,"./ReactInstrumentation":157,"./ReactUpdates":172,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"react/lib/ReactCurrentOwner":228}],172:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))
},{"./CallbackQueue":101,"./PooledClass":119,"./ReactFeatureFlags":151,"./ReactReconciler":167,"./Transaction":190,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"object-assign":57}],173:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

module.exports = '15.5.4';
},{}],174:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;
},{}],175:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var shallowEqual = require('fbjs/lib/shallowEqual');

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventPropagators":114,"./ReactDOMComponentTree":128,"./ReactInputSelection":155,"./SyntheticEvent":181,"./isTextInputElement":212,"fbjs/lib/ExecutionEnvironment":16,"fbjs/lib/getActiveElement":25,"fbjs/lib/shallowEqual":36}],176:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticAnimationEvent = require('./SyntheticAnimationEvent');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticTransitionEvent = require('./SyntheticTransitionEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))
},{"./EventPropagators":114,"./ReactDOMComponentTree":128,"./SyntheticAnimationEvent":177,"./SyntheticClipboardEvent":178,"./SyntheticDragEvent":180,"./SyntheticEvent":181,"./SyntheticFocusEvent":182,"./SyntheticKeyboardEvent":184,"./SyntheticMouseEvent":185,"./SyntheticTouchEvent":186,"./SyntheticTransitionEvent":187,"./SyntheticUIEvent":188,"./SyntheticWheelEvent":189,"./getEventCharCode":201,"./reactProdInvariant":214,"_process":58,"fbjs/lib/EventListener":15,"fbjs/lib/emptyFunction":22,"fbjs/lib/invariant":30}],177:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;
},{"./SyntheticEvent":181}],178:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":181}],179:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":181}],180:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":185}],181:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
}).call(this,require('_process'))
},{"./PooledClass":119,"_process":58,"fbjs/lib/emptyFunction":22,"fbjs/lib/warning":37,"object-assign":57}],182:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":188}],183:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":181}],184:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":188,"./getEventCharCode":201,"./getEventKey":202,"./getEventModifierState":203}],185:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":188,"./ViewportMetrics":191,"./getEventModifierState":203}],186:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":188,"./getEventModifierState":203}],187:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;
},{"./SyntheticEvent":181}],188:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":181,"./getEventTarget":204}],189:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":185}],190:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],191:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],192:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))
},{"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30}],193:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],194:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactPropTypeLocationNames":164,"./ReactPropTypesSecret":165,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],195:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */

'use strict';

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;
},{}],196:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var warning = require('fbjs/lib/warning');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
}).call(this,require('_process'))
},{"./CSSProperty":99,"_process":58,"fbjs/lib/warning":37}],197:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

'use strict';

// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;
},{}],198:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstanceMap = require('./ReactInstanceMap');

var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":128,"./ReactInstanceMap":156,"./getHostComponentFromComposite":205,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"react/lib/ReactCurrentOwner":228}],199:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var KeyEscapeUtils = require('./KeyEscapeUtils');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":117,"./traverseAllChildren":219,"_process":58,"fbjs/lib/warning":37,"react/lib/ReactComponentTreeHook":227}],200:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
},{}],201:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],202:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":201}],203:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],204:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],205:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactNodeTypes = require('./ReactNodeTypes');

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;
},{"./ReactNodeTypes":162}],206:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],207:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],208:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":16}],209:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;
},{"fbjs/lib/ExecutionEnvironment":16}],210:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactHostComponent = require('./ReactHostComponent');

var getNextDebugID = require('react/lib/getNextDebugID');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
}).call(this,require('_process'))
},{"./ReactCompositeComponent":124,"./ReactEmptyComponent":147,"./ReactHostComponent":152,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"object-assign":57,"react/lib/getNextDebugID":242}],211:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":16}],212:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;
},{}],213:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":197}],214:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],215:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":160}],216:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var DOMNamespaces = require('./DOMNamespaces');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;
},{"./DOMNamespaces":105,"./createMicrosoftUnsafeLocalFunction":195,"fbjs/lib/ExecutionEnvironment":16}],217:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":197,"./setInnerHTML":216,"fbjs/lib/ExecutionEnvironment":16}],218:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
},{}],219:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":117,"./ReactElementSymbol":146,"./getIteratorFn":206,"./reactProdInvariant":214,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"react/lib/ReactCurrentOwner":228}],220:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))
},{"_process":58,"fbjs/lib/emptyFunction":22,"fbjs/lib/warning":37,"object-assign":57}],221:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"dup":117}],222:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"./reactProdInvariant":244,"_process":58,"dup":119,"fbjs/lib/invariant":30}],223:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactPureComponent = require('./ReactPureComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var onlyChild = require('./onlyChild');
var warning = require('fbjs/lib/warning');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var canDefineProperty = require('./canDefineProperty');
  var ReactElementValidator = require('./ReactElementValidator');
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

// TODO: Fix tests so that this deprecation warning doesn't cause failures.
if (process.env.NODE_ENV !== 'production') {
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });
  }
}

module.exports = React;
}).call(this,require('_process'))
},{"./ReactChildren":224,"./ReactClass":225,"./ReactComponent":226,"./ReactDOMFactories":229,"./ReactElement":230,"./ReactElementValidator":232,"./ReactPropTypes":235,"./ReactPureComponent":237,"./ReactVersion":238,"./canDefineProperty":239,"./onlyChild":243,"_process":58,"fbjs/lib/warning":37,"object-assign":57}],224:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":222,"./ReactElement":230,"./traverseAllChildren":245,"fbjs/lib/emptyFunction":22}],225:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

var didWarnDeprecated = false;

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
      didWarnDeprecated = true;
    }

    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))
},{"./ReactComponent":226,"./ReactElement":230,"./ReactNoopUpdateQueue":233,"./ReactPropTypeLocationNames":234,"./reactProdInvariant":244,"_process":58,"fbjs/lib/emptyObject":23,"fbjs/lib/invariant":30,"fbjs/lib/warning":37,"object-assign":57}],226:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))
},{"./ReactNoopUpdateQueue":233,"./canDefineProperty":239,"./reactProdInvariant":244,"_process":58,"fbjs/lib/emptyObject":23,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],227:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":228,"./reactProdInvariant":244,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],228:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],229:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactElement = require('./ReactElement');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
}).call(this,require('_process'))
},{"./ReactElement":230,"./ReactElementValidator":232,"_process":58}],230:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var warning = require('fbjs/lib/warning');
var canDefineProperty = require('./canDefineProperty');
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":228,"./ReactElementSymbol":231,"./canDefineProperty":239,"_process":58,"fbjs/lib/warning":37,"object-assign":57}],231:[function(require,module,exports){
arguments[4][146][0].apply(exports,arguments)
},{"dup":146}],232:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactComponentTreeHook = require('./ReactComponentTreeHook');
var ReactElement = require('./ReactElement');

var checkReactTypeSpec = require('./checkReactTypeSpec');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":227,"./ReactCurrentOwner":228,"./ReactElement":230,"./canDefineProperty":239,"./checkReactTypeSpec":240,"./getIteratorFn":241,"_process":58,"fbjs/lib/warning":37}],233:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))
},{"_process":58,"fbjs/lib/warning":37}],234:[function(require,module,exports){
arguments[4][164][0].apply(exports,arguments)
},{"_process":58,"dup":164}],235:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _require = require('./ReactElement'),
    isValidElement = _require.isValidElement;

var factory = require('prop-types/factory');

module.exports = factory(isValidElement);
},{"./ReactElement":230,"prop-types/factory":60}],236:[function(require,module,exports){
arguments[4][165][0].apply(exports,arguments)
},{"dup":165}],237:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactComponent = require('./ReactComponent');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var emptyObject = require('fbjs/lib/emptyObject');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;
},{"./ReactComponent":226,"./ReactNoopUpdateQueue":233,"fbjs/lib/emptyObject":23,"object-assign":57}],238:[function(require,module,exports){
arguments[4][173][0].apply(exports,arguments)
},{"dup":173}],239:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))
},{"_process":58}],240:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('./ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('./ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":227,"./ReactPropTypeLocationNames":234,"./ReactPropTypesSecret":236,"./reactProdInvariant":244,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],241:[function(require,module,exports){
arguments[4][206][0].apply(exports,arguments)
},{"dup":206}],242:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;
},{}],243:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))
},{"./ReactElement":230,"./reactProdInvariant":244,"_process":58,"fbjs/lib/invariant":30}],244:[function(require,module,exports){
arguments[4][214][0].apply(exports,arguments)
},{"dup":214}],245:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":221,"./ReactCurrentOwner":228,"./ReactElementSymbol":231,"./getIteratorFn":241,"./reactProdInvariant":244,"_process":58,"fbjs/lib/invariant":30,"fbjs/lib/warning":37}],246:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":223}],247:[function(require,module,exports){
"use strict";

function hash(str) {
  var hash = 5381,
      i    = str.length;

  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }

  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
   * integers. Since we want the results to be always positive, convert the
   * signed int to an unsigned by doing an unsigned bitshift. */
  return hash >>> 0;
}

module.exports = hash;

},{}],248:[function(require,module,exports){
/* This note applies to rcss, react, and underscore.
 *
 * We're faking a node module for this package by just exporting the global.
 * There are a few complications which led us to this solution as a temporary
 * fix.
 *
 * - Browserify can slow down a lot when you include the other packages (and
 *   their dependency graphs). We were also battling general browserify
 *   slowness at this time - browserify 3.4.0 is "good" but later versions
 *   (3.53 if I remember correctly) are terribly slow (on the order of 20x
 *   slower).
 *
 * - I'm not clear on the details of packaging this so we don't duplicate
 *   dependencies anywhere. For instance when packaging perseus for webapp we
 *   need to be careful not to include packages like underscore from our
 *   dependencies or from the packages we depend on. (note: this is a very good
 *   opportunity to either explain how existing tools solve the problem or
 *   create a new tool to solve it)
 *
 * - Joel (and Jack)
 */
module.exports = window._;

},{}],249:[function(require,module,exports){
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Widgets = require("./widgets.js");

_.each([require("./widgets/categorizer.jsx"), require("./widgets/dropdown.jsx"), require("./widgets/example-graphie-widget.jsx"), [require("./widgets/explanation.jsx"), require("./widgets/explanation-editor.jsx")], require("./widgets/expression.jsx"), require("./widgets/iframe.jsx"), require("./widgets/image.jsx"), require("./widgets/input-number.jsx"), require("./widgets/interactive-graph.jsx"), require("./widgets/interactive-number-line.jsx"), require("./widgets/lights-puzzle.jsx"), require("./widgets/matcher.jsx"), require("./widgets/matrix.jsx"), require("./widgets/measurer.jsx"), [require("./widgets/molecule.jsx"), require("./widgets/molecule-editor.jsx")], require("./widgets/number-line.jsx"), require("./widgets/numeric-input.jsx"), require("./widgets/orderer.jsx"), require("./widgets/plotter.jsx"), require("./widgets/radio.jsx"), [require("./widgets/reaction-diagram.jsx"), require("./widgets/reaction-diagram-editor.jsx")], require("./widgets/sorter.jsx"), require("./widgets/table.jsx"), require("./widgets/transformer.jsx"), require("./widgets/speaking-text-input.jsx"), require("./widgets/speaking-voice.jsx")], function (_widget) {
    if (Array.isArray(_widget)) {
        var _widget2 = _slicedToArray(_widget, 2),
            _widget2$ = _widget2[0],
            name = _widget2$.name,
            widget = _objectWithoutProperties(_widget2$, ["name"]),
            editor = _widget2[1];
    } else {
        var name = _widget.name,
            editor = _widget.editor,
            widget = _objectWithoutProperties(_widget, ["name", "editor"]);
    }
    Widgets.register(name, widget, editor);
});

},{"./widgets.js":306,"./widgets/categorizer.jsx":307,"./widgets/dropdown.jsx":308,"./widgets/example-graphie-widget.jsx":309,"./widgets/explanation-editor.jsx":310,"./widgets/explanation.jsx":311,"./widgets/expression.jsx":312,"./widgets/iframe.jsx":313,"./widgets/image.jsx":314,"./widgets/input-number.jsx":315,"./widgets/interactive-graph.jsx":316,"./widgets/interactive-number-line.jsx":317,"./widgets/lights-puzzle.jsx":318,"./widgets/matcher.jsx":319,"./widgets/matrix.jsx":320,"./widgets/measurer.jsx":321,"./widgets/molecule-editor.jsx":322,"./widgets/molecule.jsx":323,"./widgets/number-line.jsx":327,"./widgets/numeric-input.jsx":328,"./widgets/orderer.jsx":329,"./widgets/plotter.jsx":330,"./widgets/radio.jsx":331,"./widgets/reaction-diagram-editor.jsx":332,"./widgets/reaction-diagram.jsx":333,"./widgets/sorter.jsx":334,"./widgets/speaking-text-input.jsx":335,"./widgets/speaking-voice.jsx":336,"./widgets/table.jsx":337,"./widgets/transformer.jsx":338}],250:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Editor = require("./editor.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var Widgets = require("./widgets.js");

var WidgetsInAnswerAreaEditor = ['Image'];

var AnswerAreaEditor = React.createClass({
    displayName: "AnswerAreaEditor",

    getDefaultProps: function getDefaultProps() {
        return {
            type: "multiple",
            options: {},
            calculator: false
        };
    },

    getInitialState: function getInitialState() {
        return { showSolutionArea: this.props.type === "radio" || this.props.type === "input-number" };
    },

    render: function render() {
        var _this = this;

        var Editor2;
        if (this.props.type === "multiple") {
            Editor2 = Editor;
        } else {
            Editor2 = Widgets.getEditor(this.props.type);
        }

        var editor = React.createElement(Editor2, _extends({
            ref: "editor",
            placeholder: "This answer area is being deprecated. " + "Please use the widgets in the question area for your answer.",
            onChange: function onChange(newProps, cb) {
                var options = _.extend({}, _this.props.options, newProps);
                _this.props.onChange({ options: options }, cb);
            }
        }, this.props.options));

        return React.createElement(
            "div",
            { className: "perseus-answer-editor" },
            React.createElement(
                "div",
                { className: "perseus-answer-options" },
                this.state.showSolutionArea && React.createElement(
                    "div",
                    { className: Editor2 !== Editor ? "perseus-answer-widget" : "" },
                    editor
                )
            )
        );
    },

    getEditorInAnswerArea: function getEditorInAnswerArea() {
        if (this.refs !== undefined) {
            return this.refs.editor;
        } else {
            return undefined;
        }
    },

    toJSON: function toJSON(skipValidation) {
        // Could be just _.pick(this.props, "type", "options"); but validation!
        var editor = this.getEditorInAnswerArea();
        return {
            type: this.props.type,
            options: editor !== undefined ? this.refs.editor.toJSON(skipValidation) : {},
            calculator: this.props.calculator
        };
    }
});

module.exports = AnswerAreaEditor;

},{"./editor.jsx":275,"./widgets.js":306,"react":246,"react-components/js/info-tip.jsx":68}],251:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require('react-dom');

var Renderer = require("./renderer.jsx");
var QuestionParagraph = require("./question-paragraph.jsx");
var WidgetContainer = require("./widget-container.jsx");
var Widgets = require("./widgets.js");

var Util = require("./util.js");
var EnabledFeatures = require("./enabled-features.jsx");
var ApiOptions = require("./perseus-api.jsx").Options;

var SINGLE_ITEM_WIDGET_ID = "answer-area";
var PT = React.PropTypes;

var AnswerAreaRenderer = React.createClass({
    displayName: 'AnswerAreaRenderer',

    propTypes: {
        type: PT.string,
        options: PT.object,
        calculator: PT.bool,
        problemNum: PT.number,
        onInteractWithWidget: PT.func.isRequired,
        enabledFeatures: EnabledFeatures.propTypes,
        highlightedWidgets: PT.array.isRequired,
        apiOptions: ApiOptions.propTypes
    },

    getInitialState: function getInitialState() {
        // TODO(alpert): Move up to parent props?
        return {
            widget: {},
            cls: this.getClass(this.props.type)
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ cls: this.getClass(nextProps.type) });
    },

    getClass: function getClass(type) {
        if (type === "multiple") {
            return Renderer;
        } else {
            return Widgets.getWidget(type, this.props.enabledFeatures);
        }
    },

    render: function render() {
        if (this.props.type === "multiple") {
            return this.renderMultiple();
        } else {
            return this.renderSingle();
        }
    },

    emptyWidgets: function emptyWidgets() {
        if (this.props.type === "multiple") {
            return this.refs.widget.emptyWidgets();
        } else {
            return Util.scoreIsEmpty(this.getWidgetInstance().simpleValidate(this.props.options)) ? [SINGLE_ITEM_WIDGET_ID] : [];
        }
    },

    // Gets a focus object fixed up with an "answer-" prefix for
    // onFocusChange when type === "multiple"
    _getAnswerAreaFocusObj: function _getAnswerAreaFocusObj(rendererFocusObj) {
        if (rendererFocusObj.path == null) {
            return rendererFocusObj;
        }
        // TODO(jack): make "answer" the first element of the prefix
        // array, rather than modifying the widgetId, once we have
        // expunged widgetIds from the rest of the api calls in
        // favor of focus paths
        var answerPath = ["answer-" + rendererFocusObj.path[0]];
        answerPath = answerPath.concat(_.rest(rendererFocusObj.path));
        return {
            path: answerPath,
            element: rendererFocusObj.element
        };
    },

    renderMultiple: function renderMultiple() {
        var _arguments = arguments,
            _this = this;

        var parentInterceptInputFocus = this.props.apiOptions.interceptInputFocus;
        var parentOnFocusChange = this.props.apiOptions.onFocusChange;

        var apiOptions = _.extend({}, ApiOptions.defaults, this.props.apiOptions, parentInterceptInputFocus && {
            // Rewrite widgetIds sent to interceptInputFocus on the way
            // up to include an "answer-" prefix
            interceptInputFocus: function interceptInputFocus(widgetId) {
                var args = _.toArray(_arguments);
                var fullWidgetId = "answer-" + widgetId;
                args[0] = fullWidgetId;
                return parentInterceptInputFocus.apply(null, args);
            }
        }, parentOnFocusChange && {
            onFocusChange: function onFocusChange(newFocus, oldFocus) {
                // If we have an apiOptions.onFocusChange, call
                // it with an "answer-" prefix on our widget id
                parentOnFocusChange(_this._getAnswerAreaFocusObj(newFocus), _this._getAnswerAreaFocusObj(oldFocus));
            }
        });

        return React.createElement(this.state.cls, _extends({
            ref: 'widget',
            problemNum: this.props.problemNum,
            onChange: this.handleChangeRenderer,
            onInteractWithWidget: this.props.onInteractWithWidget,
            highlightedWidgets: this.props.highlightedWidgets,
            enabledFeatures: _extends({}, this.props.enabledFeatures, {
                // Hide answer area tooltip formats,
                // the "Acceptable formats" box already works
                toolTipFormats: false
            }),
            apiOptions: apiOptions
        }, this.props.options, this.state.widget));
    },

    renderSingle: function renderSingle() {
        var shouldHighlight = _.contains(this.props.highlightedWidgets, SINGLE_ITEM_WIDGET_ID);
        return React.createElement(
            QuestionParagraph,
            null,
            React.createElement(WidgetContainer, {
                ref: 'widget',
                key: this.props.type,
                type: this.state.cls,
                initialProps: this.getSingleWidgetProps(),
                shouldHighlight: shouldHighlight })
        );
    },

    getSingleWidgetProps: function getSingleWidgetProps() {
        var _this2 = this;

        var editorProps = this.props.options;
        var transform = Widgets.getTransform(this.props.type);
        var apiOptions = _.extend({}, ApiOptions.defaults, this.props.apiOptions);

        // Pass onFocus/onBlur handlers to each widget, so they
        // can trigger `onFocusChange`s if/when those happen.
        // Since we're just a single widget, any focusing has
        // to be from nothing (path: null), and any blurring has
        // to be to nothing. Our parent ItemRenderer will handle
        // connecting the dots between these events and any
        // focusing/blurring between elements in the question
        // area to combine this event with those into a single
        // onChangeFocus at the ItemRenderer level.
        var onFocus = function onFocus(path, elem) {
            _this2._isFocused = true;
            apiOptions.onFocusChange({
                path: [SINGLE_ITEM_WIDGET_ID].concat(path),
                element: elem || _this2.refs.widget
            }, {
                // we're pretending we're a renderer, so if we got
                // focus, we must not have had it before
                path: null,
                element: null
            });
        };
        var onBlur = function onBlur(path, elem) {
            _this2._isFocused = false;
            apiOptions.onFocusChange({
                path: null,
                element: null
            }, {
                path: [SINGLE_ITEM_WIDGET_ID].concat(path),
                element: elem || _this2.refs.widget
            });
        };

        return _.extend({
            widgetId: SINGLE_ITEM_WIDGET_ID,
            problemNum: this.props.problemNum,
            onChange: this.handleChangeRenderer,
            enabledFeatures: _.extend({}, this.props.enabledFeatures, {
                // Hide answer area tooltip formats,
                // the "Acceptable formats" box already works
                toolTipFormats: false
            }),
            apiOptions: apiOptions,
            onFocus: onFocus,
            onBlur: onBlur
        }, transform(editorProps), this.state.widget);
    },

    _setWidgetProps: function _setWidgetProps(widgetId, newProps, cb) {
        // "area" -> global id "answer-area" ;)
        if (widgetId === "area" && this.props.type !== "multiple") {
            // We have a single widget
            this.handleChangeRenderer(newProps, cb);
        } else if (this.props.type === "multiple") {
            // We have a `Renderer`
            this.refs.widget._setWidgetProps(widgetId, newProps, cb);
        } else if (typeof console !== "undefined" && console.error) {
            // We have a widget id other than area in a non-renderer area
            console.error("Sent invalid widget id `answer-" + widgetId + "` to an answerArea of type `" + this.props.type + "`.");
        }
    },

    handleChangeRenderer: function handleChangeRenderer(newProps, cb) {
        var _this3 = this;

        var widget = _.extend({}, this.state.widget, newProps);
        this.setState({ widget: widget }, function () {
            if (_this3.props.type !== "multiple") {
                var cbResult = cb && cb();
                _this3.props.onInteractWithWidget(SINGLE_ITEM_WIDGET_ID);
                // If we're not type === "multiple", send an onFocusChange
                // event to focus to this widget if we aren't already focused.
                // For type "multiple" these events are handled in the
                // multiple's Renderer

                if (cbResult !== false && _this3.props.apiOptions.onFocusChange && !_this3._isFocused) {
                    _this3._isFocused = true;
                    _this3.props.apiOptions.onFocusChange({
                        path: [SINGLE_ITEM_WIDGET_ID],
                        // TODO(jack): Make this less hacky (call some magic
                        // getElement function or something):
                        element: _this3.refs.widget
                    }, {
                        // we're pretending we're a renderer, so if we got
                        // focus, we must not have had it before
                        path: null,
                        element: null
                    });
                }
            }
        });
    },

    componentDidMount: function componentDidMount() {
        // Storing things directly on components should be avoided!
        this.examples = [];
        this.$examples = $("<div id='examples'></div>");
        this._isFocused = false;

        this.update();
    },

    componentDidUpdate: function componentDidUpdate() {
        this.update();
    },

    update: function update() {
        $("#calculator").toggle(this.props.calculator);

        var widget = this.refs.widget;
        var examples = widget.examples ? widget.examples() : null;

        if (_.isEqual(examples, this.examples)) {
            // Only destroy (and maybe recreate) qtip if examples have changed
            return;
        }

        this.examples = examples;

        $("#examples-show").hide();
        if ($("#examples-show").data("qtip")) {
            // This will warn about Jquery removing a node owned by React,
            // however React no longer owns that node. We created that node
            // using React, copied its html, passed it to qtip, and then
            // unmounted it from React. So it React thinks it is it's code
            // because it has a data-reactid, but qtip created it.
            $("#examples-show").qtip("destroy", /* immediate */true);
        }

        if (examples && $("#examples-show").length) {
            $("#examples-show").append(this.$examples);

            var content = _.map(examples, function (example) {
                return "- " + example;
            }).join("\n");

            ReactDOM.render(React.createElement(Renderer, content), this.$examples[0]);

            $("#examples-show").qtip({
                content: {
                    text: this.$examples.html()
                },
                style: { classes: "qtip-light leaf-tooltip" },
                position: {
                    my: "center right",
                    at: "center left"
                },
                show: {
                    delay: 200,
                    effect: {
                        length: 0
                    }
                },
                hide: { delay: 0 }
            });

            // Now that qtip has been created with a copy of the react
            // component's html, we no longer need to keep the react component.
            React.unmountComponentAtNode(this.$examples[0]);
            this.$examples.remove();

            $("#examples-show").show();
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        if (this.props.calculator) {
            $("#calculator").hide();
        }
        if (this.state.cls.examples && $("#examples-show").length) {
            $("#examples-show").hide();
            React.unmountComponentAtNode(document.getElementById("examples"));
        }
    },

    focus: function focus() {
        this.refs.widget.focus();
    },

    getWidgetInstance: function getWidgetInstance() {
        var ref = this.refs.widget;
        if (!ref) {
            return null;
        }
        return ref.getWidget();
    },

    showGuess: function showGuess(answerData) {
        if (!answerData) return;
        if (answerData instanceof Array) {
            // Answer area contains no widgets.
        } else if (this.refs.widget.setAnswerFromJSON === undefined) {
            // Target widget cannot show answer.
            console.log("Target widget cannot show in answerarea", answerData);
            return 'no setAnswerFromJSON implemented for widgets in answer area.';
        } else {
            console.log("Target widget show in answerarea");
            // Just show the given answer.
            this.refs.widget.setAnswerFromJSON(answerData);
        }
    },

    canShowAllHistoryWidgets: function canShowAllHistoryWidgets(answerData) {
        if (!answerData) return true;
        if (this.refs.widget.setAnswerFromJSON === undefined) {
            console.log('no setAnswerFromJSON implemented for widgets in answer area.');
            return false;
        }
        return true;
    },

    guessAndScore: function guessAndScore() {
        // TODO(alpert): These should probably have the same signature...
        if (this.props.type === "multiple") {
            return this.refs.widget.guessAndScore();
        } else {
            var guess = this.getWidgetInstance().toJSON();

            var score;
            if (this.props.graded == null || this.props.graded) {
                // props.graded is unset or true
                // TODO(alpert): Separate out the rubric
                score = this.getWidgetInstance().simpleValidate(this.props.options);
            } else {
                score = Util.noScore;
            }

            return [guess, score];
        }
    }
});

module.exports = AnswerAreaRenderer;

},{"./enabled-features.jsx":276,"./perseus-api.jsx":294,"./question-paragraph.jsx":296,"./renderer.jsx":298,"./util.js":303,"./widget-container.jsx":305,"./widgets.js":306,"react":246,"react-dom":95}],252:[function(require,module,exports){
"use strict";

var _arguments = arguments;
/**
 * A <select> component rendered with classes instead of natively,
 * so that the classes may be styled/animated/magics
 *
 * Usage:
 * <FancySelect value={1}>
 *     <FancySelect.Option value={0}>text0</FancySelect.Option>
 *     <FancySelect.Option value={1}>text1</FancySelect.Option>
 *     <FancySelect.Option value={2}>text2</FancySelect.Option>
 * </FancySelect>
 *
 * Here be dragons.
 */

var React = require("react");
var classNames = require("classnames");

var FancyOption = function FancyOption(props /*, children... */) {
    var children = _.rest(_arguments);
    return _.extend(props, {
        children: children
    });
};

var FancySelect = React.createClass({
    displayName: "FancySelect",


    propTypes: {
        value: React.PropTypes.any.isRequired,
        className: React.PropTypes.string,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            onChange: function onChange() {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            active: false,
            // Keep track of whether we've closed this select
            // from open so that we can only run CSS animations
            // when closing/opening, and not on page load
            // If we just use active, we get a closing animation
            // when the element loads :(.
            closed: false
        };
    },

    render: function render() {
        var _this = this;

        var children = _.flatten([this.props.children || []]);

        // Some css-box magic:
        // We render all of the options on top of each other in a hidden,
        // floated span. This span then forces the <FancySelect>'s
        // width to be large enough to fit the largest option when
        // selected, so that the page doesn't have to re-flow when changing
        // select items.
        var optionSizer = React.createElement(
            "span",
            { style: {
                    display: "inline-block",
                    float: "left",
                    visibility: "hidden",
                    height: 0
                } },
            _.map(children, function (option) {
                return React.createElement(
                    "div",
                    { className: "fancy-select-value-hidden",
                        style: { height: 0 } },
                    option.props.children
                );
            })
        );

        var selectedOption = _.findWhere(children, {
            value: this.props.value
        });

        var selectBoxClassName = classNames({
            "fancy-select": true,
            active: this.state.active,
            closed: this.state.closed
        });

        var selectBox = React.createElement(
            "div",
            { className: selectBoxClassName,
                onClick: this._swapActive },
            optionSizer,
            React.createElement(
                "span",
                {
                    className: "fancy-select-value",
                    style: { position: "absolute" } },
                selectedOption.props.children
            )
        );

        var options = _.map(children, function (option, i) {
            // options can specify visible={true|false|null/undefined} to
            // control whether they are displayed always, never, or when
            // active (the default). `true` is useful if you want to manage
            // visibility manually via css.
            var visible = option.props.visible != null ? option.props.visible : _this.state.active;
            if (!visible) {
                return null;
            }

            var className = classNames({
                "fancy-option": true,
                active: _this.state.active,
                closed: _this.state.closed,
                selected: option.props.value === _this.props.value
            });
            if (option.props.className) {
                className += " " + option.props.className;
            }

            return React.createElement(
                "li",
                {
                    className: className,
                    key: i,
                    style: option.props.style,
                    onClick: function onClick() {
                        _this.props.onChange(option.props.value, option);
                        _this.setState({
                            active: false,
                            closed: true
                        });
                    } },
                option.props.children
            );
        });

        var optionsBoxClassName = classNames({
            "fancy-select-options": true,
            active: this.state.active,
            closed: this.state.closed
        });

        return React.createElement(
            "div",
            { className: this.props.className },
            selectBox,
            React.createElement(
                "ul",
                { className: optionsBoxClassName },
                options
            )
        );
    },

    _swapActive: function _swapActive() {
        var active = !this.state.active;
        var closed = !active;
        this.setState({
            active: active,
            closed: closed
        });
    }
});

FancySelect.Option = FancyOption;

module.exports = FancySelect;

},{"classnames":12,"react":246}],253:[function(require,module,exports){
"use strict";

var React = require('react');
var Changeable = require("../mixins/changeable.jsx");

var ButtonGroup = require("react-components/js/button-group.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var NumberInput = require("../components/number-input.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var RangeInput = require("../components/range-input.jsx");
var Util = require("../util.js");

var defaultBoxSize = 400;
var defaultBackgroundImage = {
    url: null,
    scale: 1,
    bottom: 0,
    left: 0
};

function numSteps(range, step) {
    return Math.floor((range[1] - range[0]) / step);
}

var GraphSettings = React.createClass({
    displayName: "GraphSettings",


    mixins: [Changeable],

    getInitialState: function getInitialState() {
        return {
            labelsTextbox: this.props.labels,
            gridStepTextbox: this.props.gridStep,
            snapStepTextbox: this.props.snapStep,
            stepTextbox: this.props.step,
            rangeTextbox: this.props.range
        };
    },

    getDefaultProps: function getDefaultProps() {
        return {
            box: [340, 340],
            labels: ["x", "y"],
            range: [[-10, 10], [-10, 10]],
            step: [1, 1],
            gridStep: [1, 1],
            snapStep: Util.snapStepFromGridStep(this.gridStep || [1, 1]),
            valid: true,
            backgroundImage: defaultBackgroundImage,
            markings: "graph",
            showProtractor: false,
            showRuler: false,
            rulerLabel: "",
            rulerTicks: 10
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "graph-settings" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "div",
                        { className: "perseus-widget-left-col" },
                        " x\u8EF8\u6A19\u7C64",
                        React.createElement("input", { type: "text",
                            className: "graph-settings-axis-label",
                            ref: "labels-0",
                            onChange: this.changeLabel.bind(this, 0),
                            value: this.state.labelsTextbox[0] })
                    ),
                    React.createElement(
                        "div",
                        { className: "perseus-widget-right-col" },
                        "y\u8EF8\u6A19\u7C64",
                        React.createElement("input", { type: "text",
                            className: "graph-settings-axis-label",
                            ref: "labels-1",
                            onChange: this.changeLabel.bind(this, 1),
                            value: this.state.labelsTextbox[1] })
                    )
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "div",
                        { className: "perseus-widget-left-col" },
                        "x\u8EF8\u7BC4\u570D",
                        React.createElement(RangeInput, { value: this.state.rangeTextbox[0],
                            onChange: this.changeRange.bind(this, 0) })
                    ),
                    React.createElement(
                        "div",
                        { className: "perseus-widget-right-col" },
                        "y\u8EF8\u7BC4\u570D",
                        React.createElement(RangeInput, { value: this.state.rangeTextbox[1],
                            onChange: this.changeRange.bind(this, 1) })
                    )
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "div",
                        { className: "perseus-widget-left-col" },
                        "\u5EA7\u6A19\u9593\u8DDD",
                        React.createElement(RangeInput, { value: this.state.stepTextbox,
                            onChange: this.changeStep })
                    ),
                    React.createElement(
                        "div",
                        { className: "perseus-widget-right-col" },
                        "\u7DB2\u683C\u9593\u8DDD",
                        React.createElement(RangeInput, { value: this.state.gridStepTextbox,
                            onChange: this.changeGridStep })
                    )
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "div",
                        { className: "perseus-widget-left-col" },
                        "\u7B54\u6848\u62D6\u62C9\u9593\u8DDD",
                        React.createElement(RangeInput, { value: this.state.snapStepTextbox,
                            onChange: this.changeSnapStep })
                    )
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "label",
                        null,
                        "\u6A19\u8A18:",
                        ' ',
                        " "
                    ),
                    React.createElement(ButtonGroup, { value: this.props.markings,
                        allowEmpty: false,
                        buttons: [{ value: "graph", text: "座標圖" }, { value: "grid", text: "僅網格" }, { value: "none", text: "無" }],
                        onChange: this.change("markings") })
                )
            ),
            React.createElement(
                "div",
                { className: "image-settings" },
                React.createElement(
                    "div",
                    null,
                    "\u80CC\u666F\u5716:"
                ),
                React.createElement(
                    "div",
                    null,
                    "Url:",
                    ' ',
                    React.createElement("input", { type: "text",
                        className: "graph-settings-background-url",
                        ref: "bg-url",
                        value: this.props.backgroundImage.url,
                        onChange: this.changeBackgroundUrl,
                        onKeyPress: this.changeBackgroundUrl,
                        onBlur: this.changeBackgroundUrl }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u8ACB\u5728\u5716\u5F62\u4E2D\u589E\u52A0\u5716\u7247\uFF0C\u6216\u65BC\u6B04\u4E2D\u8F38\u5165\u5716\u7247\u9023\u7D50\u3002"
                        )
                    )
                ),
                this.props.backgroundImage.url && React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        null,
                        "Pixels from left:",
                        ' ',
                        React.createElement("input", { type: "text",
                            ref: "bg-left",
                            value: this.props.backgroundImage.left,
                            onChange: _.partial(this.changeBackgroundSetting, "left") })
                    ),
                    React.createElement(
                        "div",
                        null,
                        "Pixels from bottom:",
                        ' ',
                        React.createElement("input", { type: "text",
                            ref: "bg-bottom",
                            value: this.props.backgroundImage.bottom,
                            onChange: _.partial(this.changeBackgroundSetting, "bottom") })
                    ),
                    React.createElement(
                        "div",
                        null,
                        "Image scale:",
                        ' ',
                        React.createElement("input", { type: "text",
                            ref: "bg-scale",
                            value: this.props.backgroundImage.scale,
                            onChange: _.partial(this.changeBackgroundSetting, "scale") })
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "misc-settings" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "div",
                        { className: "perseus-widget-left-col" },
                        React.createElement(PropCheckBox, { label: "Show ruler",
                            showRuler: this.props.showRuler,
                            onChange: this.props.onChange })
                    ),
                    React.createElement(
                        "div",
                        { className: "perseus-widget-right-col" },
                        React.createElement(PropCheckBox, { label: "Show protractor",
                            showProtractor: this.props.showProtractor,
                            onChange: this.props.onChange })
                    )
                ),
                this.props.showRuler && React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            ' ',
                            "\u76F4\u5C3A\u55AE\u4F4D:",
                            ' ',
                            React.createElement(
                                "select",
                                {
                                    onChange: this.changeRulerLabel,
                                    value: this.props.rulerLabel },
                                React.createElement(
                                    "option",
                                    { value: "" },
                                    "\u7121"
                                ),
                                React.createElement(
                                    "optgroup",
                                    { label: "\u516C\u5236" },
                                    this.renderLabelChoices([["公厘", "mm"], ["公分", "cm"], ["公尺", "m"], ["公里", "km"]])
                                ),
                                React.createElement(
                                    "optgroup",
                                    { label: "\u82F1\u5236" },
                                    this.renderLabelChoices([["英吋", "in"], ["英呎", "ft"], ["碼", "yd"], ["英里", "mi"]])
                                )
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            ' ',
                            "\u76F4\u5C3A\u9593\u9694:",
                            ' ',
                            React.createElement(
                                "select",
                                {
                                    onChange: this.changeRulerTicks,
                                    value: this.props.rulerTicks },
                                _.map([1, 2, 4, 8, 10, 16], function (n) {
                                    return React.createElement(
                                        "option",
                                        { value: n },
                                        n
                                    );
                                })
                            )
                        )
                    )
                )
            )
        );
    },

    renderLabelChoices: function renderLabelChoices(choices) {
        return _.map(choices, function (nameAndValue) {
            return React.createElement(
                "option",
                { value: nameAndValue[1] },
                nameAndValue[0]
            );
        });
    },

    componentDidMount: function componentDidMount() {
        this.changeGraph = _.debounce(this.changeGraph, 300);
    },

    validRange: function validRange(range) {
        var numbers = _.every(range, function (num) {
            return _.isFinite(num);
        });
        if (!numbers) {
            return "Range must be a valid number";
        }
        if (range[0] >= range[1]) {
            return "Range must have a higher number on the right";
        }
        return true;
    },

    validateStepValue: function validateStepValue(settings) {
        var step = settings.step;
        var range = settings.range;
        var name = settings.name;
        var minTicks = settings.minTicks;
        var maxTicks = settings.maxTicks;

        if (!_.isFinite(step)) {
            return name + " must be a valid number";
        }
        var nSteps = numSteps(range, step);
        if (nSteps < minTicks) {
            return name + " is too large, there must be at least " + minTicks + " ticks.";
        }
        if (nSteps > maxTicks) {
            return name + " is too small, there can be at most " + maxTicks + " ticks.";
        }
        return true;
    },

    validSnapStep: function validSnapStep(step, range) {
        return this.validateStepValue({
            step: step,
            range: range,
            name: "Snap step",
            minTicks: 5,
            maxTicks: 60
        });
    },

    validGridStep: function validGridStep(step, range) {
        return this.validateStepValue({
            step: step,
            range: range,
            name: "Grid step",
            minTicks: 3,
            maxTicks: 60
        });
    },

    validStep: function validStep(step, range) {
        return this.validateStepValue({
            step: step,
            range: range,
            name: "Step",
            minTicks: 3,
            maxTicks: 20
        });
    },

    validateGraphSettings: function validateGraphSettings(range, step, gridStep, snapStep) {
        var self = this;
        var msg;
        var goodRange = _.every(range, function (range) {
            msg = self.validRange(range);
            return msg === true;
        });
        if (!goodRange) {
            return msg;
        }
        var goodStep = _.every(step, function (step, i) {
            msg = self.validStep(step, range[i]);
            return msg === true;
        });
        if (!goodStep) {
            return msg;
        }
        var goodGridStep = _.every(gridStep, function (gridStep, i) {
            msg = self.validGridStep(gridStep, range[i]);
            return msg === true;
        });
        if (!goodGridStep) {
            return msg;
        }
        var goodSnapStep = _.every(snapStep, function (snapStep, i) {
            msg = self.validSnapStep(snapStep, range[i]);
            return msg === true;
        });
        if (!goodSnapStep) {
            return msg;
        }
        return true;
    },

    changeLabel: function changeLabel(i, e) {
        var val = e.target.value;
        var labels = this.state.labelsTextbox.slice();
        labels[i] = val;
        this.setState({ labelsTextbox: labels }, this.changeGraph);
    },

    changeRange: function changeRange(i, values) {
        var ranges = this.state.rangeTextbox.slice();
        ranges[i] = values;
        var step = this.state.stepTextbox.slice();
        var gridStep = this.state.gridStepTextbox.slice();
        var snapStep = this.state.snapStepTextbox.slice();
        var scale = Util.scaleFromExtent(ranges[i], this.props.box[i]);
        if (this.validRange(ranges[i]) === true) {
            step[i] = Util.tickStepFromExtent(ranges[i], this.props.box[i]);
            gridStep[i] = Util.gridStepFromTickStep(step[i], scale);
            snapStep[i] = gridStep[i] / 2;
        }
        this.setState({
            stepTextbox: step,
            gridStepTextbox: gridStep,
            snapStepTextbox: snapStep,
            rangeTextbox: ranges
        }, this.changeGraph);
    },

    changeStep: function changeStep(step) {
        this.setState({ stepTextbox: step }, this.changeGraph);
    },

    changeSnapStep: function changeSnapStep(snapStep) {
        this.setState({ snapStepTextbox: snapStep }, this.changeGraph);
    },

    changeGridStep: function changeGridStep(gridStep) {
        this.setState({
            gridStepTextbox: gridStep,
            snapStepTextbox: _.map(gridStep, function (step) {
                return step / 2;
            })
        }, this.changeGraph);
    },

    changeGraph: function changeGraph() {
        var labels = this.state.labelsTextbox;
        var range = _.map(this.state.rangeTextbox, function (range) {
            return _.map(range, Number);
        });
        var step = _.map(this.state.stepTextbox, Number);
        var gridStep = this.state.gridStepTextbox;
        var snapStep = this.state.snapStepTextbox;

        // validationResult is either:
        //   true -> the settings are valid
        //   a string -> the settings are invalid, and the explanation
        //               is contained in the string
        // TODO(jack): Refactor this to not be confusing
        var validationResult = this.validateGraphSettings(range, step, gridStep, snapStep);

        if (validationResult === true) {
            // either true or a string
            this.change({
                valid: true,
                labels: labels,
                range: range,
                step: step,
                gridStep: gridStep,
                snapStep: snapStep
            });
        } else {
            this.change({
                valid: validationResult // a string message, not false
            });
        }
    },

    setUrl: function setUrl(url, width, height) {
        var image = _.clone(this.props.backgroundImage);
        image.url = url;
        image.width = width;
        image.height = height;
        this.props.onChange({
            backgroundImage: image,
            markings: url ? "none" : "graph"
        });
    },

    changeBackgroundUrl: function changeBackgroundUrl(e) {
        var url = e.target.value;
        if (url) {
            if (this.props.backgroundImage.url != url) {
                var img = new Image();
                img.onload = function () {
                    return this.setUrl(url, img.width, img.height);
                }.bind(this);
                img.src = url;
            }
        } else {
            this.setUrl(url, 0, 0);
        }
    },

    changeBackgroundSetting: function changeBackgroundSetting(type, e) {
        var image = _.clone(this.props.backgroundImage);
        image[type] = e.target.value;
        this.change({ backgroundImage: image });
    },

    // TODO(jack): Make either a wrapper for standard events to work
    // with this.change, or make these use some TextInput/NumberInput box
    changeRulerLabel: function changeRulerLabel(e) {
        this.change({ rulerLabel: e.target.value });
    },

    changeRulerTicks: function changeRulerTicks(e) {
        this.change({ rulerTicks: +e.target.value });
    }
});

module.exports = GraphSettings;

},{"../components/number-input.jsx":261,"../components/prop-check-box.jsx":262,"../components/range-input.jsx":263,"../mixins/changeable.jsx":291,"../util.js":303,"react":246,"react-components/js/button-group.jsx":66,"react-components/js/info-tip.jsx":68}],254:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");
var Util = require("../util.js");

var defaultBoxSize = 400;
var defaultBackgroundImage = {
    url: null,
    scale: 1,
    bottom: 0,
    left: 0
};

/* Style objects */
var defaultInstructionsStyle = {
    fontStyle: 'italic',
    fontWeight: 'bold',
    fontSize: '32px',
    width: '100%',
    height: '100%',
    textAlign: 'center',
    backgroundColor: 'white',
    position: 'absolute',
    zIndex: 1,
    transition: 'opacity .25s ease-in-out',
    '-moz-transition': 'opacity .25s ease-in-out',
    '-webkit-transition': 'opacity .25s ease-in-out'
};

var instructionsTextStyle = {
    position: 'relative',
    top: '25%'
};

function numSteps(range, step) {
    return Math.floor((range[1] - range[0]) / step);
}

var Graph = React.createClass({
    displayName: "Graph",

    propTypes: {
        box: React.PropTypes.array.isRequired,
        labels: React.PropTypes.arrayOf(React.PropTypes.string),
        range: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.number)),
        step: React.PropTypes.arrayOf(React.PropTypes.number),
        gridStep: React.PropTypes.arrayOf(React.PropTypes.number),
        snapStep: React.PropTypes.arrayOf(React.PropTypes.number),
        markings: React.PropTypes.string,
        backgroundImage: React.PropTypes.shape({
            url: React.PropTypes.string,
            scale: React.PropTypes.number,
            bottom: React.PropTypes.number,
            left: React.PropTypes.number
        }),
        showProtractor: React.PropTypes.bool,
        showRuler: React.PropTypes.bool,
        rulerLabel: React.PropTypes.string,
        rulerTicks: React.PropTypes.number,
        onGraphieUpdated: React.PropTypes.func,
        instructions: React.PropTypes.string,
        onClick: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            box: [defaultBoxSize, defaultBoxSize],
            labels: ["x", "y"],
            range: [[-10, 10], [-10, 10]],
            step: [1, 1],
            gridStep: [1, 1],
            snapStep: [0.5, 0.5],
            markings: "graph",
            backgroundImage: defaultBackgroundImage,
            showProtractor: false,
            showRuler: false,
            rulerLabel: "",
            rulerTicks: 10,
            instructions: null,
            onGraphieUpdated: null,
            onClick: null,
            onMouseDown: null
        };
    },

    render: function render() {
        var image = this.props.backgroundImage;
        if (image.url) {
            var preScale = this.props.box[0] / defaultBoxSize;
            var scale = image.scale * preScale;
            var style = {
                bottom: preScale * image.bottom + "px",
                left: preScale * image.left + "px",
                width: scale * image.width + "px",
                height: scale * image.height + "px"
            };
            image = React.createElement("img", { style: style, src: image.url });
        } else {
            image = null;
        }

        return React.createElement(
            "div",
            {
                className: "graphie-container above-scratchpad",
                style: {
                    width: this.props.box[0],
                    height: this.props.box[1]
                },
                onMouseOut: this.onMouseOut,
                onMouseOver: this.onMouseOver,
                onClick: this.onClick },
            image,
            React.createElement("div", { className: "graphie", ref: "graphieDiv" })
        );
    },

    componentDidMount: function componentDidMount() {
        this._setupGraphie(true);
    },

    componentDidUpdate: function componentDidUpdate() {
        // Only setupGraphie once per componentDidUpdate().
        // See explanation in setupGraphie().
        this._hasSetupGraphieThisUpdate = false;
        if (this._shouldSetupGraphie) {
            this._setupGraphie(false);
            this._shouldSetupGraphie = false;
        }
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var potentialChanges = ["labels", "range", "step", "markings", "showProtractor", "showRuler", "rulerLabel", "rulerTicks", "gridStep", "snapStep"];
        var self = this;
        _.each(potentialChanges, function (prop) {
            if (!_.isEqual(self.props[prop], nextProps[prop])) {
                self._shouldSetupGraphie = true;
            }
        });
    },

    /* Reset the graphie canvas to its initial state
     *
     * Use when re-rendering the parent component and you need a blank
     * graphie.
     */
    reset: function reset() {
        this._setupGraphie(false);
    },

    graphie: function graphie() {
        return this._graphie;
    },

    pointsFromNormalized: function pointsFromNormalized(coordsList, noSnap) {
        var self = this;
        return _.map(coordsList, function (coords) {
            return _.map(coords, function (coord, i) {
                var range = self.props.range[i];
                if (noSnap) {
                    return range[0] + (range[1] - range[0]) * coord;
                } else {
                    var step = self.props.step[i];
                    var nSteps = numSteps(range, step);
                    var tick = Math.round(coord * nSteps);
                    return range[0] + step * tick;
                }
            });
        });
    },

    _setupGraphie: function _setupGraphie(initialMount) {
        // Only setupGraphie once per componentDidUpdate().
        // This prevents this component from rendering graphie
        // and then immediately re-render graphie because its
        // parent component asked it to. This will happen when
        // props on the parent and props on this component both
        // require graphie to be re-rendered.
        if (this._hasSetupGraphieThisUpdate) {
            return;
        }

        var graphieDiv = ReactDOM.findDOMNode(this.refs.graphieDiv);
        $(graphieDiv).empty();
        var labels = this.props.labels;
        var range = this.props.range;
        var graphie = this._graphie = KhanUtil.currentGraph = KhanUtil.createGraphie(graphieDiv);

        var gridConfig = this._getGridConfig();
        graphie.snap = this.props.snapStep;

        if (this.props.markings === "graph") {
            graphie.graphInit({
                range: range,
                scale: _.pluck(gridConfig, "scale"),
                axisArrows: "<->",
                labelFormat: function labelFormat(s) {
                    return "\\small{" + s + "}";
                },
                gridStep: this.props.gridStep,
                tickStep: _.pluck(gridConfig, "tickStep"),
                labelStep: 1,
                unityLabels: _.pluck(gridConfig, "unityLabel")
            });
            graphie.label([0, range[1][1]], labels[1], "above");
            graphie.label([range[0][1], 0], labels[0], "right");
        } else if (this.props.markings === "grid") {
            graphie.graphInit({
                range: range,
                scale: _.pluck(gridConfig, "scale"),
                gridStep: this.props.gridStep,
                axes: false,
                ticks: false,
                labels: false
            });
        } else if (this.props.markings === "none") {
            graphie.init({
                range: range,
                scale: _.pluck(gridConfig, "scale")
            });
        }

        // Add instructions just before mouse layer
        var visible = 0.5;
        var invisible = 0.0;
        var $instructionsWrapper;
        if (this.props.instructions) {
            var $instructionsWrapper = $("<div/>");
            _.each(defaultInstructionsStyle, function (value, key) {
                $instructionsWrapper.css(key, value);
            });
            $instructionsWrapper.css("opacity", visible);

            var $instructions = $("<span/>", {
                text: this.props.instructions
            });
            _.each(instructionsTextStyle, function (value, key) {
                $instructions.css(key, value);
            });

            $instructionsWrapper.append($instructions);
            $(graphieDiv).append($instructionsWrapper);
        } else {
            $instructionsWrapper = undefined;
        }

        // Add some handlers for instructions text (if necessary)
        var onMouseDown = $instructionsWrapper || this.props.onMouseDown ? _.bind(function (coord) {
            if ($instructionsWrapper) {
                $instructionsWrapper.remove();
                $instructionsWrapper = null;
            }
            this.props.onMouseDown(coord);
        }, this) : null;

        var onMouseOver = $instructionsWrapper ? function () {
            $instructionsWrapper && $instructionsWrapper.css("opacity", invisible);
        } : null;

        var onMouseOut = $instructionsWrapper ? function () {
            $instructionsWrapper && $instructionsWrapper.css("opacity", visible);
        } : null;

        graphie.addMouseLayer({
            onClick: this.props.onClick,
            onMouseDown: onMouseDown,
            onMouseOver: onMouseOver,
            onMouseOut: onMouseOut,
            onMouseUp: this.props.onMouseUp,
            onMouseMove: this.props.onMouseMove,
            allowScratchpad: true
        });

        this._updateProtractor();
        this._updateRuler();

        // We set this flag before jumping into our callback
        // to avoid recursing if our callback calls reset() itself
        this._hasSetupGraphieThisUpdate = true;
        if (!initialMount && this.props.onGraphieUpdated) {
            this.props.onGraphieUpdated(graphie);
        }
    },

    _getGridConfig: function _getGridConfig() {
        var self = this;
        return _.map(self.props.step, function (step, i) {
            return Util.gridDimensionConfig(step, self.props.range[i], self.props.box[i], self.props.gridStep[i]);
        });
    },

    _updateProtractor: function _updateProtractor() {
        if (this.protractor) {
            this.protractor.remove();
        }

        if (this.props.showProtractor) {
            var coord = this.pointsFromNormalized([[0.50, 0.05]])[0];
            this.protractor = this._graphie.Protractor(coord);
        }
    },

    _updateRuler: function _updateRuler() {
        if (this.ruler) {
            this.ruler.remove();
        }

        if (this.props.showRuler) {
            var coord = this.pointsFromNormalized([[0.50, 0.25]])[0];
            var extent = this._graphie.range[0][1] - this._graphie.range[0][0];
            this.ruler = this._graphie.Ruler({
                center: coord,
                label: this.props.rulerLabel,
                pixelsPerUnit: this._graphie.scale[0],
                ticksPerUnit: this.props.rulerTicks,
                units: Math.round(0.8 * extent)
            });
        }
    },

    toJSON: function toJSON() {
        return _.pick(this.props, 'range', 'step', 'markings', 'labels', 'backgroundImage', 'showProtractor', 'showRuler', 'rulerLabel', 'rulerTicks', 'gridStep', 'snapStep');
    }
});

module.exports = Graph;

},{"../util.js":303,"react":246,"react-dom":95}],255:[function(require,module,exports){
"use strict";

var Util = require("../util.js");
var nestedMap = Util.nestedMap;
var deepEq = Util.deepEq;

/**
 * A base class for all Graphie Movables
 *
 * Used for checking that all Graphie children are, in fact,
 * GraphieMovables
 */
function GraphieMovable(descriptor) {
    _.extend(this, descriptor);
}

var abstractMethod = function abstractMethod() {
    throw new Error("Abstract method! Must be implemented by Graphie Movable" + this.constructor.displayName);
};

_.extend(GraphieMovable.prototype, {
    movableProps: [],
    add: abstractMethod,
    modify: abstractMethod,
    remove: abstractMethod,
    toFront: function toFront() {/* no op */}
});

/**
 * returns cloned props modified with `children: childrenArray`
 */
var rewriteProps = function rewriteProps(props, childrenArray) {
    // Clone the props and add `children:`
    // childrenArray is always an array here because this is only called
    // from createClass, which initializes childrenArray as _.rest(arguments)
    return _.extend({}, props, {
        children: _.filter(_.flatten(childrenArray), _.identity)
    });
};

/**
 * Create a custom GraphieMovable class
 */
var createClass = function createClass(spec) {
    var GraphieClass = function GraphieClass(props) {
        if (!(this instanceof GraphieClass)) {
            throw new Error("Use createElement or JSX with graphie movables");
        }
        this.props = rewriteProps(props, props.children || []);
        return this;
    };

    spec.displayName = spec.displayName || _.uniqueId("GraphieClass");

    // Add the displayName to the constructor for compatibility with
    // React's myDescriptor.constructor.displayName
    GraphieClass.displayName = spec.displayName;

    GraphieClass.prototype = new GraphieMovable(spec);
    GraphieClass.prototype.constructor = GraphieClass;

    return GraphieClass;
};

/**
 * Create a GraphieMovable class from a function that describes
 * how to add said class to a graphie, and returns an array of
 * `.remove()`able elements to be used when a remove() or
 * modify() is called.
 *
 * This convenience method creates an inefficient class, although
 * it does check for a difference in this.props and prevProps before
 * removing and re-adding itself.
 *
 * The primary benefit of this is being able to very easily create
 * a wrapper for old graphie code to make it interface with <Graphie>
 *
 * Commonly used elements should use the fully-fledged createClass
 * and implement an efficient modify() operation.
 */
var createSimpleClass = function createSimpleClass(addFunction) {
    return createClass({
        displayName: addFunction.name || _.uniqueId("GraphieSimpleClass"),
        movableProps: ["children"],

        add: function add(graphie) {
            this._elements = addFunction(graphie, this.props);
            this._prevProps = this.props;
        },

        modify: function modify(graphie) {
            if (!deepEq(this.props, this._prevProps)) {
                this.remove();
                this.add(graphie);
                this._prevProps = this.props;
                return "reordered";
            }
        },

        remove: function remove() {
            nestedMap(this._elements, function (elem) {
                if (elem) {
                    elem.remove();
                }
            });
            this._elements = null;
            this._prevProps = null;
        },

        toFront: function toFront() {
            nestedMap(this._elements, function (elem) {
                if (_.isFunction(elem.toFront)) {
                    elem.toFront();
                }
            });
        }
    });
};

module.exports = {
    GraphieMovable: GraphieMovable,
    createClass: createClass,
    createSimpleClass: createSimpleClass
};

},{"../util.js":303}],256:[function(require,module,exports){
"use strict";

var GraphieClasses = require("./graphie-classes.jsx");
var Interactive2 = require("../interactive2.js");
var InteractiveUtil = require("../interactive2/interactive-util.js");

var assert = InteractiveUtil.assert;

var MovablePoint = GraphieClasses.createClass({
    displayName: "MovablePoint",

    movableProps: ["children"],

    add: function add(graphie) {
        this.point = Interactive2.addMovablePoint(graphie, this.props);
    },

    modify: function modify() {
        this.point.modify(this.props);
    },

    remove: function remove() {
        this.point.remove();
    },

    toFront: function toFront() {
        this.point.toFront();
    }
});

// Include helper methods, such as MovablePoint.constrain.snap()
_.extend(MovablePoint, Interactive2.MovablePoint);

var Line = GraphieClasses.createSimpleClass(function (graphie, props) {
    return graphie.line(props.start, props.end, props.style);
});

var Label = GraphieClasses.createSimpleClass(function (graphie, props) {
    return graphie.label(props.coord, props.text, props.direction, props.tex);
});

module.exports = {
    Line: Line,
    Label: Label,
    MovablePoint: MovablePoint
};

},{"../interactive2.js":280,"../interactive2/interactive-util.js":281,"./graphie-classes.jsx":255}],257:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var _ = require("underscore");

var GraphieClasses = require("./graphie-classes.jsx");
var Movables = require("./graphie-movables.jsx");

var GraphieMovable = GraphieClasses.GraphieMovable;

var deepEq = require("../util.js").deepEq;
var nestedMap = require("../util.js").nestedMap;
var assert = require("../interactive2/interactive-util.js").assert;

var createGraphie = KhanUtil.createGraphie;

var Graphie = React.createClass({
    displayName: "Graphie",

    propTypes: {
        box: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,
        range: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.number)),
        options: React.PropTypes.object,
        setup: React.PropTypes.func.isRequired,
        onClick: React.PropTypes.func,
        onMouseDown: React.PropTypes.func,
        onMouseUp: React.PropTypes.func,
        onMouseMove: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            range: [[-10, 10], [-10, 10]],
            options: {}
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "graphie-container" },
            React.createElement("div", { className: "graphie", ref: "graphieDiv" })
        );
    },

    componentDidMount: function componentDidMount() {
        this._setupGraphie();
        this._updateMovables();
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
        return !deepEq(this.props, nextProps);
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        // If someone changes the setup function passed in, we should
        // technically setup graphie again. But that's definitely an
        // anti-pattern, since it is most-likely caused by passing in an
        // anonymous function rather than a "real" change, and re-rendering
        // in that case would cause us to constantly re-setup graphie, which
        // would have horrible performance implications. In order to avoid
        // those, we just warn here.
        if (this.props.setup !== prevProps.setup && window.console && window.console.warn) {
            window.console.warn("<Graphie> was given a new setup function. " + "This is a bad idea; please refactor your code to give " + "the same setup function reference to <Graphie> on " + "every render.");
        }
        if (!deepEq(this.props.options, prevProps.options)) {
            this._setupGraphie();
        }
        this._updateMovables();
    },

    /**
     * Allow parents of the <Graphie> component to grab a reference to the
     * underlying graphie object using
     * `this.refs.graphieComponent.getGraphie()`
     *
     * This shouldn't be necessary for 90% of cases, but the power is there.
     * Use it for good and not evil.
     */
    getGraphie: function getGraphie() {
        return this._graphie;
    },

    // bounds-checked range
    _range: function _range() {
        return _.map(this.props.range, function (dimRange) {
            if (dimRange[0] >= dimRange[1]) {
                return [-10, 10];
            } else {
                return dimRange;
            }
        });
    },

    _box: function _box() {
        return _.map(this.props.box, function (pixelDim) {
            // 340 = default size in the editor. exact value
            // is arbitrary; this is just a safety check.
            return pixelDim > 0 ? pixelDim : 340;
        });
    },

    _scale: function _scale() {
        var box = this._box();
        var range = this._range();
        return _.map(box, function (pixelDim, i) {
            var unitDim = range[i][1] - range[i][0];
            return pixelDim / unitDim;
        });
    },

    _setupGraphie: function _setupGraphie() {
        this._removeMovables();

        var graphieDiv = ReactDOM.findDOMNode(this.refs.graphieDiv);
        $(graphieDiv).empty();
        var graphie = this._graphie = createGraphie(graphieDiv);

        // This has to be called before addMouseLayer. You can re-init
        // with graphInit later if you prefer
        graphie.init({
            range: this._range(),
            scale: this._scale()
        });
        graphie.addMouseLayer({
            onClick: this.props.onClick,
            onMouseDown: this.props.onMouseDown,
            onMouseUp: this.props.onMouseUp,
            onMouseMove: this.props.onMouseMove,
            allowScratchpad: this.props.allowScratchpad
        });
        graphie.snap = this.props.options.snapStep || [1, 1];
        this.props.setup(graphie, this.props.options);
    },

    _removeMovables: function _removeMovables() {
        // _.invoke works even when this._movables is undefined
        _.invoke(this._movables, "remove");
        this._movables = {};
    },

    _renderMovables: function _renderMovables(children, options) {
        var _this = this;

        // Each leaf of `children` is a movable descriptor created by a call to
        // some `GraphieMovable`, such as `MovablePoint`.
        //
        // This function takes these descriptors and renders them into
        // on-screen movables, or updates on-screen movables for
        // descriptors when possible.
        //
        // If there is no movable with that key already, this descriptor is
        // stored in this._movables and promoted to an on-screen movable by
        // calling `child.add(graphie)`.
        //
        // If a movable of the same type with the same key exists already,
        // we take `child.props` and give them to the already-existing
        // on-screen movable, and call `movable.modify()`

        var graphie = options.graphie;
        var oldMovables = options.oldMovables;
        var newMovables = options.newMovables; /* output parameter */

        var renderChildren = function renderChildren(elem) {
            _.each(elem.movableProps, function (prop) {
                // Render the children, and save the results of that
                // render to the appropriate props
                elem.props[prop] = _this._renderMovables(elem.props[prop], options);
            });
        };

        // Add/modify movables

        // We want to keep track of whether we have added a new svg element,
        // because if we have, then we need to call .toFront() on any svg
        // elements occurring afterwards. If this happens, we set
        // `areMovablesOutOfOrder` to true:
        var areMovablesOutOfOrder = false;
        return nestedMap(children, function (childDescriptor) {
            if (!childDescriptor) {
                // Still increment the key to avoid cascading key changes
                // on hiding/unhiding children, i.e. by using
                // {someBoolean && <MovablePoint />}
                options.nextKey++;
                // preserve the null/undefined in the resulting array
                return childDescriptor;
            }

            // Instantiate the descriptor to turn it into a real Movable
            var child = new childDescriptor.type(childDescriptor.props);
            assert(child instanceof GraphieMovable, "All children of a Graphie component must be Graphie " + "movables");

            // Give each child a key
            var keyProp = childDescriptor.key;
            var key = keyProp == null ? "_no_id_" + options.nextKey : keyProp;
            options.nextKey++;
            var ref = childDescriptor.ref;

            // We render our children first. This allows us to replace any
            // `movableProps` on our child with the on-screen movables
            // corresponding with those descriptors.
            renderChildren(child);

            var prevMovable = oldMovables[key];
            if (!prevMovable) {
                // We're creating a new child
                child.add(graphie);
                areMovablesOutOfOrder = true;

                newMovables[key] = child;
            } else if (child.constructor === prevMovable.constructor) {
                // We're updating an old child
                prevMovable.props = child.props;
                var modifyResult = prevMovable.modify(graphie);
                if (modifyResult === "reordered") {
                    areMovablesOutOfOrder = true;
                }

                newMovables[key] = prevMovable;
            } else {
                // We're destroying an old child and replacing it
                // with a new child of a different type

                // This generally is a bad idea, so warn about it if this
                // is being caused by implicit keys
                if (keyProp == null) {
                    if (typeof console !== "undefined" && console.warn) {
                        // @Nolint
                        console.warn("Replacing a <Graphie> child with a " + // @Nolint
                        "child of a different type. Please add keys " + "to your <Graphie> children");
                    }
                }

                prevMovable.remove();
                child.add(graphie);
                areMovablesOutOfOrder = true;

                newMovables[key] = child;
            }

            if (areMovablesOutOfOrder) {
                newMovables[key].toFront();
            }

            if (ref) {
                _this.movables[ref] = newMovables[key];
            }

            return newMovables[key];
        });
    },

    // Sort of like react diffing, but for movables
    _updateMovables: function _updateMovables() {
        var graphie = this._graphie;

        var oldMovables = this._movables;
        var newMovables = {};
        this._movables = newMovables;

        this._renderMovables(this.props.children, {
            nextKey: 1,
            graphie: graphie,
            oldMovables: oldMovables,
            newMovables: newMovables
        });

        // Remove any movables that no longer exist in the child array
        _.each(oldMovables, function (oldMovable, key) {
            if (!newMovables[key]) {
                oldMovable.remove();
            }
        });
    }
});

// Attach Graphie.createClass and Graphie.createSimpleClass
_.extend(Graphie, GraphieClasses);
// Attach the Movable react components for easy reference
_.extend(Graphie, Movables);

module.exports = Graphie;

},{"../interactive2/interactive-util.js":281,"../util.js":303,"./graphie-classes.jsx":255,"./graphie-movables.jsx":256,"react":246,"react-dom":95,"underscore":248}],258:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Tooltip = require("react-components/js/tooltip.jsx");
var ApiClassNames = require("../perseus-api.jsx").ClassNames;

var MathInput = require("./math-input.jsx");
var Renderer = require("../renderer.jsx");
var TextInput = require("./text-input.jsx");

var captureScratchpadTouchStart = require("../util.js").captureScratchpadTouchStart;

var MATH = "math";
var TEXT = "text";

var InputWithExamples = React.createClass({
    displayName: "InputWithExamples",

    propTypes: {
        type: React.PropTypes.oneOf([MATH, TEXT]),
        value: React.PropTypes.string,
        onChange: React.PropTypes.func.isRequired,
        className: React.PropTypes.string,
        examples: React.PropTypes.arrayOf(React.PropTypes.string).isRequired,
        shouldShowExamples: React.PropTypes.bool,
        convertDotToTimes: React.PropTypes.bool,
        interceptFocus: React.PropTypes.func,
        buttonSet: React.PropTypes.string,
        buttonsVisible: React.PropTypes.oneOf(['always', 'never', 'focused']),
        onFocus: React.PropTypes.func,
        onBlur: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            type: TEXT,
            shouldShowExamples: true,
            onFocus: function onFocus() {},
            onBlur: function onBlur() {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            focused: false,
            showExamples: false
        };
    },

    _getInputClassName: function _getInputClassName() {
        // confining mutability!
        var className = ApiClassNames.INPUT;
        if (this.state.focused) {
            className += " " + ApiClassNames.FOCUSED;
        }
        if (this.props.className) {
            className += " " + this.props.className;
        }
        return className;
    },

    render: function render() {
        var examplesContent = _.map(this.props.examples, function (example) {
            return "- " + example;
        }).join("\n");

        var showExamples = this.props.shouldShowExamples && this.state.showExamples;

        var inputProps = {
            className: this._getInputClassName(),
            value: this.props.value,
            buttonSet: this.props.buttonSet,
            buttonsVisible: this.props.buttonsVisible,
            onChange: this.props.onChange,
            onFocus: this._handleFocus,
            // HACK (jack): This fixes readonly inputs (from interceptFocus)
            // not getting focus events when clicked on mobile:
            onClick: this.props.interceptFocus != null ? this.focus : null,
            onBlur: this._handleBlur,
            onTouchStart: captureScratchpadTouchStart,
            ref: "input"
        };

        var input = this.props.type === MATH ? React.createElement(MathInput, _extends({
            convertDotToTimes: this.props.convertDotToTimes
        }, inputProps)) : React.createElement(TextInput, _extends({
            autoCapitalize: "off",
            autoComplete: "off",
            autoCorrect: "off",
            spellCheck: "false",
            readOnly: this.props.interceptFocus != null
        }, inputProps));

        return React.createElement(
            Tooltip,
            {
                ref: "tooltip",
                className: "perseus-formats-tooltip",
                horizontalPosition: "left",
                horizontalAlign: "left",
                verticalPosition: "bottom",
                arrowSize: 10,
                borderColor: "#ccc",
                show: showExamples },
            input,
            React.createElement(Renderer, { content: examplesContent })
        );
    },

    _handleFocus: function _handleFocus() {
        var showExamples = true;
        if (this.props.interceptFocus) {
            var interceptResult = this.props.interceptFocus();
            if (interceptResult === false) {
                showExamples = false;
            }
        }
        this.props.onFocus();
        this.setState({
            focused: true,
            showExamples: showExamples
        });
    },

    show: function show() {
        this.setState({ showExamples: true });
    },

    hide: function hide() {
        this.setState({ showExamples: false });
    },

    _handleBlur: function _handleBlur() {
        this.props.onBlur();
        this.setState({
            focused: false,
            showExamples: false
        });
    },

    focus: function focus() {
        this.refs.input.focus();
    },

    handleChange: function handleChange(e) {
        this.props.onChange(e.target.value);
    },

    getInputDOMNode: function getInputDOMNode() {
        return this.refs.input;
    }
});

module.exports = InputWithExamples;

},{"../perseus-api.jsx":294,"../renderer.jsx":298,"../util.js":303,"./math-input.jsx":259,"./text-input.jsx":266,"react":246,"react-components/js/tooltip.jsx":72}],259:[function(require,module,exports){
"use strict";

var classNames = require("classnames");
var React = require("react");
var ReactDOM = require("react-dom");
var _ = require("underscore");

// TODO(alex): Package MathQuill
var MathQuill = window.MathQuill;
var PT = React.PropTypes;
var TexButtons = require("./tex-buttons.jsx");

// A WYSIWYG math input that calls `onChange(LaTeX-string)`
var MathInput = React.createClass({
    displayName: "MathInput",

    propTypes: {
        value: PT.string,
        onChange: PT.func.isRequired,
        convertDotToTimes: PT.bool,
        buttonsVisible: PT.oneOf(['always', 'never', 'focused']),
        onFocus: PT.func,
        onBlur: PT.func,
        buttonSets: TexButtons.buttonSetsType.isRequired,
        offsetLeft: PT.number
    },

    render: function render() {
        var className = classNames({
            "perseus-math-input": true,

            // mathquill usually adds these itself but react removes them when
            // updating the component.
            "mq-editable-field": true,
            "mq-math-mode": true
        });

        var buttons = null;
        var button_height = "0px";
        if (this._shouldShowButtons()) {
            buttons = React.createElement(TexButtons, {
                className: "math-input-buttons absolute",
                convertDotToTimes: this.props.convertDotToTimes,
                onInsert: this.insert,
                sets: this.props.buttonSets });
            button_height = (6 + 58 * this.props.buttonSets.length).toString() + "px";
        }
        var button_left = "0px";
        if (!this.props.inEditor) {
            if (this.props.offsetLeft >= 260) {
                button_left = "-240px";
            } else if (this.props.offsetLeft > 130 && this.props.offsetLeft < 260) {
                button_left = "-120px";
            }
        }

        return React.createElement(
            "div",
            { style: { display: "inline-block" } },
            React.createElement(
                "div",
                { style: { display: 'inline-block' } },
                React.createElement("span", { className: className,
                    ref: "mathinput",
                    onFocus: this.handleFocus,
                    onBlur: this.handleBlur })
            ),
            React.createElement(
                "div",
                { style: { position: "relative", height: button_height, left: button_left } },
                buttons
            )
        );
    },

    // handlers:
    // keep track of two related bits of state:
    // * this.state.focused - whether the buttons are currently shown
    // * this.mouseDown - whether a mouse click is active that started in the
    //   buttons div

    handleFocus: function handleFocus() {
        this.setState({ focused: true });
        // TODO(joel) fix properly - we should probably allow onFocus handlers
        // to this property, but we need to work correctly with them.
        // if (this.props.onFocus) {
        //     this.props.onFocus();
        // }
    },

    handleMouseDown: function handleMouseDown(event) {
        var focused = ReactDOM.findDOMNode(this).contains(event.target);
        this.mouseDown = focused;
        if (!focused) {
            this.setState({ focused: false });
        }
    },

    handleMouseUp: function handleMouseUp() {
        // this mouse click started in the buttons div so we should focus the
        // input
        if (this.mouseDown) {
            this.focus();
        }
        this.mouseDown = false;
    },

    handleBlur: function handleBlur() {
        if (!this.mouseDown) {
            this.setState({ focused: false });
        }
    },

    _shouldShowButtons: function _shouldShowButtons() {
        if (this.props.buttonsVisible === 'always') {
            return true;
        } else if (this.props.buttonsVisible === 'never') {
            return false;
        } else {
            return this.state.focused;
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            value: "",
            convertDotToTimes: false,
            buttonsVisible: 'focused'
        };
    },

    getInitialState: function getInitialState() {
        return { focused: false };
    },

    insert: function insert(value) {
        var input = this.mathField();
        if (_(value).isFunction()) {
            value(input);
        } else if (value[0] === '\\') {
            input.cmd(value).focus();
        } else {
            input.write(value).focus();
        }
        input.focus();
    },

    mathField: function mathField(options) {
        // MathQuill.MathField takes a DOM node, MathQuill-ifies it if it's
        // seeing that node for the first time, then returns the associated
        // MathQuill object for that node. It is stable - will always return
        // the same object when called on the same DOM node.
        return MathQuill.MathField(ReactDOM.findDOMNode(this.refs.mathinput), options);
    },

    componentWillUnmount: function componentWillUnmount() {
        window.removeEventListener("mousedown", this.handleMouseDown);
        window.removeEventListener("mouseup", this.handleMouseUp);
    },

    componentDidMount: function componentDidMount() {
        var _this = this;

        window.addEventListener("mousedown", this.handleMouseDown);
        window.addEventListener("mouseup", this.handleMouseUp);

        // These options can currently only be set globally. (Hopefully this
        // will change at some point.) They appear safe to set multiple times.

        // LaTeX commands that, when typed, are immediately replaced by the
        // appropriate symbol. This does not include ln, log, or any of the
        // trig functions; those are always interpreted as commands.
        MathQuill.addAutoCommands("pi theta phi sqrt");

        // Pop the cursor out of super/subscripts on addition or (in)equalities
        // Avoid popping on '-' to allow negative exponents
        MathQuill.addCharsThatBreakOutOfSupSub("+=<>≠≤≥");

        // Prevent excessive super/subscripts or fractions from being created
        // without operands, e.g. when somebody holds down a key
        MathQuill.disableCharsWithoutOperand("^_/");

        var initialized = false;

        // Initialize MathQuill.MathField instance
        this.mathField({
            // The name of this option is somewhat misleading, as tabbing in
            // MathQuill breaks you out of a nested context (fraction/script)
            // if you're in one, but moves focus to the next input if you're
            // not. Spaces (with this option enabled) are just ignored in the
            // latter case.
            //
            // TODO(alex): In order to allow inputting mixed numbers, we will
            // have to accept spaces in certain cases. The desired behavior is
            // still to escape nested contexts if currently in one, but to
            // insert a space if not (we don't expect mixed numbers in nested
            // contexts). We should also limit to one consecutive space.
            spaceBehavesLikeTab: true,

            handlers: {
                edited: function edited(mathField) {
                    // This handler is guaranteed to be called on change, but
                    // unlike React it sometimes generates false positives.
                    // One of these is on initialization (with an empty string
                    // value), so we have to guard against that below.
                    var value = mathField.latex();

                    // Provide a MathQuill-compatible way to generate the
                    // not-equals sign without pasting unicode or typing TeX
                    value = value.replace(/<>/g, "\\ne");

                    // Use the specified symbol to represent multiplication
                    // TODO(alex): Add an option to disallow variables, in
                    // which case 'x' should get converted to '\\times'
                    if (_this.props.convertDotToTimes) {
                        value = value.replace(/\\cdot/g, "\\times");
                    } else {
                        value = value.replace(/\\times/g, "\\cdot");
                    }

                    if (initialized && _this.props.value !== value) {
                        _this.props.onChange(value);
                    }
                },
                enter: function enter() {
                    // This handler is called when the user presses the enter
                    // key. Since this isn't an actual <input> element, we have
                    // to manually trigger the usually automatic form submit.
                    $(ReactDOM.findDOMNode(_this.refs.mathinput)).submit();
                },
                upOutOf: function upOutOf(mathField) {
                    // This handler is called when the user presses the up
                    // arrow key, but there is nowhere in the expression to go
                    // up to (no numerator or exponent). For ease of use,
                    // interpret this as an attempt to create an exponent.
                    mathField.typedText("^");
                }
            }
        });

        // Ideally, we would be able to pass an initial value directly into
        // the constructor above
        this.mathField().latex(this.props.value);

        initialized = true;
    },

    componentDidUpdate: function componentDidUpdate() {
        if (!_.isEqual(this.mathField().latex(), this.props.value)) {
            this.mathField().latex(this.props.value);
        }
    },

    focus: function focus() {
        this.mathField().focus();
        this.setState({ focused: true });
    }
});

module.exports = MathInput;

},{"./tex-buttons.jsx":265,"classnames":12,"react":246,"react-dom":95,"underscore":248}],260:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");

/* MultiButtonGroup is an aesthetically pleasing group of buttons,
 * which allows multiple buttons to be selected at the same time.
 *
 * The class requires these properties:
 *   buttons - an array of objects with keys:
 *     "value": this is the value returned when the button is selected
 *     "text": this is the text shown on the button
 *     "title": this is the title-text shown on hover
 *   onChange - a function that is provided with an array of the updated
 *     values (which it then is responsible for updating)
 *
 * The class has these optional properties:
 *   values - an array of the initial values of the buttons selected.
 *
 * Requires stylesheets/perseus-admin-package/editor.less to look nice.
 */

var MultiButtonGroup = React.createClass({
    displayName: "MultiButtonGroup",

    propTypes: {
        values: React.PropTypes.array,
        buttons: React.PropTypes.array.isRequired,
        onChange: React.PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            values: []
        };
    },

    render: function render() {
        var buttons = this.props.buttons;
        var values = this.props.values;

        return React.createElement(
            "div",
            { className: "perseus-button-group" },
            _.map(buttons, function (button, i) {
                var isSelected = _.contains(values, button.value);
                return React.createElement(
                    "button",
                    { title: button.title,
                        id: "" + i, key: "" + i,
                        className: isSelected ? "selected" : "",
                        onClick: this.toggleSelect.bind(this, button.value) },
                    button.text
                );
            }, this)
        );
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this).focus();
        return true;
    },

    toggleSelect: function toggleSelect(newValue) {
        var values = this.props.values;

        if (_.contains(values, newValue)) {
            // If the value is already selected, unselect it
            this.props.onChange(_.without(values, newValue));
        } else {
            // Otherwise merge with other values and return
            this.props.onChange(_.union(values, [newValue]));
        }
    }
});

module.exports = MultiButtonGroup;

},{"react":246,"react-dom":95}],261:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require("react-dom");
var classNames = require("classnames");
var firstNumericalParse = require("../util.js").firstNumericalParse;
var captureScratchpadTouchStart = require("../util.js").captureScratchpadTouchStart;
var knumber = KhanUtil.knumber;
var toNumericString = KhanUtil.toNumericString;
var getNumericFormat = KhanUtil.getNumericFormat;

/* An input box that accepts only numeric strings
 *
 * Calls onChange(value, format) for valid numbers.
 * Reverts to the current value onBlur or on [ENTER],
 *   but maintains the format (i.e. 3/2, 1 1/2, 150%)
 * Accepts empty input and sends it to onChange as null
 *   if no numeric placeholder is set.
 * If given a checkValidity function, will turn
 *   the background/outline red when invalid
 * If useArrowKeys is set to true, up/down arrows will
 *   increment/decrement integers
 * Optionally takes a size ("mini", "small", "normal")
 */
var NumberInput = React.createClass({
    displayName: "NumberInput",

    propTypes: {
        value: React.PropTypes.number,
        format: React.PropTypes.string,
        placeholder: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
        onChange: React.PropTypes.func.isRequired,
        onFormatChange: React.PropTypes.func,
        checkValidity: React.PropTypes.func,
        size: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            value: null,
            placeholder: null,
            format: null,
            onFormatChange: function onFormatChange() {
                return null;
            },
            checkValidity: function checkValidity() {
                return true;
            },
            useArrowKeys: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            format: this.props.format
        };
    },

    render: function render() {
        var classes = classNames({
            "number-input": true,
            "number-input-label": this.props.label != null,
            "invalid-input": !this._checkValidity(this.props.value),
            "mini": this.props.size === "mini",
            "small": this.props.size === "small",
            "normal": this.props.size === "normal"
        });
        if (this.props.className != null) {
            classes = [classes, this.props.className].join(" ");
        }

        var input = React.createElement("input", _extends({}, this.props, {
            className: classes,
            type: "text",
            ref: "input",
            onChange: this._handleChange,
            onBlur: this._handleBlur,
            onKeyPress: this._handleBlur,
            onKeyDown: this._onKeyDown,
            onTouchStart: captureScratchpadTouchStart,
            defaultValue: toNumericString(this.props.value, this.state.format),
            value: undefined
        }));

        if (this.props.label) {
            return React.createElement(
                "label",
                null,
                this.props.label,
                input
            );
        } else {
            return input;
        }
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        if (!knumber.equal(this.getValue(), this.props.value)) {
            this._setValue(this.props.value, this.state.format);
        }
    },

    /* Return the current "value" of this input
     * If empty, it returns the placeholder (if it is a number) or null
     */
    getValue: function getValue() {
        return this.parseInputValue(ReactDOM.findDOMNode(this.refs.input).value);
    },

    parseInputValue: function parseInputValue(value) {
        if (value === "") {
            var placeholder = this.props.placeholder;
            return _.isFinite(placeholder) ? +placeholder : null;
        } else {
            var result = firstNumericalParse(value);
            return _.isFinite(result) ? result : this.props.value;
        }
    },

    /* Set text input focus to this input */
    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.input).focus();
    },

    _checkValidity: function _checkValidity(value) {
        if (value == null) {
            return true;
        }

        var val = firstNumericalParse(value);
        var checkValidity = this.props.checkValidity;

        return _.isFinite(val) && checkValidity(val);
    },

    _handleChange: function _handleChange(e) {
        var text = e.target.value;
        var value = this.parseInputValue(text);
        var format = getNumericFormat(text);

        this.props.onChange(value);
        if (format) {
            this.props.onFormatChange(value, format);
            this.setState({ format: format });
        }
    },

    _handleBlur: function _handleBlur(e) {
        // Only continue on blur or "enter"
        if (e.type === "keypress" && e.keyCode !== 13) {
            return;
        }

        this._setValue(this.props.value, this.state.format);
    },

    _onKeyDown: function _onKeyDown(e) {
        if (!this.props.useArrowKeys || !_.contains(["ArrowUp", "ArrowDown"], e.key)) {
            return;
        }

        var val = this.getValue();
        if (val !== Math.floor(val)) {
            return; // bail if not an integer
        }

        if (e.key === "ArrowUp") {
            val = val + 1;
        } else if (e.key === "ArrowDown") {
            val = val - 1;
        }

        if (this._checkValidity(val)) {
            this.props.onChange(val);
        }
    },

    _setValue: function _setValue(val, format) {
        $(ReactDOM.findDOMNode(this.refs.input)).val(toNumericString(val, format));
    }
});

module.exports = NumberInput;

},{"../util.js":303,"classnames":12,"react":246,"react-dom":95}],262:[function(require,module,exports){
"use strict";

var React = require('react');

/* A checkbox that syncs its value to props using the
 * renderer's onChange method, and gets the prop name
 * dynamically from its props list
 */
var PropCheckBox = React.createClass({
    displayName: "PropCheckBox",

    propTypes: {
        labelAlignment: React.PropTypes.oneOf(["left", "right"])
    },

    DEFAULT_PROPS: {
        label: null,
        onChange: null,
        labelAlignment: "left"
    },

    getDefaultProps: function getDefaultProps() {
        return this.DEFAULT_PROPS;
    },

    propName: function propName() {
        var propName = _.find(_.keys(this.props), function (localPropName) {
            return !_.has(this.DEFAULT_PROPS, localPropName);
        }, this);

        if (!propName) {
            throw new Error("Attempted to create a PropCheckBox with no " + "prop!");
        }

        return propName;
    },

    _labelAlignLeft: function _labelAlignLeft() {
        return this.props.labelAlignment === "left";
    },

    render: function render() {
        var propName = this.propName();
        return React.createElement(
            "label",
            null,
            this._labelAlignLeft() && this.props.label,
            React.createElement("input", { type: "checkbox",
                checked: this.props[propName],
                onChange: this.toggle }),
            !this._labelAlignLeft() && this.props.label
        );
    },

    toggle: function toggle() {
        var propName = this.propName();
        var changes = {};
        changes[propName] = !this.props[propName];
        this.props.onChange(changes);
    }
});

module.exports = PropCheckBox;

},{"react":246}],263:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var NumberInput = require("../components/number-input.jsx");

var truth = function truth() {
    return true;
};

/* A minor abstraction on top of NumberInput for ranges
 *
 */
var RangeInput = React.createClass({
    displayName: "RangeInput",

    propTypes: {
        value: React.PropTypes.array.isRequired,
        onChange: React.PropTypes.func.isRequired,
        placeholder: React.PropTypes.array,
        checkValidity: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: [null, null]
        };
    },

    render: function render() {
        var value = this.props.value;
        var _checkValidity = this.props.checkValidity || truth;

        return React.createElement(
            "div",
            { className: "range-input" },
            React.createElement(NumberInput, _extends({}, this.props, {
                value: value[0],
                checkValidity: function checkValidity(val) {
                    return _checkValidity([val, value[1]]);
                },
                onChange: this.onChange.bind(this, 0),
                placeholder: this.props.placeholder[0]
            })),
            React.createElement(NumberInput, _extends({}, this.props, {
                value: value[1],
                checkValidity: function checkValidity(val) {
                    return _checkValidity([value[0], val]);
                },
                onChange: this.onChange.bind(this, 1),
                placeholder: this.props.placeholder[1]
            }))
        );
    },

    onChange: function onChange(i, newVal) {
        var value = this.props.value;
        if (i === 0) {
            this.props.onChange([newVal, value[1]]);
        } else {
            this.props.onChange([value[0], newVal]);
        }
    }

});

module.exports = RangeInput;

},{"../components/number-input.jsx":261,"react":246}],264:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");

var Util = require("../util.js");
var Renderer = require("../renderer.jsx");

var PREFIX = "perseus-sortable";

// A placeholder that appears in the sortable whenever an item is dragged.
var Placeholder = React.createClass({
    displayName: "Placeholder",

    propTypes: {
        width: React.PropTypes.number.isRequired,
        height: React.PropTypes.number.isRequired
    },

    render: function render() {
        var className = [PREFIX + "-card", PREFIX + "-placeholder"].join(" ");
        var style = { width: this.props.width, height: this.props.height };

        if (this.props.margin != null) {
            style.margin = this.props.margin;
        }

        return React.createElement("li", { className: className, style: style });
    }
});

var STATIC = "static",
    DRAGGING = "dragging",
    ANIMATING = "animating",
    DISABLED = "disabled";

// A draggable item in the sortable. Can be in one of four states:
//     Static:    The item is not being interacted with.
//     Dragging:  The item is being dragged.
//     Animating: The item has been released, and is moving to its destination.
//     Disabled:  The item cannot be interacted with.
//
// Usual flow:      Static -> Dragging -> Animating -> Static
// [Dis|en]abling:  Static|Dragging|Animating -> Disabled -> Static
var Draggable = React.createClass({
    displayName: "Draggable",

    propTypes: {
        type: React.PropTypes.oneOf([STATIC, DRAGGING, ANIMATING, DISABLED]),
        content: React.PropTypes.string.isRequired,
        endPosition: React.PropTypes.object.isRequired,
        onRender: React.PropTypes.func.isRequired,
        onMouseDown: React.PropTypes.func.isRequired,
        onMouseMove: React.PropTypes.func.isRequired,
        onMouseUp: React.PropTypes.func.isRequired,
        onAnimationEnd: React.PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            type: STATIC
        };
    },

    getInitialState: function getInitialState() {
        return {
            startPosition: { left: 0, top: 0 },
            startMouse: { left: 0, top: 0 },
            mouse: { left: 0, top: 0 }
        };
    },

    componentDidMount: function componentDidMount() {
        this.isMouseMoveUpBound = false;
    },

    componentWillUnmount: function componentWillUnmount() {
        // Event handlers should be unbound before component unmounting, but
        // just in case...
        if (this.isMouseMoveUpBound) {
            this.unbindMouseMoveUp();
        }
    },

    getCurrentPosition: function getCurrentPosition() {
        return {
            left: this.state.startPosition.left + this.state.mouse.left - this.state.startMouse.left,
            top: this.state.startPosition.top + this.state.mouse.top - this.state.startMouse.top
        };
    },

    render: function render() {
        var className = [PREFIX + "-card", PREFIX + "-draggable", PREFIX + "-" + this.props.type].join(" ");

        var style = {
            position: "static"
        };

        if (this.props.type === DRAGGING || this.props.type === ANIMATING) {
            _.extend(style, { position: "absolute" }, this.getCurrentPosition());
        }

        if (this.props.width) {
            style.width = this.props.width + 1; // Fix for non-integer widths
        }
        if (this.props.height) {
            style.height = this.props.height;
        }
        if (this.props.margin != null) {
            style.margin = this.props.margin;
        }

        return React.createElement(
            "li",
            {
                className: className,
                style: style,
                onMouseDown: this.onMouseDown,
                onTouchStart: this.onMouseDown,
                onTouchMove: this.onMouseMove,
                onTouchEnd: this.onMouseUp,
                onTouchCancel: this.onMouseUp },
            React.createElement(Renderer, {
                content: this.props.content,
                onRender: this.props.onRender })
        );
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        if (this.props.type === prevProps.type) {
            return;
        }

        if (this.props.type === ANIMATING) {
            // Start animating
            var current = this.getCurrentPosition();
            var duration = 15 * Math.sqrt(Math.sqrt(Math.pow(this.props.endPosition.left - current.left, 2) + Math.pow(this.props.endPosition.top - current.top, 2)));

            $(ReactDOM.findDOMNode(this)).animate(this.props.endPosition, {
                duration: Math.max(duration, 1),
                // Animating -> Static
                complete: this.props.onAnimationEnd
            });
        } else if (this.props.type === STATIC) {
            // Ensure that any animations are done
            $(ReactDOM.findDOMNode(this)).finish();
        }
    },

    bindMouseMoveUp: function bindMouseMoveUp() {
        this.isMouseMoveUpBound = true;
        $(document).on("mousemove", this.onMouseMove);
        $(document).on("mouseup", this.onMouseUp);
    },

    unbindMouseMoveUp: function unbindMouseMoveUp() {
        this.isMouseMoveUpBound = false;
        $(document).off("mousemove", this.onMouseMove);
        $(document).off("mouseup", this.onMouseUp);
    },

    onMouseDown: function onMouseDown(event) {
        if (this.props.type !== STATIC) {
            return;
        }

        if (!(event.button === 0 || event.touches != null && event.touches.length === 1)) {
            return;
        }

        event.preventDefault();
        var loc = Util.extractPointerLocation(event);
        if (loc) {
            this.setState({
                startPosition: $(ReactDOM.findDOMNode(this)).position(),
                startMouse: loc,
                mouse: loc
            }, function () {
                this.bindMouseMoveUp();

                // Static -> Dragging
                this.props.onMouseDown();
            });
        }
    },

    onMouseMove: function onMouseMove(event) {
        if (this.props.type !== DRAGGING) {
            return;
        }

        event.preventDefault();
        var loc = Util.extractPointerLocation(event);
        if (loc) {
            this.setState({
                mouse: loc
            }, this.props.onMouseMove);
        }
    },

    onMouseUp: function onMouseUp(event) {
        if (this.props.type !== DRAGGING) {
            return;
        }

        event.preventDefault();
        var loc = Util.extractPointerLocation(event);
        if (loc) {
            this.unbindMouseMoveUp();

            // Dragging -> Animating
            this.props.onMouseUp();
        }
    }
});

var HORIZONTAL = "horizontal",
    VERTICAL = "vertical";

// The main sortable component.
var Sortable = React.createClass({
    displayName: "Sortable",

    propTypes: {
        options: React.PropTypes.array.isRequired,
        layout: React.PropTypes.oneOf([HORIZONTAL, VERTICAL]),
        padding: React.PropTypes.bool,
        disabled: React.PropTypes.bool,
        constraints: React.PropTypes.object,
        onMeasure: React.PropTypes.func,
        margin: React.PropTypes.number,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            layout: HORIZONTAL,
            padding: true,
            disabled: false,
            constraints: {},
            onMeasure: function onMeasure() {},
            margin: 5,
            onChange: function onChange() {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            items: this.itemsFromProps(this.props)
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var prevProps = this.props;

        if (!_.isEqual(nextProps.options, prevProps.options)) {

            // Regenerate items
            this.setState({
                items: this.itemsFromProps(nextProps)
            });
        } else if (nextProps.layout !== prevProps.layout || nextProps.padding !== prevProps.padding || nextProps.disabled !== prevProps.disabled || !_.isEqual(nextProps.constraints, prevProps.constraints)) {

            // Clear item measurements
            this.setState({
                items: this.clearItemMeasurements(this.state.items)
            });
        }
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        // Measure items if their dimensions have been reset
        if (this.state.items.length && !this.state.items[0].width) {
            this.measureItems();
        }
    },

    itemsFromProps: function itemsFromProps(props) {
        var type = props.disabled ? DISABLED : STATIC;
        return _.map(props.options, function (option, i) {
            return {
                option: option,
                key: i,
                type: type,
                endPosition: {},
                width: 0,
                height: 0
            };
        });
    },

    clearItemMeasurements: function clearItemMeasurements(items) {
        return _.map(items, function (item) {
            return _.extend(item, {
                width: 0,
                height: 0
            });
        });
    },

    measureItems: function measureItems() {
        var _this = this;

        // Measure all items and cache what their dimensions should be, taking
        // into account constraints and the current layout. This allows syncing
        // widths and heights for pretty rows/columns. Note that dimensions are
        // explictly set on Draggables - this prevents them from changing size
        // or shape while being dragged.

        var items = _.clone(this.state.items);
        var $items = _.map(items, function (item) {
            return $(ReactDOM.findDOMNode(this.refs[item.key]));
        }, this);

        var widths = _.invoke($items, "outerWidth");
        var heights = _.invoke($items, "outerHeight");

        var constraints = this.props.constraints;
        var layout = this.props.layout;

        var syncWidth;
        if (constraints.width) {
            // Items must be at least as wide as the specified constraint
            syncWidth = _.max(widths.concat(constraints.width));
        } else if (layout === VERTICAL) {
            // Sync widths to get a clean column
            syncWidth = _.max(widths);
        }

        var syncHeight;
        if (constraints.height) {
            // Items must be at least as high as the specified constraint
            syncHeight = _.max(heights.concat(constraints.height));
        } else if (layout === HORIZONTAL) {
            // Sync widths to get a clean row
            syncHeight = _.max(heights);
        }

        items = _.map(items, function (item, i) {
            item.width = syncWidth || widths[i];
            item.height = syncHeight || heights[i];
            return item;
        });

        this.setState({ items: items }, function () {
            _this.props.onMeasure({ widths: widths, heights: heights });
        });
    },

    remeasureItems: _.debounce(function () {
        this.setState({
            // Clear item measurements
            items: this.clearItemMeasurements(this.state.items)
        }, this.measureItems);
    }, 20),

    render: function render() {
        var className = [PREFIX, "layout-" + this.props.layout].join(" ");
        var cards = [];

        className += this.props.padding ? "" : " unpadded";

        _.each(this.state.items, function (item, i, items) {
            var isLast = i === items.length - 1;
            var isStatic = item.type === STATIC || item.type === DISABLED;
            var margin;

            if (this.props.layout === HORIZONTAL) {
                margin = "0 " + this.props.margin + "px 0 0"; // right
            } else if (this.props.layout === VERTICAL) {
                margin = "0 0 " + this.props.margin + "px 0"; // bottom
            }

            cards.push(React.createElement(Draggable, {
                content: item.option,
                key: item.key,
                type: item.type,
                ref: item.key,
                width: item.width,
                height: item.height,
                margin: isLast && isStatic ? 0 : margin,
                endPosition: item.endPosition,
                onRender: this.remeasureItems,
                onMouseDown: this.onMouseDown.bind(this, item.key),
                onMouseMove: this.onMouseMove.bind(this, item.key),
                onMouseUp: this.onMouseUp.bind(this, item.key),
                onTouchMove: this.onMouseMove.bind(this, item.key),
                onTouchEnd: this.onMouseUp.bind(this, item.key),
                onTouchCancel: this.onMouseUp.bind(this, item.key),
                onAnimationEnd: this.onAnimationEnd.bind(this, item.key) }));

            if (item.type === DRAGGING || item.type === ANIMATING) {
                cards.push(React.createElement(Placeholder, {
                    key: "placeholder_" + item.key,
                    ref: "placeholder_" + item.key,
                    width: item.width,
                    height: item.height,
                    margin: isLast ? 0 : margin }));
            }
        }, this);

        return React.createElement(
            "ul",
            { className: className },
            cards
        );
    },

    onMouseDown: function onMouseDown(key) {
        // Static -> Dragging
        var items = _.map(this.state.items, function (item) {
            if (item.key === key) {
                item.type = DRAGGING;
            }
            return item;
        });

        this.setState({ items: items });
    },

    onMouseMove: function onMouseMove(key) {
        // Dragging: Rearrange items based on draggable's position
        var $draggable = $(ReactDOM.findDOMNode(this.refs[key]));
        var $sortable = $(ReactDOM.findDOMNode(this));
        var items = _.clone(this.state.items);
        var item = _.findWhere(this.state.items, { key: key });
        var margin = this.props.margin;
        var currentIndex = _.indexOf(items, item);
        var newIndex = 0;

        items.splice(currentIndex, 1);

        if (this.props.layout === HORIZONTAL) {
            var midWidth = $draggable.offset().left - $sortable.offset().left;
            var sumWidth = 0;
            var cardWidth;

            _.each(items, function (item) {
                cardWidth = item.width;
                if (midWidth > sumWidth + cardWidth / 2) {
                    newIndex += 1;
                }
                sumWidth += cardWidth + margin;
            });
        } else {
            var midHeight = $draggable.offset().top - $sortable.offset().top;
            var sumHeight = 0;
            var cardHeight;

            _.each(items, function (item) {
                cardHeight = item.height;
                if (midHeight > sumHeight + cardHeight / 2) {
                    newIndex += 1;
                }
                sumHeight += cardHeight + margin;
            });
        }

        if (newIndex !== currentIndex) {
            items.splice(newIndex, 0, item);
            this.setState({ items: items });
        }
    },

    onMouseUp: function onMouseUp(key) {
        // Dragging -> Animating
        var items = _.map(this.state.items, function (item) {
            if (item.key === key) {
                item.type = ANIMATING;
                item.endPosition = $(ReactDOM.findDOMNode(this.refs["placeholder_" + key])).position();
            }
            return item;
        }, this);

        this.setState({ items: items });
        // HACK: We need to know *that* the widget changed, but currently it's
        // not set up in a nice way to tell us *how* it changed, since the
        // permutation of the items is stored in state.
        this.props.onChange({});
    },

    onAnimationEnd: function onAnimationEnd(key) {
        // Animating -> Static
        var items = _.map(this.state.items, function (item) {
            if (item.key === key) {
                item.type = STATIC;
            }
            return item;
        });

        this.setState({ items: items });
    },

    getOptions: function getOptions() {
        return _.pluck(this.state.items, "option");
    }
});

module.exports = Sortable;

},{"../renderer.jsx":298,"../util.js":303,"react":246,"react-dom":95}],265:[function(require,module,exports){
"use strict";

var React = require("react");
var TeX = require("react-components/js/tex.jsx");

var prettyBig = { fontSize: "150%" };
var slightlyBig = { fontSize: "120%" };
var trigStyle = { marginLeft: -4 };
var symbStyle = { fontSize: "130%" };

// These are functions because we want to generate a new component for each use
// on the page rather than reusing an instance (which will cause an error).
// Also, it's useful for things which might look different depending on the
// props.

var basic = [function () {
    return [React.createElement(
        "span",
        { style: slightlyBig },
        "+"
    ), "+"];
}, function () {
    return [React.createElement(
        "span",
        { style: prettyBig },
        "-"
    ), "-"];
},

// TODO(joel) - display as \cdot when appropriate
function (props) {
    if (props.convertDotToTimes) {
        return [React.createElement(
            TeX,
            { style: prettyBig },
            "\\times"
        ), "\\times"];
    } else {
        return [React.createElement(
            TeX,
            { style: prettyBig },
            "\\cdot"
        ), "\\cdot"];
    }
}, function () {
    return [React.createElement(
        TeX,
        { style: prettyBig },
        "\\frac{□}{□}"
    ),

    // If there's something in the input that can become part of a
    // fraction, typing "/" puts it in the numerator. If not, typing
    // "/" does nothing. In that case, enter a \frac.
    function (input) {
        var contents = input.latex();
        input.cmd("\\frac");
    }];
}, function () {
    return [React.createElement(
        TeX,
        { style: slightlyBig },
        "\\div"
    ), "\\div"];
}, function () {
    return [React.createElement(
        TeX,
        { style: slightlyBig, key: "eq" },
        "="
    ), "="];
}];

var buttonSets = {

    basic: basic,

    relations: [
    // [<TeX>{"="}</TeX>, "\\eq"],
    function () {
        return [React.createElement(
            TeX,
            null,
            "\\neq"
        ), "\\neq"];
    }, function () {
        return [React.createElement(
            TeX,
            null,
            "\\leq"
        ), "\\leq"];
    }, function () {
        return [React.createElement(
            TeX,
            null,
            "\\geq"
        ), "\\geq"];
    }, function () {
        return [React.createElement(
            TeX,
            null,
            "\\lt"
        ), "\\lt"];
    }, function () {
        return [React.createElement(
            TeX,
            null,
            "\\gt"
        ), "\\gt"];
    }],

    trig: [function () {
        return [React.createElement(
            TeX,
            null,
            "\\sin"
        ), "\\sin"];
    }, function () {
        return [React.createElement(
            TeX,
            null,
            "\\cos"
        ), "\\cos"];
    }, function () {
        return [React.createElement(
            TeX,
            null,
            "\\tan"
        ), "\\tan"];
    }, function () {
        return [React.createElement(
            TeX,
            { style: symbStyle },
            "\\theta"
        ), "\\theta"];
    }, function () {
        return [React.createElement(
            TeX,
            { style: symbStyle },
            "\\phi"
        ), "\\phi"];
    }],

    prealgebra: [function () {
        return [React.createElement(
            TeX,
            null,
            "\\sqrt{x}"
        ), "\\sqrt"];
    }, function () {
        return [React.createElement(
            TeX,
            { style: slightlyBig },
            "a^\u25A1"
        ), function (input) {
            var contents = input.latex();
            input.keystroke("Up");
            if (input.latex() === contents) {
                input.typedText("a^b");
            }
        }];
    }, function () {
        return [React.createElement(
            TeX,
            { style: slightlyBig },
            "\\pi"
        ), "\\pi"];
    }]

};

//declare buttonSetsType type from buttonSets
var buttonSetsType = React.PropTypes.arrayOf(React.PropTypes.oneOf(_(buttonSets).keys()));

var TexButtons = React.createClass({
    displayName: "TexButtons",

    propTypes: {
        onInsert: React.PropTypes.func.isRequired,
        sets: buttonSetsType.isRequired
    },

    render: function render() {
        var _this = this;

        // sort this.props.sets component by key_index of buttonSets
        // var sortedButtonSets = _.sortBy(this.props.sets,
        //     (setName) => _.keys(buttonSets).indexOf(setName));

        // make buttonSet(checked) by this.props.sets from buttonSets(template)
        var buttonSet = _(this.props.sets).map(function (setName) {
            return buttonSets[setName];
        });

        var buttonRows = _(buttonSet).map(function (row) {
            return row.map(function (symbGen) {
                // create a (component, thing we should send to mathquill) pair
                var symbol = symbGen(_this.props);
                return React.createElement(
                    "button",
                    { onClick: function onClick() {
                            return _this.props.onInsert(symbol[1]);
                        },
                        className: "tex-button",
                        tabIndex: -1,
                        type: "button" },
                    symbol[0]
                );
            });
        });

        var buttonPopup = _(buttonRows).map(function (row, i) {
            return React.createElement(
                "div",
                { className: "clearfix tex-button-row",
                    key: _this.props.sets[i] },
                row
            );
        });

        return React.createElement(
            "div",
            { className: this.props.className },
            buttonPopup
        );
    },
    statics: {
        buttonSets: buttonSets,
        buttonSetsType: buttonSetsType
    }
});

module.exports = TexButtons;

},{"react":246,"react-components/js/tex.jsx":71}],266:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react");
var ReactDOM = require("react-dom");

var TextInput = React.createClass({
    displayName: "TextInput",

    propTypes: {
        value: React.PropTypes.string,
        onChange: React.PropTypes.func.isRequired,
        className: React.PropTypes.string,
        onFocus: React.PropTypes.func,
        onBlur: React.PropTypes.func,
        disabled: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            value: "",
            disabled: false
        };
    },

    render: function render() {
        var _this = this;

        return React.createElement("input", _extends({}, this.props, {
            type: "text",
            disabled: this.props.disabled,
            onChange: function onChange(e) {
                return _this.props.onChange(e.target.value);
            }
        }));
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this).focus();
    },

    getStringValue: function getStringValue() {
        return ReactDOM.findDOMNode(this).value.toString();
    },

    setSelectionRange: function setSelectionRange(selectionStart, selectionEnd) {
        ReactDOM.findDOMNode(this).setSelectionRange(selectionStart, selectionEnd);
    },

    getSelectionStart: function getSelectionStart() {
        return ReactDOM.findDOMNode(this).selectionStart;
    },

    getSelectionEnd: function getSelectionEnd() {
        return ReactDOM.findDOMNode(this).selectionEnd;
    }
});

module.exports = TextInput;

},{"react":246,"react-dom":95}],267:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var _ = require("underscore");

var textWidthCache = {};
function getTextWidth(text) {
    if (!textWidthCache[text]) {
        // Hacky way to guess the width of an input box
        var $test = $("<span>").text(text).appendTo("body");
        textWidthCache[text] = $test.width() + 5;
        $test.remove();
    }
    return textWidthCache[text];
}

var TextListEditor = React.createClass({
    displayName: "TextListEditor",

    propTypes: {
        options: React.PropTypes.array,
        layout: React.PropTypes.string,
        onChange: React.PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            options: [],
            layout: "horizontal"
        };
    },

    getInitialState: function getInitialState() {
        return {
            items: this.props.options.concat("")
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            items: nextProps.options.concat("")
        });
    },

    render: function render() {
        var className = ["perseus-text-list-editor", "ui-helper-clearfix", "layout-" + this.props.layout].join(" ");

        var inputs = _.map(this.state.items, function (item, i) {
            return React.createElement(
                "li",
                { key: i },
                React.createElement("input", {
                    ref: "input_" + i,
                    type: "text",
                    value: item,
                    onChange: this.onChange.bind(this, i),
                    onKeyDown: this.onKeyDown.bind(this, i),
                    style: { width: getTextWidth(item) } })
            );
        }, this);

        return React.createElement(
            "ul",
            { className: className },
            inputs
        );
    },

    onChange: function onChange(index, event) {
        var items = _.clone(this.state.items);
        items[index] = event.target.value;

        if (index === items.length - 1) {
            items = items.concat("");
        }

        this.setState({ items: items });
        this.props.onChange(_.compact(items));
    },

    onKeyDown: function onKeyDown(index, event) {
        var which = event.nativeEvent.keyCode;

        // Backspace deletes an empty input...
        if (which === 8 /* backspace */ && this.state.items[index] === "") {
            event.preventDefault();

            var items = _.clone(this.state.items);
            var focusIndex = index === 0 ? 0 : index - 1;

            if (index === items.length - 1 && (index === 0 || items[focusIndex] !== "")) {
                // ...except for the last one, iff it is the only empty
                // input at the end.
                ReactDOM.findDOMNode(this.refs["input_" + focusIndex]).focus();
            } else {
                items.splice(index, 1);
                this.setState({ items: items }, function () {
                    ReactDOM.findDOMNode(this.refs["input_" + focusIndex]).focus();
                });
            }

            // Deleting the last character in the second-to-last input removes it
        } else if (which === 8 /* backspace */ && this.state.items[index].length === 1 && index === this.state.items.length - 2) {
            event.preventDefault();

            var items = _.clone(this.state.items);
            items.splice(index, 1);
            this.setState({ items: items });
            this.props.onChange(_.compact(items));

            // Enter adds an option below the current one...
        } else if (which === 13 /* enter */) {
                event.preventDefault();

                var items = _.clone(this.state.items);
                var focusIndex = index + 1;

                if (index === items.length - 2) {
                    // ...unless the empty input is just below.
                    ReactDOM.findDOMNode(this.refs["input_" + focusIndex]).focus();
                } else {
                    items.splice(focusIndex, 0, "");
                    this.setState({ items: items }, function () {
                        ReactDOM.findDOMNode(this.refs["input_" + focusIndex]).focus();
                    });
                }
            }
    }
});

module.exports = TextListEditor;

},{"react":246,"react-dom":95,"underscore":248}],268:[function(require,module,exports){
"use strict";

// Responsible for combining the text diffs from text-diff and the widget
// diffs from widget-differ.
var React = require("react");
var _ = require("underscore");

var TextDiff = require("./text-diff.jsx");
var WidgetDiff = require("./widget-diff.jsx");

// Deeply look up a property in an object,
// -> getPath(obj, ["a", "b", "c"]) === obj["a"]["b"]["c"]
var getPath = function getPath(obj, path, defaultValue) {
    var returningDefault = false;
    var result = _(path).reduce(function (obj, key) {
        if (returningDefault || !obj.hasOwnProperty(key)) {
            returningDefault = true;
            return defaultValue;
        }
        return obj[key];
    }, obj);
    return result;
};

var widgetsIn = function widgetsIn(item) {
    var question = item.question || {};
    var widgets = question.widgets || {};
    return _.keys(widgets);
};

var isWidget = function isWidget(obj) {
    return _.isObject(obj) && !("content" in obj);
};

var RevisionDiff = React.createClass({
    displayName: "RevisionDiff",

    propTypes: {
        beforeItem: React.PropTypes.object.isRequired,
        afterItem: React.PropTypes.object.isRequired
    },

    render: function render() {
        var before = this.props.beforeItem;
        var after = this.props.afterItem;
        // Not going to handle inserting hints in the middle so well, but
        // that's pretty complicated to handle nicely.
        // This will do for now.
        var hintCount = 0;
        if (_(before).has("hints") && _(after).has("hints")) {
            hintCount = Math.max(before.hints.length, after.hints.length);
        }

        var widgets = _.union(widgetsIn(before), widgetsIn(after));
        var sections = [{
            title: "Question Area",
            path: ["question"]
        }, {
            title: "Answer Area",
            path: ["answerArea", "options"]
        }].concat(_.times(hintCount, function (n) {
            return {
                title: "Hint #" + (n + 1),
                path: ["hints", n]
            };
        })).concat(_.map(widgets, function (widget) {
            return {
                title: widget,
                path: ["question", "widgets", widget, "options"]
            };
        }));

        var result = [];

        _(sections).each(function (section) {
            var path = section.path;
            var beforeValue = getPath(before, path, "");
            var afterValue = getPath(after, path, "");
            var displayedDiff;
            if (isWidget(beforeValue) || isWidget(afterValue)) {
                if (!isWidget(beforeValue)) {
                    beforeValue = {};
                }
                if (!isWidget(afterValue)) {
                    afterValue = {};
                }
                displayedDiff = React.createElement(WidgetDiff, {
                    key: section.title,
                    title: section.title,
                    before: beforeValue,
                    after: afterValue });
            } else {
                displayedDiff = React.createElement(TextDiff, {
                    key: section.title,
                    title: section.title,
                    before: beforeValue.content,
                    after: afterValue.content });
            }
            result.push(React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "diff-header" },
                    section.title
                ),
                React.createElement(
                    "div",
                    { className: "diff-header" },
                    section.title
                ),
                React.createElement(
                    "div",
                    { className: "diff-body ui-helper-clearfix" },
                    displayedDiff
                )
            ));
        });

        return React.createElement(
            "div",
            null,
            result
        );
    }
});

module.exports = RevisionDiff;

},{"./text-diff.jsx":271,"./widget-diff.jsx":273,"react":246,"underscore":248}],269:[function(require,module,exports){
"use strict";

// Split a word-wise diff generated by jsdiff into multiple lines, for the
// purpose of breaking up the diffs into lines, so that modified lines can be
// faintly highlighted

var splitDiff = function splitDiff(diffEntries) {
    var lines = [];
    var currentLine = [];
    _.each(diffEntries, function (entry) {
        var values = entry.value.split("\n");
        _.each(values, function (value, i) {
            var isNewline = i > 0;
            if (isNewline) {
                lines.push(currentLine);
                currentLine = [];
            }
            var newEntry = _.extend({}, entry, { value: value });
            currentLine.push(newEntry);
        });
    });

    if (currentLine.length) {
        lines.push(currentLine);
    }
    return lines;
};

module.exports = splitDiff;

},{}],270:[function(require,module,exports){
"use strict";

var jsdiff = require("../../lib/jsdiff");

var statusFor = function statusFor(chunk) {
    if (chunk.added) {
        return "added";
    } else if (chunk.removed) {
        return "removed";
    } else {
        return "unchanged";
    }
};

// Turn a chunk (which contains an array of values and a status)
// into an array of values, each with the same status
var splitUpChunk = function splitUpChunk(chunk) {
    return _.map(chunk.value, function (value) {
        return {
            value: value,
            status: statusFor(chunk)
        };
    });
};

// Apply `fn` to every element in `lst` and then concatenate all the results
// http://clojuredocs.org/clojure_core/clojure.core/mapcat
var mapcat = function mapcat(lst, fn) {
    return _.flatten(_.map(lst, fn), true /* only flatten one level */);
};

// > ArrayDiff.diff([1,2,3], [2,3,4]);
// = [{ "value": [1],
//      "removed": true },
//    { "value": [2, 3] },
//    { "value": [4],
//      "added": true }]
var ArrayDiff = new jsdiff.Diff();
ArrayDiff.tokenize = function (array) {
    return _.map(array, function (elem) {
        return [elem];
    });
};
// The default is `+` for string concatenation, which doesn't work for array
// concatenation.
ArrayDiff.join = function (a, b) {
    return a.concat(b);
};
// By default jsDiff uses ===
ArrayDiff.equals = _.isEqual;

// Take the output of jsdiff's function (which concatenates adjacent entries)
// and make it just one entry per chunk
// > flattenChunks([{ "value": [1],
//                    "removed": true },
//                  { "value": [2, 3] },
//                  { "value": [4],
//                    "added": true }])
// = [{ "value":1, "status":"removed"},
//    { "value":2, "status":"unchanged"},
//    { "value":3, "status":"unchanged"},
//    { "value":4, "status":"added"}]
var flattenChunks = function flattenChunks(chunks) {
    return mapcat(chunks, splitUpChunk);
};

// Take two arrays and create a diff for them. The result is two arrays of
// objects, one for the things that should be included in a 'before', and one
// for 'after'
var stringArrayDiff = function stringArrayDiff(a, b) {
    var diffResult = ArrayDiff.diff(a, b);
    var flattened = flattenChunks(diffResult);

    return {
        before: _.filter(flattened, function (entry) {
            return entry.status !== "added";
        }),
        after: _.filter(flattened, function (entry) {
            return entry.status !== "removed";
        })
    };
};

module.exports = stringArrayDiff;

},{"../../lib/jsdiff":1}],271:[function(require,module,exports){
"use strict";

var React = require("react");
var classNames = require("classnames");
var _ = require("underscore");

var diff = require("../../lib/jsdiff");
var splitDiff = require("./split-diff.jsx");
var stringArrayDiff = require("./string-array-diff.jsx");

var BEFORE = "before";
var AFTER = "after";

var IMAGE_REGEX = /http.*?\.png/g;

var imagesInString = function imagesInString(str) {
    return str.match(IMAGE_REGEX) || [];
};

var COLORS = {
    "before": "#FFAAAA",
    "after": "#AAFFAA"
};

var classFor = function classFor(entry, ifAdded, ifRemoved) {
    if (entry.added) {
        return ifAdded;
    } else if (entry.removed) {
        return ifRemoved;
    } else {
        return "";
    }
};

var ImageDiffSide = React.createClass({
    displayName: "ImageDiffSide",

    propTypes: {
        side: React.PropTypes.oneOf([BEFORE, AFTER]).isRequired,
        images: React.PropTypes.array.isRequired
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            this.props.images.length > 0 && React.createElement(
                "div",
                { className: "diff-header" },
                "Images"
            ),
            _.map(this.props.images, function (entry) {
                var className = classNames({
                    "image": true,
                    "image-unchanged": entry.status === "unchanged",
                    "image-added": entry.status === "added",
                    "image-removed": entry.status === "removed"
                });
                return React.createElement(
                    "div",
                    null,
                    React.createElement("img", { src: entry.value,
                        title: entry.value,
                        className: className })
                );
            })
        );
    }
});

var TextDiff = React.createClass({
    displayName: "TextDiff",

    propTypes: {
        before: React.PropTypes.string,
        after: React.PropTypes.string,
        title: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            before: "",
            after: "",
            title: ""
        };
    },

    getInitialState: function getInitialState() {
        return {
            collapsed: this.props.before === this.props.after
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            collapsed: nextProps.before === nextProps.after
        });
    },

    render: function render() {
        var _this = this;

        var diffed = diff.diffWords(this.props.before, this.props.after);

        var lines = splitDiff(diffed);

        beforeImages = imagesInString(this.props.before);
        afterImages = imagesInString(this.props.after);

        var images = stringArrayDiff(beforeImages, afterImages);

        var renderedLines = _.map(lines, function (line) {
            var contents = {};

            contents.before = _(line).map(function (entry, i) {
                var className = classFor(entry, "not-present", "removed dark");
                return React.createElement(
                    "span",
                    {
                        key: i,
                        className: className },
                    entry.value
                );
            });

            contents.after = _(line).map(function (entry, i) {
                var className = classFor(entry, "added dark", "not-present");
                return React.createElement(
                    "span",
                    {
                        key: i,
                        className: className },
                    entry.value
                );
            });
            return contents;
        });

        var className = classNames({
            "diff-row": true,
            "collapsed": this.state.collapsed
        });

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ui-helper-clearfix" },
                _.map([BEFORE, AFTER], function (side) {
                    return React.createElement(
                        "div",
                        { className: "diff-row " + side },
                        !_this.state.collapsed && _.map(renderedLines, function (line) {
                            var changed = line[side].length > 1;
                            var lineClass = classNames({
                                "diff-line": true,
                                "added": side === AFTER && changed,
                                "removed": side === BEFORE && changed
                            });
                            return React.createElement(
                                "div",
                                { className: lineClass },
                                line[side]
                            );
                        }),
                        !_this.state.collapsed && React.createElement(ImageDiffSide, {
                            side: side,
                            images: images[side] })
                    );
                })
            ),
            _.map([BEFORE, AFTER], function (side) {
                return React.createElement(
                    "div",
                    { className: className + " " + side,
                        onClick: _this.handleExpand },
                    _this.state.collapsed && React.createElement(
                        "span",
                        null,
                        React.createElement(
                            "span",
                            { className: "expand-button" },
                            " ",
                            "[ show unmodified ]"
                        )
                    )
                );
            })
        );
    },

    handleExpand: function handleExpand() {
        this.setState({ collapsed: false });
    }
});

module.exports = TextDiff;

},{"../../lib/jsdiff":1,"./split-diff.jsx":269,"./string-array-diff.jsx":270,"classnames":12,"react":246,"underscore":248}],272:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var UNCHANGED = "unchanged";
var CHANGED = "changed";
var ADDED = "added";
var REMOVED = "removed";

// For values which do not have further values nested within them (strings,
// numbers, and booleans)
var valueEntry = function valueEntry(before, after, key) {
    var status;
    if (before === after) {
        status = UNCHANGED;
    } else if (before === undefined) {
        status = ADDED;
    } else if (after === undefined) {
        status = REMOVED;
    } else {
        status = CHANGED;
    }

    return {
        after: JSON.stringify(after),
        before: JSON.stringify(before),
        children: [],
        key: key,
        status: status
    };
};

// For values which require a more granular diff (objects and arrays)
var objectEntry = function objectEntry(before, after, key) {
    var beforeKeys = _.isObject(before) ? _(before).keys() : [];
    var afterKeys = _.isObject(after) ? _(after).keys() : [];
    var keys = _.union(beforeKeys, afterKeys);

    var children = _.map(keys, function (key) {
        return performDiff((before || {})[key], (after || {})[key], key);
    });

    var status;
    if (before === undefined) {
        status = ADDED;
    } else if (after === undefined) {
        status = REMOVED;
    } else {
        var changed = _.any(children, function (child) {
            return child.status !== UNCHANGED;
        });
        status = changed ? CHANGED : UNCHANGED;
    }

    return {
        after: "",
        before: "",
        children: children,
        key: key,
        status: status
    };
};

var performDiff = function performDiff(before, after, /* optional */key) {
    if ((typeof before === "undefined" ? "undefined" : _typeof(before)) === "object" || (typeof after === "undefined" ? "undefined" : _typeof(after)) === "object") {
        return objectEntry(before, after, key);
    } else {
        return valueEntry(before, after, key);
    }
};

module.exports = performDiff;

},{}],273:[function(require,module,exports){
"use strict";

var classNames = require("classnames");
var React = require("react");

var performDiff = require("./widget-diff-performer.jsx");

var indentationFromDepth = function indentationFromDepth(depth) {
    return (depth - 1) * 20;
};

var BEFORE = "before";
var AFTER = "after";

var UNCHANGED = "unchanged";

var DiffSide = React.createClass({
    displayName: "DiffSide",

    propTypes: {
        side: React.PropTypes.oneOf([BEFORE, AFTER]).isRequired,
        className: React.PropTypes.string.isRequired,
        showKey: React.PropTypes.bool.isRequired,
        propKey: React.PropTypes.string.isRequired,
        value: React.PropTypes.string,
        depth: React.PropTypes.number.isRequired
    },

    render: function render() {
        var className = classNames(this.props.className, {
            "diff-row": true,
            before: this.props.side === BEFORE,
            after: this.props.side === AFTER
        });
        return React.createElement(
            "div",
            { className: className },
            React.createElement(
                "div",
                { style: {
                        paddingLeft: indentationFromDepth(this.props.depth)
                    } },
                this.props.showKey && this.props.propKey + ": ",
                React.createElement(
                    "span",
                    { className: "inner-value dark " + this.props.className },
                    this.props.value
                )
            )
        );
    }
});

var CollapsedRow = React.createClass({
    displayName: "CollapsedRow",

    propTypes: {
        depth: React.PropTypes.number,
        onClick: React.PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            depth: 0
        };
    },

    render: function render() {
        var self = this;
        return React.createElement(
            "div",
            { onClick: self.props.onClick },
            _.map([BEFORE, AFTER], function (side) {
                return React.createElement(
                    "div",
                    { className: "diff-row collapsed " + side,
                        key: side },
                    React.createElement(
                        "div",
                        { style: {
                                paddingLeft: indentationFromDepth(self.props.depth)
                            } },
                        React.createElement(
                            "span",
                            null,
                            " [ show unmodified ] "
                        )
                    )
                );
            })
        );
    }
});

// Component representing a single property that may be nested.
var DiffEntry = React.createClass({
    displayName: "DiffEntry",

    propTypes: {
        entry: React.PropTypes.shape({
            key: React.PropTypes.string,
            children: React.PropTypes.array,
            before: React.PropTypes.string,
            after: React.PropTypes.string
        }),
        depth: React.PropTypes.number,
        expanded: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            depth: 0
        };
    },

    getInitialState: function getInitialState() {
        return {
            expanded: this.props.expanded
        };
    },

    render: function render() {
        var entry = this.props.entry;
        var propertyDeleted = entry.status === "removed";
        var propertyAdded = entry.status === "added";
        var propertyChanged = entry.status === "changed";

        var hasChildren = entry.children.length > 0;

        var leftClass = classNames({
            "removed": (propertyDeleted || propertyChanged) && !hasChildren,
            "dark": propertyDeleted,
            "blank-space": propertyAdded
        });

        var rightClass = classNames({
            "added": (propertyAdded || propertyChanged) && !hasChildren,
            "dark": propertyAdded,
            "blank-space": propertyDeleted
        });

        var shownChildren;
        if (this.state.expanded) {
            shownChildren = entry.children;
        } else {
            shownChildren = _(entry.children).select(function (child) {
                return child.status !== UNCHANGED;
            });
        }

        var collapsed = shownChildren.length < entry.children.length;

        // don't hide just one entry
        if (entry.children.length === shownChildren.length + 1) {
            shownChildren = entry.children;
            collapsed = false;
        }

        var self = this;
        return React.createElement(
            "div",
            null,
            entry.key && React.createElement(
                "div",
                null,
                React.createElement(DiffSide, {
                    side: BEFORE,
                    className: leftClass,
                    depth: this.props.depth,
                    propKey: entry.key,
                    showKey: !propertyAdded,
                    value: entry.before }),
                React.createElement(DiffSide, {
                    side: AFTER,
                    className: rightClass,
                    depth: this.props.depth,
                    propKey: entry.key,
                    showKey: !propertyDeleted,
                    value: entry.after })
            ),
            _.map(shownChildren, function (child) {
                return React.createElement(DiffEntry, {
                    key: child.key,
                    depth: self.props.depth + 1,
                    entry: child,
                    expanded: self.state.expanded });
            }),
            collapsed && React.createElement(CollapsedRow, {
                depth: this.props.depth + 1,
                onClick: this.expand })
        );
    },

    expand: function expand() {
        this.setState({ expanded: true });
    }
});

var WidgetDiff = React.createClass({
    displayName: "WidgetDiff",

    propTypes: {
        before: React.PropTypes.shape({
            options: React.PropTypes.object
        }).isRequired,
        after: React.PropTypes.shape({
            options: React.PropTypes.object
        }).isRequired,
        title: React.PropTypes.string.isRequired
    },

    render: function render() {
        var diff = performDiff(this.props.before, this.props.after);
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                { className: "ui-helper-clearfix" },
                React.createElement(DiffEntry, { entry: diff })
            )
        );
    }
});

module.exports = WidgetDiff;

},{"./widget-diff-performer.jsx":272,"classnames":12,"react":246}],274:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var CombinedHintsEditor = require("./hint-editor.jsx");
var EnabledFeatures = require("./enabled-features.jsx");
var ItemEditor = require("./item-editor.jsx");
var ItemRenderer = require("./item-renderer.jsx");
var PropCheckBox = require("./components/prop-check-box.jsx");
var ApiOptions = require("./perseus-api.jsx").Options;

var JsonEditor = React.createClass({
    displayName: 'JsonEditor',


    getInitialState: function getInitialState() {
        return {
            currentValue: JSON.stringify(this.props.value, null, 4),
            valid: true
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var shouldReplaceContent = !this.state.valid || !_.isEqual(nextProps.value, JSON.parse(this.state.currentValue));

        if (shouldReplaceContent) {
            this.setState(this.getInitialState());
        }
    },

    render: function render() {
        var classes = "perseus-json-editor " + (this.state.valid ? "valid" : "invalid");

        return React.createElement('textarea', {
            className: classes,
            value: this.state.currentValue,
            onChange: this.handleChange,
            onKeyDown: this.handleKeyDown,
            onBlur: this.handleBlur });
    },

    handleKeyDown: function handleKeyDown(e) {
        // This handler allows the tab character to be entered by pressing
        // tab, instead of jumping to the next (non-existant) field
        if (e.key === "Tab") {
            var cursorPos = e.target.selectionStart;
            var v = e.target.value;
            var textBefore = v.substring(0, cursorPos);
            var textAfter = v.substring(cursorPos, v.length);
            e.target.value = textBefore + "    " + textAfter;
            e.target.selectionStart = textBefore.length + 4;
            e.target.selectionEnd = textBefore.length + 4;

            e.preventDefault();
            this.handleChange(e);
        }
    },

    handleChange: function handleChange(e) {
        var nextString = e.target.value;
        try {
            var json = JSON.parse(nextString);
            // Some extra handling to allow copy-pasting from /api/vi
            if (_.isString(json)) {
                json = JSON.parse(json);
            }
            // This callback unfortunately causes multiple renders,
            // but seems to be necessary to avoid componentWillReceiveProps
            // being called before setState has gone through
            this.setState({
                currentValue: nextString,
                valid: true
            }, function () {
                this.props.onChange(json);
            });
        } catch (ex) {
            this.setState({
                currentValue: nextString,
                valid: false
            });
        }
    },

    handleBlur: function handleBlur(e) {
        var nextString = e.target.value;
        try {
            var json = JSON.parse(nextString);
            // Some extra handling to allow copy-pasting from /api/vi
            if (_.isString(json)) {
                json = JSON.parse(json);
            }
            // This callback unfortunately causes multiple renders,
            // but seems to be necessary to avoid componentWillReceiveProps
            // being called before setState has gone through
            this.setState({
                currentValue: JSON.stringify(json, null, 4),
                valid: true
            }, function () {
                this.props.onChange(json);
            });
        } catch (ex) {
            this.setState({
                currentValue: JSON.stringify(this.props.value, null, 4),
                valid: true
            });
        }
    }
});

var EditorPage = React.createClass({
    displayName: 'EditorPage',

    propTypes: {
        // A function which takes a file object (guaranteed to be an image) and
        // a callback, then calls the callback with the url where the image
        // will be hosted. Image drag and drop is disabled when imageUploader
        // is null.
        imageUploader: React.PropTypes.func,
        enabledFeatures: EnabledFeatures.propTypes
    },

    getDefaultProps: function getDefaultProps() {
        return {
            developerMode: false,
            jsonMode: false,
            enabledFeatures: {
                toolTipFormats: true,
                useMathQuill: true
            },
            apiOptions: {} // deep defaults on updateRenderer
        };
    },

    getInitialState: function getInitialState() {
        return {
            json: {
                question: this.props.question,
                answer: this.props.answerArea,
                hints: this.props.hints
            },
            gradeMessage: "",
            wasAnswered: false
        };
    },

    render: function render() {

        return React.createElement(
            'div',
            { id: 'perseus', className: 'framework-perseus' },
            this.props.developerMode && React.createElement(
                'div',
                null,
                React.createElement(
                    'label',
                    null,
                    ' ',
                    'Developer JSON Mode:',
                    ' ',
                    React.createElement('input', { type: 'checkbox',
                        checked: this.props.jsonMode,
                        onChange: this.toggleJsonMode })
                )
            ),
            this.props.developerMode && this.props.jsonMode && React.createElement(
                'div',
                null,
                React.createElement(JsonEditor, {
                    multiLine: true,
                    value: this.state.json,
                    onChange: this.changeJSON })
            ),
            (!this.props.developerMode || !this.props.jsonMode) && React.createElement(ItemEditor, {
                ref: 'itemEditor',
                rendererOnly: this.props.jsonMode,
                question: this.props.question,
                answerArea: this.props.answerArea,
                imageUploader: this.props.imageUploader,
                onChange: this.handleChange,
                wasAnswered: this.state.wasAnswered,
                gradeMessage: this.state.gradeMessage,
                onCheckAnswer: this.handleCheckAnswer }),
            (!this.props.developerMode || !this.props.jsonMode) && React.createElement(CombinedHintsEditor, {
                ref: 'hintsEditor',
                hints: this.props.hints,
                imageUploader: this.props.imageUploader,
                onChange: this.handleChange })
        );
    },

    handleCheckAnswer: function handleCheckAnswer() {
        var result = this.scorePreview();
        this.setState({
            gradeMessage: result.message,
            wasAnswered: result.correct
        });
    },

    toggleJsonMode: function toggleJsonMode() {
        this.setState({
            json: this.toJSON(true)
        }, function () {
            this.props.onChange({
                jsonMode: !this.props.jsonMode
            });
        });
    },

    componentDidMount: function componentDidMount() {
        this.rendererMountNode = document.createElement("div");
        this.updateRenderer();
    },

    componentDidUpdate: function componentDidUpdate() {
        this.updateRenderer();
    },

    updateRenderer: function updateRenderer(cb) {
        if (this.props.jsonMode) {
            return;
        }
        var rendererConfig = _({
            item: this.toJSON(true),
            enabledFeatures: {
                toolTipFormats: true
            },
            apiOptions: _.extend({}, ApiOptions.defaults, this.props.apiOptions),
            initialHintsVisible: 0 /* none; to be displayed below */
        }).extend(_(this.props).pick("workAreaSelector", "solutionAreaSelector", "hintsAreaSelector", "problemNum", "enabledFeatures"));

        this.renderer = ReactDOM.render(React.createElement(ItemRenderer, rendererConfig), this.rendererMountNode, cb);
    },

    handleChange: function handleChange(toChange, cb) {
        var newProps = _(this.props).pick("question", "hints", "answerArea");
        _(newProps).extend(toChange);
        this.props.onChange(newProps, cb);
    },

    changeJSON: function changeJSON(newJson) {
        this.setState({
            json: newJson
        });
        this.props.onChange(newJson);
    },

    scorePreview: function scorePreview() {
        if (this.renderer) {
            return this.renderer.scoreInput();
        } else {
            return null;
        }
    },

    toJSON: function toJSON(skipValidation) {
        if (this.props.jsonMode) {
            return this.state.json;
        } else {
            return _.extend(this.refs.itemEditor.toJSON(skipValidation), {
                hints: this.refs.hintsEditor.toJSON(skipValidation)
            });
        }
    }

});

module.exports = EditorPage;

},{"./components/prop-check-box.jsx":262,"./enabled-features.jsx":276,"./hint-editor.jsx":277,"./item-editor.jsx":289,"./item-renderer.jsx":290,"./perseus-api.jsx":294,"react":246,"react-dom":95}],275:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require("react-dom");
var ReactCreateFragment = require("react-addons-create-fragment");

var PropCheckBox = require("./components/prop-check-box.jsx");
var Util = require("./util.js");
var Widgets = require("./widgets.js");
var DragTarget = require("react-components/js/drag-target.jsx");

// like [[snowman input-number 1]]
var rWidgetSplit = /(\[\[\u2603 [a-z-]+ [0-9]+\]\])/g;

var WidgetSelect = React.createClass({
    displayName: "WidgetSelect",

    handleChange: function handleChange(e) {
        var widgetType = e.target.value;
        if (widgetType === "") {
            // TODO(alpert): Not sure if change will trigger here
            // but might as well be safe
            return;
        }
        e.target.value = "";
        if (this.props.onChange) {
            this.props.onChange(widgetType);
        }
    },
    shouldComponentUpdate: function shouldComponentUpdate() {
        return false;
    },
    render: function render() {
        var widgets = Widgets.getPublicWidgets();
        //var junyiValidWidgets = _.pick(widgets, widgetsInEditor);
        var orderedWidgetNames = _.sortBy(_.keys(widgets), function (name) {
            return widgets[name].displayName;
        });

        return React.createElement(
            "select",
            { onChange: this.handleChange },
            React.createElement(
                "option",
                { value: "" },
                "\u65B0\u589E\u4E00\u500B widget",
                "\u2026"
            ),
            React.createElement(
                "option",
                { disabled: true },
                "--"
            ),
            _.map(orderedWidgetNames, function (name) {
                return React.createElement(
                    "option",
                    { value: name, key: name },
                    widgets[name].displayName
                );
            })
        );
    }
});

var WidgetEditor = React.createClass({
    displayName: "WidgetEditor",

    propTypes: {
        type: React.PropTypes.string,
        id: React.PropTypes.string,
        graded: React.PropTypes.bool,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            graded: true,
            options: {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            showWidget: true
        };
    },

    render: function render() {
        // We can't call our widget's `toJSON` here, because on
        // first render that ref hasn't mounted yet.
        // This means that on first render we'll send in
        // `options: {}` to `upgradeWidgetInfoToLatestVersion`, but
        // `upgradeWidgetInfoToLatestVersion` accounts for that
        // before sending {} to any of our prop upgrade functions.
        var upgradedWidgetInfo = Widgets.upgradeWidgetInfoToLatestVersion(this.props);
        var type = upgradedWidgetInfo.type;

        var Editor2 = Widgets.getEditor(type);

        var isUngradedEnabled = type === "transformer";
        var direction = this.state.showWidget ? "down" : "right";

        var gradedPropBox = React.createElement(PropCheckBox, { label: "\u8A55\u5206:",
            graded: upgradedWidgetInfo.graded,
            onChange: this.props.onChange });

        return React.createElement(
            "div",
            { className: "perseus-widget-editor" },
            React.createElement(
                "a",
                { href: "#", className: "perseus-widget-editor-title " + (this.state.showWidget ? "open" : "closed"),
                    onClick: this.toggleWidget },
                this.props.id,
                React.createElement("i", { className: "icon-chevron-" + direction })
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-editor-content " + (this.state.showWidget ? "enter" : "leave") },
                isUngradedEnabled && gradedPropBox,
                React.createElement(Editor2, _extends({
                    ref: "widget",
                    onChange: this._handleWidgetChange
                }, upgradedWidgetInfo.options))
            )
        );
    },

    toggleWidget: function toggleWidget(e) {
        e.preventDefault();
        this.setState({ showWidget: !this.state.showWidget });
    },

    _handleWidgetChange: function _handleWidgetChange(newProps, cb) {
        // TODO(jack): It is unfortunate to call toJSON here, but is
        // important so that the widgetInfo we pass to our upgrade
        // functions is always complete. If we just sent this.props in,
        // we could run into situations where we would send things like
        // { answerType: "decimal" } to our upgrade functions, without
        // the rest of the props representing the widget.
        var currentWidgetInfo = _.extend({}, this.props, {
            options: this.refs.widget.toJSON(true)
        });
        var newWidgetInfo = Widgets.upgradeWidgetInfoToLatestVersion(currentWidgetInfo);
        newWidgetInfo.options = _.extend(newWidgetInfo.options, newProps);
        this.props.onChange(newWidgetInfo, cb);
    },

    toJSON: function toJSON(skipValidation) {
        return {
            type: this.props.type,
            graded: this.props.graded,
            options: this.refs.widget.toJSON(skipValidation),
            version: Widgets.getVersion(this.props.type)
        };
    }
});

// This is more general than the actual markdown image parsing regex,
// which is fine for correctness since it should only mean we could
// store extra image dimensions, unless the question is insanely
// formatted.
// A simplified regex here should hopefully be easier to keep in
// sync if the markdown parsing changes, though if it becomes
// easy to hook into the actual markdown regex without copy-pasting
// it, we should do that.
var IMAGE_REGEX = /!\[[^\]]*\]\(([^\s\)]+)[^\)]*\)/g;

/**
 * Find all the matches to a /g regex.
 *
 * Returns an array of the regex matches. Infinite loops if `regex` does not
 * have a /g modifier.
 *
 * Note: Returns an array of the capture objects, whereas String::match
 * ignores captures. If you don't need captures, use String::match
 */
var allMatches = function allMatches(regex, str) {
    var result = [];
    while (true) {
        var match = regex.exec(str);
        if (!match) {
            break;
        }
        result.push(match);
    }
    return result;
};

/**
 * Return an array of URLs of all the images in the given renderer
 * markdown.
 */
var imageUrlsFromContent = function imageUrlsFromContent(content) {
    return _.map(allMatches(IMAGE_REGEX, content), function (capture) {
        return capture[1];
    });
};

/**
 * Sends the dimensions of the image located at the given url to `callback`
 */
var sizeImage = function sizeImage(url, callback) {
    var image = new Image();
    image.onload = function () {
        var width = image.naturalWidth || image.width;
        var height = image.naturalHeight || image.height;
        callback(width, height);
    };
    image.src = url;
};

var Editor = React.createClass({
    displayName: "Editor",

    propTypes: {
        imageUploader: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            content: "",
            placeholder: "",
            widgets: {},
            images: {},
            widgetEnabled: true,
            immutableWidgets: false
        };
    },

    getWidgetEditor: function getWidgetEditor(id, type) {
        if (!Widgets.getEditor(type)) {
            return;
        }
        return React.createElement(WidgetEditor, _extends({
            ref: id,
            id: id,
            type: type,
            onChange: this._handleWidgetEditorChange.bind(this, id)
        }, this.props.widgets[id]));
    },

    _handleWidgetEditorChange: function _handleWidgetEditorChange(id, newProps, cb) {
        var widgets = _.clone(this.props.widgets);
        widgets[id] = _.extend({}, widgets[id], newProps);
        this.props.onChange({ widgets: widgets }, cb);
    },

    /**
     * Calculate the size of all the images in props.content, and send
     * those sizes to this.props.images using props.onChange.
     */
    _sizeImages: function _sizeImages(props) {
        var imageUrls = imageUrlsFromContent(props.content);

        // Discard any images in our dimension table that no
        // longer exist in content.
        var images = _.pick(props.images, imageUrls);

        // Only calculate sizes for images that were not present previously.
        // Most content edits shouldn't have new images.
        // This could get weird in the case of multiple images with the same
        // URL, if you've changed the backing image size, but given graphie
        // hashes it's probably an edge case.
        var newImageUrls = _.filter(imageUrls, function (url) {
            return !images[url];
        });

        // TODO(jack): Q promises would make this nicer and only
        // fire once.
        _.each(newImageUrls, function (url) {
            sizeImage(url, function (width, height) {
                // We keep modifying the same image object rather than a new
                // copy from this.props because all changes here are additive.
                // Maintaining old changes isn't strictly necessary if
                // props.onChange calls are not batched, but would be if they
                // were, so this is nice from that anti-race-condition
                // perspective as well.
                images[url] = {
                    width: width,
                    height: height
                };
                props.onChange({
                    images: _.clone(images)
                });
            });
        });
    },

    render: function render() {
        var pieces;
        var widgets;
        var underlayPieces;
        var widgetsDropDown;
        var templatesDropDown;
        var widgetsAndTemplates;

        if (this.props.widgetEnabled) {
            pieces = Util.split(this.props.content, rWidgetSplit);
            widgets = {};
            underlayPieces = [];

            for (var i = 0; i < pieces.length; i++) {
                var type = i % 2;
                if (type === 0) {
                    // Normal text
                    underlayPieces.push(pieces[i]);
                } else {
                    // Widget reference
                    var match = Util.rWidgetParts.exec(pieces[i]);
                    var id = match[1];
                    var type = match[2];

                    var selected = false;
                    // TODO(alpert):
                    // var selected = focused && selStart === selEnd &&
                    //         offset <= selStart &&
                    //         selStart < offset + text.length;
                    // if (selected) {
                    //     selectedWidget = id;
                    // }

                    var duplicate = id in widgets;

                    widgets[id] = this.getWidgetEditor(id, type);
                    var classes = (duplicate || !widgets[id] ? "error " : "") + (selected ? "selected " : "");
                    var key = duplicate ? i : id;
                    underlayPieces.push(React.createElement(
                        "b",
                        { className: classes, key: key },
                        pieces[i]
                    ));
                }
            }

            // TODO(alpert): Move this to the content-change event handler
            // _.each(_.keys(this.props.widgets), function(id) {
            //     if (!(id in widgets)) {
            //         // It's strange if these preloaded options stick around
            //         // since it's inconsistent with how things work if you
            //         // don't have the serialize/deserialize step in the
            //         // middle
            //         // TODO(alpert): Save options in a consistent manner so
            //         // that you can undo the deletion of a widget
            //         delete this.props.widgets[id];
            //     }
            // }, this);

            this.widgetIds = _.keys(widgets);
            widgetsDropDown = React.createElement(WidgetSelect, { onChange: this.addWidget });

            templatesDropDown = React.createElement(
                "select",
                { onChange: this.addTemplate },
                React.createElement(
                    "option",
                    { value: "" },
                    "\u63D2\u5165\u7BC4\u672C(\u53EF\u81EA\u884C\u8ABF\u6574\u6578\u5B57)",
                    "\u2026"
                ),
                React.createElement(
                    "option",
                    { disabled: true },
                    "--"
                ),
                React.createElement(
                    "option",
                    { value: "sqrt" },
                    "\u6839\u865F"
                ),
                React.createElement(
                    "option",
                    { value: "frac" },
                    "\u5206\u6578"
                ),
                React.createElement(
                    "option",
                    { value: "square" },
                    "\u6B21\u65B9"
                ),
                React.createElement(
                    "option",
                    { value: "overline" },
                    "\u7DDA\u6BB5"
                ),
                React.createElement(
                    "option",
                    { value: "frown" },
                    "\u5F27\u7DDA"
                ),
                React.createElement(
                    "option",
                    { value: "vec" },
                    "\u5411\u91CF/\u5C04\u7DDA"
                ),
                React.createElement(
                    "option",
                    { value: "table" },
                    "\u8868\u683C"
                ),
                React.createElement(
                    "option",
                    { value: "matrix" },
                    "\u77E9\u9663"
                ),
                React.createElement(
                    "option",
                    { value: "alignment" },
                    "\u4E92\u76F8\u5C0D\u9F4A\u7684\u65B9\u7A0B\u5F0F(\u7528&\u5C0D\u9F4A)"
                ),
                React.createElement(
                    "option",
                    { value: "piecewise" },
                    "\u806F\u7ACB\u65B9\u7A0B\u5F0F"
                ),
                React.createElement(
                    "option",
                    { value: "color" },
                    "\u984F\u8272(\u652F\u63F4red/blue/orange/fuchsia/green/gray/purple/HTML\u8272\u78BC)"
                )
            );

            if (!this.props.immutableWidgets) {
                widgetsAndTemplates = React.createElement(
                    "div",
                    { className: "perseus-editor-widgets" },
                    React.createElement(
                        "div",
                        { className: "perseus-editor-widgets-selectors" },
                        widgetsDropDown,
                        templatesDropDown
                    ),
                    ReactCreateFragment(widgets)
                );
            }
        } else {
            underlayPieces = [this.props.content];
        }

        // Without this, the underlay isn't the proper size when the text ends
        // with a newline.
        underlayPieces.push(React.createElement("br", { key: "end" }));

        var completeTextarea = [React.createElement(
            "div",
            { className: "perseus-textarea-underlay",
                ref: "underlay",
                key: "underlay" },
            underlayPieces
        ), React.createElement("textarea", { ref: "textarea",
            key: "textarea",
            onChange: this.handleChange,
            placeholder: this.props.placeholder,
            value: this.props.content })];
        var textareaWrapper;
        if (this.props.imageUploader) {
            textareaWrapper = React.createElement(
                DragTarget,
                {
                    onDrop: this.handleDrop,
                    className: "perseus-textarea-pair" },
                completeTextarea
            );
        } else {
            textareaWrapper = React.createElement(
                "div",
                { className: "perseus-textarea-pair" },
                completeTextarea
            );
        }

        return React.createElement(
            "div",
            { className: "perseus-single-editor " + (this.props.className || "") },
            textareaWrapper,
            widgetsAndTemplates
        );
    },

    componentDidMount: function componentDidMount() {
        // This can't be in componentWillMount because that's happening during
        // the middle of our parent's render, so we can't call
        // this.props.onChange during that, since it calls our parent's
        // setState
        this._sizeImages(this.props);
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        // TODO(alpert): Maybe fix React so this isn't necessary
        var textarea = ReactDOM.findDOMNode(this.refs.textarea);
        textarea.value = this.props.content;

        // This can't be in componentWillReceiveProps because that's happening
        // during the middle of our parent's render.
        if (this.props.content !== prevProps.content) {
            this._sizeImages(this.props);
        }
    },

    handleDrop: function handleDrop(e) {
        var _this = this;

        var content = this.props.content;
        var dataTransfer = e.nativeEvent.dataTransfer;

        // files will hold something if the drag was from the desktop or a file
        // located on the user's computer.
        var files = dataTransfer.files;

        // ... but we only get a url if the drag originated in another window
        if (files.length === 0) {
            var imageUrl = dataTransfer.getData("URL");

            if (imageUrl) {
                // TODO(joel) - relocate when the image upload dialog lands
                var newContent = content + "\n\n![](" + imageUrl + ")";
                this.props.onChange({ content: newContent });
            }

            return;
        }

        /* For each file we make sure it's an image, then create a sentinel -
         * snowman + identifier to insert into the current text. The sentinel
         * only lives there temporarily until we get a response back from the
         * server that the image is now hosted on AWS, at which time we replace
         * the temporary sentinel with the permanent url for the image.
         *
         * There is an abuse of tap in the middle of the pipeline to make sure
         * everything is sequenced in the correct order. We want to modify the
         * content (given any number of images) at the same time, i.e. only
         * once, so we do that step with the tap. After the content has been
         * changed we send off the request for each image.
         *
         * Note that the snowman doesn't do anything special in this case -
         * it's effectively just part of a broken link. Perseus could be
         * extended to recognize this sentinel and highlight it like for
         * widgets.
         */
        _(files).chain().map(function (file) {
            if (!file.type.match('image.*')) {
                return null;
            }

            var sentinel = "\u2603 " + _.uniqueId("image_");
            // TODO(joel) - figure out how to temporarily include the image
            // before the server returns.
            content += "\n\n![](" + sentinel + ")";

            return { file: file, sentinel: sentinel };
        }).reject(_.isNull).tap(function () {
            _this.props.onChange({ content: content });
        }).each(function (fileAndSentinel) {
            _this.props.imageUploader(fileAndSentinel.file, function (url) {
                _this.props.onChange({
                    content: _this.props.content.replace(fileAndSentinel.sentinel, url)
                });
            });
        });
    },

    handleChange: function handleChange() {
        var textarea = ReactDOM.findDOMNode(this.refs.textarea);
        this.props.onChange({ content: textarea.value });
    },

    addWidget: function addWidget(widgetType) {
        var oldContent = this.props.content;

        // Add newlines before "big" widgets like graphs
        if (widgetType !== "input-number" && widgetType !== "dropdown") {
            oldContent = oldContent.replace(/\n*$/, "\n\n");
        }

        for (var i = 1; oldContent.indexOf("[[\u2603 " + widgetType + " " + i + "]]") > -1; i++) {
            // pass
        }

        var id = widgetType + " " + i;
        var newContent = oldContent + "[[\u2603 " + id + "]]";

        var widgets = _.clone(this.props.widgets);
        widgets[id] = { type: widgetType };
        this.props.onChange({
            content: newContent,
            widgets: widgets
        }, this.focusAndMoveToEnd);
    },

    addTemplate: function addTemplate(e) {
        var templateType = e.target.value;
        if (templateType === "") {
            return;
        }
        e.target.value = "";

        var oldContent = this.props.content;

        // Force templates to have a blank line before them,
        // as they are usually used as block elements
        // (especially important for tables)
        oldContent = oldContent.replace(/\n*$/, "\n\n");

        var template;
        if (templateType === "sqrt") {
            template = "$\\sqrt{3}$";
        } else if (templateType === "frac") {
            template = "$\\frac{2}{5}$";
        } else if (templateType === "square") {
            template = "$x^3$";
        } else if (templateType === "overline") {
            template = "$\\overline{ABC}$";
        } else if (templateType === "frown") {
            template = "$\\overset{\\LARGE \\frown}{\\small{AB}}$";
        } else if (templateType === "vec") {
            template = "$\\overset{\\large \\rightharpoonup}{\\small{AB}}$";
        } else if (templateType === "table") {
            template = "header 1 | header 2 | header 3\n" + "- | - | -\n" + "data 1 | data 2 | data 3\n" + "data 4 | data 5 | data 6\n" + "data 7 | data 8 | data 9";
        } else if (templateType === "matrix") {
            template = "$\\begin{bmatrix}" + " a & b & c \\\\ d & e & f \\\\ g & h & i" + "\\end{bmatrix}$";
        } else if (templateType === "alignment") {
            template = "$\\begin{align} x+5 &= 30 \\\\" + "x+5-5 &= 30-5 \\\\" + "x &= 25 \\end{align}$";
        } else if (templateType === "piecewise") {
            template = "$\\begin{cases}" + "x-3=5 \\\\" + "3x+5y=0 \\\\" + "x^2+5=-1 \\\\" + "\\end{cases}$";
        } else if (templateType === "color") {
            template = "$\\color{fuchsia}{顏色可以自己換}$";
        } else {
            throw new Error("Invalid template type: " + templateType);
        }

        var newContent = oldContent + template;

        this.props.onChange({ content: newContent }, this.focusAndMoveToEnd);
    },

    toJSON: function toJSON(skipValidation) {
        // Could be _.pick(this.props, "content", "widgets"); but validation!
        var widgets = {};
        var widgetIds = _.intersection(this.widgetIds, _.keys(this.refs));

        _.each(widgetIds, function (id) {
            widgets[id] = this.refs[id].toJSON(skipValidation);
        }, this);

        return {
            content: this.props.content,
            images: this.props.images,
            widgets: widgets
        };
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.textarea).focus();
    },

    focusAndMoveToEnd: function focusAndMoveToEnd() {
        this.focus();
        var textarea = ReactDOM.findDOMNode(this.refs.textarea);
        textarea.selectionStart = textarea.value.length;
        textarea.selectionEnd = textarea.value.length;
    }
});

module.exports = Editor;

},{"./components/prop-check-box.jsx":262,"./util.js":303,"./widgets.js":306,"react":246,"react-addons-create-fragment":63,"react-components/js/drag-target.jsx":67,"react-dom":95}],276:[function(require,module,exports){
'use strict';

var React = require('react');

module.exports = {
    propTypes: React.PropTypes.shape({
        toolTipFormats: React.PropTypes.bool.isRequired,
        useMathQuill: React.PropTypes.bool.isRequired
    }).isRequired,

    defaults: {
        // TODO(jack): Remove this two options
        toolTipFormats: true,
        useMathQuill: false
    }
};

},{"react":246}],277:[function(require,module,exports){
"use strict";

/* Collection of classes for rendering the hint editor area,
 * hint editor boxes, and hint previews
 */

var React = require('react');
var ReactDOM = require("react-dom");
var Editor = require("./editor.jsx");
var HintRenderer = require("./hint-renderer.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");

/* Renders a hint editor box
 *
 * This includes:
 *  ~ A "Hint" title
 *  ~ the textarea for the hint
 *  ~ the "remove this hint" box
 *  ~ the move hint up/down arrows
 */
var HintEditor = React.createClass({
    displayName: "HintEditor",

    propTypes: {
        imageUploader: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            content: ""
        };
    },

    render: function render() {
        var _this = this;

        return React.createElement(
            "div",
            { className: "perseus-hint-editor perseus-editor-left-cell" },
            React.createElement(
                "div",
                { className: "pod-title" },
                "Hint"
            ),
            React.createElement(Editor, { ref: "editor",
                widgets: this.props.widgets,
                content: this.props.content,
                images: this.props.images,
                placeholder: "Type your hint here...",
                imageUploader: this.props.imageUploader,
                onChange: this.props.onChange }),
            React.createElement(
                "div",
                { className: "hint-controls-container clearfix" },
                React.createElement(
                    "span",
                    { className: "reorder-hints" },
                    React.createElement(
                        "a",
                        { href: "#",
                            className: this.props.isLast && "hidden",
                            onClick: function onClick() {
                                _this.props.onMove(1);
                                return false;
                            } },
                        React.createElement("span", { className: "icon-circle-arrow-down" })
                    ),
                    ' ',
                    React.createElement(
                        "a",
                        { href: "#",
                            className: this.props.isFirst && "hidden",
                            onClick: function onClick() {
                                _this.props.onMove(-1);
                                return false;
                            } },
                        React.createElement("span", { className: "icon-circle-arrow-up" })
                    ),
                    ' ',
                    this.props.isLast && React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "The last hint is automatically bolded."
                        )
                    )
                ),
                React.createElement(
                    "a",
                    { href: "#", className: "remove-hint simple-button orange",
                        onClick: function onClick() {
                            _this.props.onRemove();
                            return false;
                        } },
                    React.createElement("span", { className: "icon-trash" }),
                    " Remove this hint",
                    ' '
                )
            )
        );
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.editor).focus();
    },

    toJSON: function toJSON(skipValidation) {
        return this.refs.editor.toJSON(skipValidation);
    }
});

/* A single hint-row containing a hint editor and preview */
var CombinedHintEditor = React.createClass({
    displayName: "CombinedHintEditor",

    propTypes: {
        imageUploader: React.PropTypes.func
    },

    render: function render() {
        var shouldBold = this.props.isLast && !/\*\*/.test(this.props.hint.content);
        return React.createElement(
            "div",
            { className: "perseus-combined-hint-editor " + "perseus-editor-row" },
            React.createElement(HintEditor, {
                ref: "editor",
                isFirst: this.props.isFirst,
                isLast: this.props.isLast,
                widgets: this.props.hint.widgets,
                content: this.props.hint.content,
                images: this.props.hint.images,
                imageUploader: this.props.imageUploader,
                onChange: this.props.onChange,
                onRemove: this.props.onRemove,
                onMove: this.props.onMove }),
            React.createElement(
                "div",
                { className: "perseus-editor-right-cell" },
                React.createElement(HintRenderer, { hint: this.props.hint, bold: shouldBold })
            )
        );
    },

    toJSON: function toJSON(skipValidation) {
        return this.refs.editor.toJSON(skipValidation);
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.editor).focus();
    }
});

/* The entire hints editing/preview area
 *
 * Includes:
 *  ~ All the hint edit boxes, move and remove buttons
 *  ~ All the hint previews
 *  ~ The "add a hint" button
 */
var CombinedHintsEditor = React.createClass({
    displayName: "CombinedHintsEditor",

    propTypes: {
        imageUploader: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            onChange: function onChange() {},
            hints: []
        };
    },

    render: function render() {
        var hints = this.props.hints;
        var hintElems = _.map(hints, function (hint, i) {
            return React.createElement(CombinedHintEditor, {
                ref: "hintEditor" + i,
                key: "hintEditor" + i,
                isFirst: i === 0,
                isLast: i + 1 === hints.length,
                hint: hint,
                imageUploader: this.props.imageUploader,
                onChange: this.handleHintChange.bind(this, i),
                onRemove: this.handleHintRemove.bind(this, i),
                onMove: this.handleHintMove.bind(this, i) });
        }, this);

        return React.createElement(
            "div",
            { className: "perseus-hints-container perseus-editor-table" },
            hintElems,
            React.createElement(
                "div",
                { className: "perseus-editor-row" },
                React.createElement(
                    "div",
                    { className: "add-hint-container perseus-editor-left-cell" },
                    React.createElement(
                        "a",
                        { href: "#", className: "simple-button orange",
                            onClick: this.addHint },
                        React.createElement("span", { className: "icon-plus" }),
                        ' ',
                        "Add a hint",
                        ' '
                    )
                ),
                React.createElement("div", { className: "perseus-editor-right-cell" })
            )
        );
    },

    handleHintChange: function handleHintChange(i, newProps, cb) {
        var hints = _(this.props.hints).clone();
        hints[i] = _.extend({}, hints[i], newProps);
        this.props.onChange({ hints: hints }, cb);
    },

    handleHintRemove: function handleHintRemove(i) {
        var hints = _(this.props.hints).clone();
        hints.splice(i, 1);
        this.props.onChange({ hints: hints });
    },

    handleHintMove: function handleHintMove(i, dir) {
        var _this2 = this;

        var hints = _(this.props.hints).clone();
        var hint = hints.splice(i, 1)[0];
        hints.splice(i + dir, 0, hint);
        this.props.onChange({ hints: hints }, function () {
            ReactDOM.findDOMNode(_this2.refs["hintEditor" + (i + dir)]).focus();
        });
    },

    addHint: function addHint() {
        var _this3 = this;

        var hints = _(this.props.hints).clone().concat([{ content: "" }]);
        this.props.onChange({ hints: hints }, function () {
            var i = hints.length - 1;
            ReactDOM.findDOMNode(_this3.refs["hintEditor" + i]).focus();
        });

        // TODO(joel) - is this doing anything?
        return false;
    },

    toJSON: function toJSON(skipValidation) {
        return this.props.hints.map(function (hint, i) {
            return this.refs["hintEditor" + i].toJSON(skipValidation);
        }, this);
    }
});

module.exports = CombinedHintsEditor;

},{"./editor.jsx":275,"./hint-renderer.jsx":278,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95}],278:[function(require,module,exports){
"use strict";

var React = require('react');
var Renderer = require("./renderer.jsx");

/* Renders just a hint preview */
var HintRenderer = React.createClass({
    displayName: "HintRenderer",

    render: function render() {
        var shouldBold = this.props.bold;
        var hint = this.props.hint;
        var classNames;
        if (shouldBold) {
            classNames = "perseus-hint-renderer last-hint";
        } else {
            classNames = "perseus-hint-renderer";
        }
        return React.createElement(
            "div",
            { className: classNames },
            React.createElement(Renderer, {
                widgets: this.props.hint.widgets,
                content: this.props.hint.content || "",
                images: this.props.hint.images })
        );
    }
});

module.exports = HintRenderer;

},{"./renderer.jsx":298,"react":246}],279:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var init = function init(options) {
    _.defaults(options, {
        // Pass skipMathJax: true if MathJax is already loaded and configured.
        skipMathJax: false
    });

    var deferred = $.Deferred();

    markedReact.setOptions({
        sanitize: true,
        paragraphFn: function paragraphFn(text) {
            return React.createElement(
                'div',
                null,
                text
            );
        }
    });

    if (options.skipMathJax) {
        deferred.resolve();
    } else {
        MathJax.Hub.Config({
            messageStyle: "none",
            skipStartupTypeset: "none",
            "HTML-CSS": {
                availableFonts: ["TeX"],
                imageFont: null,
                scale: 100,
                showMathMenu: false
            }
        });

        MathJax.Hub.Configured();
        MathJax.Hub.Queue(deferred.resolve);
    }

    return deferred;
};

window.React = React;
window.ReactDOM = ReactDOM;

module.exports = init;

},{"react":246,"react-dom":95}],280:[function(require,module,exports){
"use strict";

var Movable = require("./interactive2/movable.js");
var MovablePoint = require("./interactive2/movable-point.js");
var MovableLine = require("./interactive2/movable-line.js");

var Interactive2 = {
    MovablePoint: MovablePoint,
    addMovablePoint: function addMovablePoint(graphie, options) {
        var movable = new Movable(graphie, {});
        return new MovablePoint(graphie, movable, options);
    },
    MovableLine: MovableLine,
    addMovableLine: function addMovableLine(graphie, options) {
        var movable = new Movable(graphie, {});
        return new MovableLine(graphie, movable, options);
    }
};

module.exports = Interactive2;

},{"./interactive2/movable-line.js":284,"./interactive2/movable-point.js":286,"./interactive2/movable.js":287}],281:[function(require,module,exports){
"use strict";

/**
 * Utility functions for writing Interactive2 movablethings
 */

var MovableHelperMethods = require("./movable-helper-methods.js");

var InteractiveUtil = {
    assert: function assert(isTrue, message) {
        if (!isTrue) {
            throw new Error("Assertion Error" + (message ? ": " + message : ""));
        }
    },

    /**
     * Create getters for this.state, based on the default state, `defaults`
     */
    createGettersFor: function createGettersFor(Class, defaults) {
        _.each(_.keys(defaults), function (key) {
            if (Class.prototype[key] === undefined) {
                Class.prototype[key] = function () {
                    return this.state[key];
                };
            }
        });
    },

    /**
     * Add MovableHelperMethods methods to a MovableThing class
     */
    addMovableHelperMethodsTo: function addMovableHelperMethodsTo(Class) {
        _.each(MovableHelperMethods, function (methodFunc, methodName) {
            if (Class.prototype[methodName] === undefined) {
                Class.prototype[methodName] = methodFunc;
            }
        });
    },

    /**
     * Turn a function or an array of functions into an array of functions
     */
    arrayify: function arrayify(funcOrArray) {
        if (funcOrArray == null) {
            return [];
        } else if (_.isArray(funcOrArray)) {
            return _.filter(_.flatten(funcOrArray), _.identity);
        } else {
            return [funcOrArray];
        }
    },

    /**
     * Convert all function-or-array arguments to arrays of functions
     */
    normalizeOptions: function normalizeOptions(arrayOptionNames, options) {
        // TODO(jack): Having to clone here is annoying; this
        // function should really just modify this.state in place
        // (and maybe be a function on MovableHelperMethods to get access
        // to this.state), which would also be nicer because we could
        // normalizeOptions once in this.modify
        var result = _.clone(options);
        _.each(arrayOptionNames, function (eventName) {
            var funcOrArray = options[eventName];
            // Only propagate values which were set; not present values
            // shouldn't be added to options because we'd like them to
            // fall through to defaults
            if (funcOrArray !== undefined) {
                var funcArray = InteractiveUtil.arrayify(funcOrArray);
                result[eventName] = funcArray;
            }
        });
        return result;
    }
};

module.exports = InteractiveUtil;

},{"./movable-helper-methods.js":282}],282:[function(require,module,exports){
"use strict";

/**
 * MovableThing convenience methods
 *
 * Usually added to a Movable* class through
 * InteractiveUtils.addMovableHelperMethodsTo(), but these implementations
 * are simply for convenience.
 */

var kpoint = KhanUtil.kpoint;

var MovableHelperMethods = {
    /**
     * Fire an onSomething type event to all functions in listeners
     */
    _fireEvent: function _fireEvent(listeners, currentValue, previousValue) {
        _.invoke(listeners, "call", this, currentValue, previousValue);
    },

    /**
     * Combine the array of constraints functions
     * Returns either an [x, y] coordinate or false
     */
    _applyConstraints: function _applyConstraints(current, previous) {
        return _.reduce(this.state.constraints, function (memo, constraint) {
            // A move that has been cancelled won't be propagated to later
            // constraints calls
            if (memo === false) {
                return false;
            }

            var result = constraint.call(this, memo, previous);
            if (result === false) {
                // Returning false cancels the move
                return false;
            } else if (kpoint.is(result, 2)) {
                // Returning a coord from constraints overrides the move
                return result;
            } else if (result === true || result == null) {
                // Returning true or undefined allow the move to occur
                return memo;
            } else {
                // Anything else is an error
                throw new Error("Constraint returned invalid result: " + result);
            }
        }, current, this);
    },

    /**
     * Call all draw functions, and update our prevState for the next
     * draw function
     */
    draw: function draw() {
        var currState = this.cloneState();
        MovableHelperMethods._fireEvent.call(this, this.state.draw, currState, this.prevState);
        this.prevState = currState;
    },

    /**
     * Add a listener to any event: startMove, constraints, onMove, onMoveEnd,
     * etc.
     *
     * eventName: the string name of the event to listen to. one of:
     *   "onMoveStart", "onMove", "onMoveEnd", "draw", "remove"
     *
     * id: a string id that can be used to remove this event at a later time
     *   note: adding multiple listeners with the same id is undefined behavior
     *
     * func: the function to call when the event happens, which is called
     *   with the event's standard parameters [usually (coord, prevCoord) or
     *   (state, prevState)]
     */
    listen: function listen(eventName, id, func) {
        this._listenerMap = this._listenerMap || {};
        this._listenerMap[eventName + ":" + id] = this.state[eventName].length;
        this.state[eventName].push(func);
    },

    /**
     * Remove a previously added listener, by the id specified in the
     * corresponding listen() call
     *
     * If the given id has not been registered already, this is a no-op
     */
    unlisten: function unlisten(eventName, id) {
        this._listenerMap = this._listenerMap || {};
        var index = this._listenerMap[eventName + ":" + id];
        if (index !== undefined) {
            this.state[eventName].splice(index, 1);
        }
    }
};

module.exports = MovableHelperMethods;

},{}],283:[function(require,module,exports){
"use strict";

/**
 * A library of options to pass to add/draw/remove/constraints
 */

var knumber = KhanUtil.knumber;
var kvector = KhanUtil.kvector;
var kpoint = KhanUtil.kpoint;

/**
 * Helper functions
 */
var getScaledPolarDiff = function getScaledPolarDiff(line) {
    var scaledA = line.graphie.scalePoint(line.coord(0));
    var scaledZ = line.graphie.scalePoint(line.coord(1));
    var polarDiff = kvector.polarDegFromCart(kvector.subtract(scaledZ, scaledA));
    return polarDiff;
};

// Given `coord` and `angle`, find the point where a line extended
// from `coord` in the direction of `angle` would be clipped by the
// edge of the graphie canvas. Then draw an arrowhead at that point
// pointing in the direction of `angle`.
var drawArrowAtClipPoint = function drawArrowAtClipPoint(graph, coord, angle, style) {
    // Actually put the arrowheads 4px from the edge so they have
    // a bit of room
    var xExtent = graph.range[0][1] - graph.range[0][0];
    var yExtent = graph.range[1][1] - graph.range[1][0];

    // shoot a point off into the distance ...
    var distance = xExtent + yExtent;
    // we need to scale the point according to the scale of the axes
    var angleVec = graph.unscaleVector(kvector.cartFromPolarDeg([1, angle]));
    var distVec = kvector.scale(kvector.normalize(angleVec), distance);
    var farCoord = kvector.add(coord, distVec);
    var scaledAngle = kvector.polarDegFromCart(angleVec)[1];
    // ... and then bring it back
    var clipPoint = graph.constrainToBoundsOnAngle(farCoord, 4, scaledAngle * Math.PI / 180);
    clipPoint = graph.scalePoint(clipPoint);

    var arrowHead = graph.raphael.path("M-3 4 C-2.75 2.5 0 0.25 0.75 0C0 -0.25 -2.75 -2.5 -3 -4");
    arrowHead.rotate(360 - angle, 0.75, 0).scale(1.4, 1.4, 0.75, 0).translate(clipPoint[0], clipPoint[1]).attr(style).attr({ "stroke-linejoin": "round", "stroke-linecap": "round", "stroke-dasharray": "" });

    return arrowHead;
};

/**
 * MovableLine option functions
 */
var add = {
    // We do this in add as well as in standard so that we can call
    // pointsToFront after the first draw (which adds `this.visibleShape`)
    draw: function draw() {
        this.draw();
    },

    pointsToFront: function pointsToFront(state) {
        _.invoke(state.points, "toFront");
    }
};

add.standard = [add.draw, add.pointsToFront];

var modify = {
    draw: function draw() {
        this.draw();
    }
};

modify.standard = [modify.draw];

var draw = {
    basic: function basic(state) {
        var graphie = this.graphie;
        if (!this.state.visibleShape) {
            this.state.visibleShape = graphie.path([[0, 0]], this.normalStyle());
            this.state.visibleShape.attr({
                path: KhanUtil.unscaledSvgPath([[0, 0], [1, 0]])
            });
        }

        // Clip the line 5px from the edge of the graphie to allow for
        // arrowheads
        if (state.extendLine || state.extendRay) {
            this.state.visibleShape.attr({
                "clip-rect": "5 5 " + (graphie.dimensions[0] - 10) + " " + (graphie.dimensions[1] - 10)
            });
        }

        var scaledA = graphie.scalePoint(this.coord(0));
        var scaledZ = graphie.scalePoint(this.coord(1));
        var polarDiff = getScaledPolarDiff(this);
        var lineLength = polarDiff[0];
        var angle = polarDiff[1];

        var elements = [this.state.visibleShape];
        if (this.mouseTarget()) {
            elements.push(this.mouseTarget());
        }
        _.each(elements, function (element) {
            element.translate(scaledA[0] - element.attr("translation").x, scaledA[1] - element.attr("translation").y);
            element.rotate(angle, scaledA[0], scaledA[1]);
            if (state.extendLine) {
                element.translate(-0.5, 0);
                lineLength = graphie.dimensions[0] + graphie.dimensions[1];
                lineLength = 2 * lineLength;
            } else if (state.extendRay) {
                lineLength = graphie.dimensions[0] + graphie.dimensions[1];
            }
            element.scale(lineLength, 1, scaledA[0], scaledA[1]);
        });
    },

    arrows: function arrows(state) {
        if (this._arrows != null) {
            _.invoke(this._arrows, "remove");
        }
        this._arrows = [];

        var polarDiff = getScaledPolarDiff(this);
        var angle = polarDiff[1];

        if (state.extendLine) {
            this._arrows.push(drawArrowAtClipPoint(this.graphie, this.state.points[0].coord(), 360 - angle, this.normalStyle()));
            this._arrows.push(drawArrowAtClipPoint(this.graphie, this.state.points[1].coord(), (540 - angle) % 360, this.normalStyle()));
        } else if (state.extendRay) {
            this._arrows.push(drawArrowAtClipPoint(this.graphie, this.state.points[0].coord(), 360 - angle, this.normalStyle()));
        }
    },

    highlight: function highlight(state, prevState) {
        // TODO(jack): Figure out a way to highlight the points attached to
        // the line. Maybe this means an additional isHovering: []
        // function to state of movable/movablepoint to define [additional?]
        // times it should be highlighted
        if (state.isHovering && !prevState.isHovering) {
            state.visibleShape.animate(state.highlightStyle, 50);
        } else if (!state.isHovering && prevState.isHovering) {
            state.visibleShape.animate(state.normalStyle, 50);
        }
    }
};

draw.standard = [draw.basic, draw.arrows, draw.highlight];

var remove = {
    basic: function basic() {
        if (this.state.visibleShape) {
            this.state.visibleShape.remove();
        }
    },
    arrows: function arrows() {
        if (this._arrows != null) {
            _.invoke(this._arrows, "remove");
        }
    }
};

remove.standard = [remove.basic, remove.arrows];

var constraints = {
    fixed: function fixed() {
        return function () {
            return false;
        };
    },

    snap: function snap(_snap) {
        return function (coord, prevCoord) {
            if (_snap === null) {
                return true;
            }
            var delta = kvector.subtract(coord, prevCoord);
            _snap = _snap || this.graphie.snap;
            delta = kpoint.roundTo(delta, _snap);
            return kvector.add(prevCoord, delta);
        };
    },

    bound: function bound(range, snap, paddingPx) {
        if (paddingPx === undefined) {
            if (range === undefined) {
                paddingPx = 10;
            } else {
                paddingPx = 0;
            }
        }
        return function (coord, prevCoord) {
            var graphie = this.graphie;
            var delta = kvector.subtract(coord, prevCoord);
            var range = range || graphie.range;
            // A null snap means no snap; an undefined snap means
            // default to graphie's
            if (snap === undefined) {
                snap = graphie.snap;
            }

            // Calculate the bounds for both points
            var absoluteLower = graphie.unscalePoint([paddingPx, graphie.ypixels - paddingPx]);
            var absoluteUpper = graphie.unscalePoint([graphie.xpixels - paddingPx, paddingPx]);
            if (snap) {
                absoluteLower = kpoint.ceilTo(absoluteLower, snap);
                absoluteUpper = kpoint.floorTo(absoluteUpper, snap);
            }

            // Calculate the bounds for the delta.
            var deltaBounds = _.map(this.coords(), function (coord, i) {
                var max = kvector.subtract(absoluteUpper, coord);
                var min = kvector.subtract(absoluteLower, coord);
                return [min, max];
            });

            // bound the delta by the calculated bounds
            var boundedDelta = _.reduce(deltaBounds, function (delta, bound) {
                var lower = bound[0];
                var upper = bound[1];
                var deltaX = Math.max(lower[0], Math.min(upper[0], delta[0]));
                var deltaY = Math.max(lower[1], Math.min(upper[1], delta[1]));
                return [deltaX, deltaY];
            }, delta);

            return kvector.add(prevCoord, boundedDelta);
        };
    }
};

constraints.standard = null;

module.exports = {
    add: add,
    modify: modify,
    draw: draw,
    remove: remove,

    onMoveStart: { standard: null },
    constraints: constraints,
    onMove: { standard: null },
    onMoveEnd: { standard: null }
};

},{}],284:[function(require,module,exports){
"use strict";

/**
 * MovableLine
 */

var MovableLineOptions = require("./movable-line-options.js");
var InteractiveUtil = require("./interactive-util.js");
var objective_ = require("./objective_.js");
var assert = InteractiveUtil.assert;
var normalizeOptions = InteractiveUtil.normalizeOptions;

var knumber = KhanUtil.knumber;
var kvector = KhanUtil.kvector;
var kpoint = KhanUtil.kpoint;

var FUNCTION_ARRAY_OPTIONS = ["add", "draw", "remove", "onMoveStart", "constraints", "onMove", "onMoveEnd"];

// Default "props" and "state". Both are added to this.state and
// receive magic getter methods (this.cursor() etc).
// However, properties in DEFAULT_PROPS are updated on `modify()`,
// while those in DEFAULT_STATE persist and are not updated.
// Things that the user might want to change should be on "props",
// while things used to render the point should be on "state".
var DEFAULT_PROPS = {
    points: [[0, 0], [4, 4]],
    updatePoints: false,
    static: false,
    cursor: "move",
    normalStyle: null, // turned into an object in this.modify
    highlightStyle: null, // likewise
    extendLine: false,
    extendRay: false
};
var DEFAULT_STATE = {
    visibleShape: null,
    mouseTarget: null
};

var MovableLine = function MovableLine(graphie, movable, options) {
    assert(graphie != null);
    assert(options != null);

    _.extend(this, {
        graphie: graphie,
        movable: movable,
        state: {
            // Set here because this must be unique for each instance
            id: _.uniqueId("movableLine")
        }
    });

    // We only set DEFAULT_STATE once, here
    this.modify(_.extend({}, DEFAULT_STATE, options));
};

_.extend(MovableLine, MovableLineOptions);
InteractiveUtil.createGettersFor(MovableLine, _.extend({}, DEFAULT_PROPS, DEFAULT_STATE));
InteractiveUtil.addMovableHelperMethodsTo(MovableLine);

_.extend(MovableLine.prototype, {

    cloneState: function cloneState() {
        return _.extend(this.movable.cloneState(), {
            coords: this.coords()
        }, this.state);
    },

    _createDefaultState: function _createDefaultState() {
        return _.extend({
            id: this.state.id
        }, normalizeOptions(FUNCTION_ARRAY_OPTIONS,
        // Defaults are copied from MovableLineOptions.*.standard
        // These defaults are set here instead of DEFAULT_PROPS/STATE
        // because they:
        //    - are objects, not primitives (and need a deeper copy)
        //    - they don't need getters created for them
        // TODO(jack): Consider "default" once we es3ify perseus
        objective_.pluck(MovableLineOptions, "standard")), DEFAULT_PROPS);
    },

    /**
     * Resets the object to its state as if it were constructed with
     * `options` originally. state not on DEFAULT_PROPS is maintained.
     *
     * Analogous to React.js's replaceProps
     */
    modify: function modify(options) {
        this.update(_.extend(this._createDefaultState(), options));
    },

    /**
     * Adjusts constructor parameters without changing previous settings
     * for any option not specified
     *
     * Analogous to React.js's setProps
     */
    update: function update(options) {
        var self = this;
        var graphie = this.graphie;
        var state = self.state = _.extend(self.state, normalizeOptions(FUNCTION_ARRAY_OPTIONS, options));

        // Default things inside the state.normalStyle object, because
        // _.extend is not deep.
        // We use _.extend instead of _.defaults because we don't want
        // to modify the passed-in copy (especially if it's from
        // DEFAULT_PROPERTIES!)
        var normalColor = state.static ? KhanUtil.DYNAMIC : KhanUtil.INTERACTIVE;
        state.normalStyle = _.extend({
            stroke: normalColor,
            "stroke-width": 2
        }, state.normalStyle);

        state.highlightStyle = _.extend({
            stroke: KhanUtil.INTERACTING,
            "stroke-width": 3
        }, state.highlightStyle);

        if (!state.static) {
            // the invisible shape in front of the point that gets mouse events
            if (!state.mouseTarget) {
                state.mouseTarget = graphie.mouselayer.rect(0, -15, 1, 30);
                state.mouseTarget.attr({ fill: "#000", "opacity": 0.0 });
            }
        }

        if (state.static && state.mouseTarget) {
            // state.static was specified, remove any previously
            // existing mousetarget (from a previous modify)
            state.mouseTarget.remove();
            state.mouseTarget = null;
        }

        // The movable that handles mouse events for us
        self.movable.modify(_.extend({}, state, {
            mouseTarget: state.mouseTarget,

            // We null out the add/modify/remove to avoid propagating our
            // state.add... to the movable, so that we can fire those
            // events ourselves, rather than letting the movable handle
            // them
            add: null,
            modify: null,
            draw: self.draw.bind(self),
            remove: null,

            onMoveStart: function onMoveStart() {
                self._initialRefCoord = self.coord(0);
                self._prevRefCoord = self._initialRefCoord;
                self._totalDelta = [0, 0];

                self._fireEvent(self.state.onMoveStart, self.coord(0), self.coord(0));
            },

            onMove: function onMove(mouseCoord, prevMouseCoord) {
                var delta = kvector.subtract(mouseCoord, prevMouseCoord);
                self._totalDelta = kvector.add(self._totalDelta, delta);
                var refCoord = kvector.add(self._initialRefCoord, self._totalDelta);

                refCoord = self._applyConstraints(refCoord, self._prevRefCoord);
                if (refCoord === false) {
                    return;
                }

                var actualDelta = kvector.subtract(refCoord, self._prevRefCoord);

                if (self.state.updatePoints) {
                    _.each(self.state.points, function (point) {
                        point.setCoord(kvector.add(point.coord(), actualDelta));
                    });
                }

                self._fireEvent(self.state.onMove, refCoord, self._prevRefCoord);
                self._prevRefCoord = refCoord;
            },

            onMoveEnd: function onMoveEnd() {
                self._fireEvent(self.state.onMoveEnd, self._prevRefCoord, self._initialRefCoord);
            }
        }));

        // Update the line with the points' movement
        _.invoke(state.points, "listen", "onMove", state.id, self.draw.bind(self));

        // Trigger an add event if this hasn't been added before
        if (!state.added) {
            self.prevState = {};
            self._fireEvent(state.add, self.cloneState(), self.prevState);
            state.added = true;

            // Update the state for `added` and in case the add event
            // changed it
            self.prevState = self.cloneState();
        }

        // Trigger a modify event
        self._fireEvent(state.modify, self.cloneState(), self.prevState);
    },

    coords: function coords() {
        return _.invoke(this.state.points, "coord");
    },

    point: function point(index) {
        return this.state.points[index];
    },

    coord: function coord(index) {
        return this.point(index).coord();
    },

    remove: function remove() {
        this._fireEvent(this.state.remove);
        if (this.points) {
            _.invoke(this.points, "unlisten", "onMove", this.state.id);
        }

        if (this.movable) {
            // We need this to be guarded because it is called on the initial
            // constructor/modify call, before this.movable is created
            this.movable.remove();
        }
    },

    // Change z-order to back
    toBack: function toBack() {
        this.movable.toBack();
        if (this.state.visibleShape) {
            this.state.visibleShape.toBack();
        }
    },

    // Change z-order to front
    toFront: function toFront() {
        if (this.state.visibleShape) {
            this.state.visibleShape.toFront();
        }
        this.movable.toFront();
    },

    /**
     * Forwarding methods to this.movable:
     */
    isHovering: function isHovering() {
        return this.movable.isHovering();
    },

    isDragging: function isDragging() {
        return this.movable.isDragging();
    },

    mouseTarget: function mouseTarget() {
        return this.movable.mouseTarget();
    }
});

module.exports = MovableLine;

},{"./interactive-util.js":281,"./movable-line-options.js":283,"./objective_.js":288}],285:[function(require,module,exports){
"use strict";

/**
 * A library of options to pass to add/draw/remove/constraints
 */

var knumber = KhanUtil.knumber;
var kpoint = KhanUtil.kpoint;

var add = {
    constrain: function constrain() {
        this.constrain();
    }
};

add.standard = [add.constrain];

var modify = {
    draw: function draw() {
        this.draw();
    }
};

modify.standard = [modify.draw];

var draw = {
    basic: function basic(state, prevState) {
        var graphie = this.graphie;
        if (!this.state.visibleShape) {
            this.state.visibleShape = graphie.ellipse(this.coord(), [this.pointSize() / graphie.scale[0], this.pointSize() / graphie.scale[1]], _.omit(this.normalStyle(), "scale"));
        }
        if (state.normalStyle !== prevState.normalStyle && !_.isEqual(state.normalStyle, prevState.normalStyle)) {
            this.state.visibleShape.attr(this.normalStyle());
        }
        var scaledPoint = graphie.scalePoint(this.coord());
        this.state.visibleShape.attr({ cx: scaledPoint[0] });
        this.state.visibleShape.attr({ cy: scaledPoint[1] });
        if (this.mouseTarget()) {
            this.mouseTarget().attr({ cx: scaledPoint[0] });
            this.mouseTarget().attr({ cy: scaledPoint[1] });
        }
    },

    highlight: function highlight(state, prevState) {
        if (state.isHovering && !prevState.isHovering) {
            state.visibleShape.animate(this.highlightStyle(), 50);
        } else if (!state.isHovering && prevState.isHovering) {
            state.visibleShape.animate(this.normalStyle(), 50);
        }
    }
};

draw.standard = [draw.basic, draw.highlight];

var remove = {
    basic: function basic() {
        if (this.state.visibleShape) {
            this.state.visibleShape.remove();
            this.state.visibleShape = null;
        }
    }
};

remove.standard = remove.basic;

var constraints = {
    fixed: function fixed() {
        return function () {
            return false;
        };
    },

    snap: function snap(_snap) {
        return function (coord) {
            if (_snap === null) {
                return true;
            }
            _snap = _snap || this.graphie.snap;
            return kpoint.roundTo(coord, _snap);
        };
    },

    bound: function bound(range, snap, paddingPx) {
        if (paddingPx === undefined) {
            if (range === undefined) {
                paddingPx = 10;
            } else {
                paddingPx = 0;
            }
        }
        return function (coord) {
            var graphie = this.graphie;
            range = range || graphie.range;
            if (snap === undefined) {
                snap = graphie.snap;
            }

            var lower = graphie.unscalePoint([paddingPx, graphie.ypixels - paddingPx]);
            var upper = graphie.unscalePoint([graphie.xpixels - paddingPx, paddingPx]);
            if (snap) {
                lower = kpoint.ceilTo(lower, snap);
                upper = kpoint.floorTo(upper, snap);
            }
            var coordX = Math.max(lower[0], Math.min(upper[0], coord[0]));
            var coordY = Math.max(lower[1], Math.min(upper[1], coord[1]));
            return [coordX, coordY];
        };
    }
};

constraints.standard = null;

module.exports = {
    add: add,
    modify: modify,
    draw: draw,
    remove: remove,

    onMoveStart: { standard: null },
    constraints: constraints,
    onMove: { standard: null },
    onMoveEnd: { standard: null },
    onClick: { standard: null }
};

},{}],286:[function(require,module,exports){
"use strict";

/**
 * Creates and adds a point to the graph that can be dragged around.
 * It allows constraints on its movement and draws when moves happen.
 *
 * Options can be passed to the constructor to control how the point behaves:
 *   coord: [x, y]
 *     The initial position of the point
 *   pointSize:
 *     changes the size of the point. defaults to 4
 *   static: boolean
 *     draw the point, but don't let it be interactable
 *   cursor: "move", "pointer"
 *     css cursor for this point
 *   add: [function(state)]
 *     called immediately when this movablePoint is added
 *     default: apply any constraints and draw
 *   draw: [function(prevState, currentState)]
 *     drawing functions. default to [basic, highlight]
 *   remove: [function(state)]
 *     called when this movablePoint is removed
 *   onMoveStart: [function(coord)]
 *     called when this point is clicked on
 *   constraints: [function(coord)]
 *     called when this point is dragged
 *     return true or nothing to accept the move
 *     return false to cancel the move
 *     return an [x, y] coordinate to override the move
 *   onMove: [function(coord)]
 *     called after all constraints functions pass and the point
 *     is moved to a new location
 *   onMoveEnd: [function(coord)]
 *     called when the mouse is released from a click or move
 *   onClick: [function(coord)]
 *     called when someone mouses down, doesn't move the point,
 *     and mouses up.
 *   normalStyle:
 *     the raphael/graphie style of the point when not hovering
 *   highlightStyle:
 *     the raphael/graphie style of the point when hovering, if
 *     MovablePoint.draw.highlight is used
 *
 * This creates a MovablePoint object with the following methods:
 *   setCoord: [x, y]
 *     changes the point's coordinate
 *   draw:
 *     redraws the coord
 *   modify: {options}
 *     modifies the original options passed to the point
 *   remove:
 *     removes the point from graphie
 */

var MovablePointOptions = require("./movable-point-options.js");
var InteractiveUtil = require("./interactive-util.js");
var objective_ = require("./objective_.js");
var assert = InteractiveUtil.assert;
var normalizeOptions = InteractiveUtil.normalizeOptions;

var knumber = KhanUtil.knumber;
var kpoint = KhanUtil.kpoint;

// State parameters that should be converted into an array of
// functions
var FUNCTION_ARRAY_OPTIONS = _.keys(MovablePointOptions);

// Default "props" and "state". Both are added to this.state and
// receive magic getter methods (this.coord() etc).
// However, properties in DEFAULT_PROPS are updated on `modify()`,
// while those in DEFAULT_STATE persist and are not updated.
// Things that the user might want to change should be on "props",
// while things used to render the point should be on "state".
var DEFAULT_PROPS = {
    coord: [0, 0],
    pointSize: 4,
    static: false,
    cursor: "move",
    normalStyle: null, // turned into an object in this.modify
    highlightStyle: null // likewise
};
var DEFAULT_STATE = {
    added: false,
    hasMoved: false,
    visibleShape: null,
    mouseTarget: null
};

var MovablePoint = function MovablePoint(graphie, movable, options) {
    _.extend(this, {
        graphie: graphie,
        movable: movable,
        state: {
            // Set here because this must be unique for each instance
            id: _.uniqueId("movablePoint")
        }
    });

    // We only set DEFAULT_STATE once, here
    this.modify(_.extend({}, DEFAULT_STATE, options));
};

_.extend(MovablePoint, MovablePointOptions);
InteractiveUtil.createGettersFor(MovablePoint, _.extend({}, DEFAULT_PROPS, DEFAULT_STATE));
InteractiveUtil.addMovableHelperMethodsTo(MovablePoint);

_.extend(MovablePoint.prototype, {

    cloneState: function cloneState() {
        return _.extend(this.movable.cloneState(), this.state);
    },

    _createDefaultState: function _createDefaultState() {
        return _.extend({
            id: this.state.id
        }, normalizeOptions(FUNCTION_ARRAY_OPTIONS,
        // Defaults are copied from MovablePointOptions.*.standard
        // These defaults are set here instead of DEFAULT_PROPS/STATE
        // because they:
        //    - are objects, not primitives (and need a deeper copy)
        //    - they don't need getters created for them
        // TODO(jack): Consider "default" once we es3ify perseus
        objective_.pluck(MovablePointOptions, "standard")

        // We only update props here, because we want things on state to
        // be persistent, and updated appropriately in modify()
        ), DEFAULT_PROPS);
    },

    /**
     * Resets the object to its state as if it were constructed with
     * `options` originally. state not on DEFAULT_PROPS is maintained.
     *
     * Analogous to React.js's replaceProps
     */
    modify: function modify(options) {
        this.update(_.extend(this._createDefaultState(), options));
    },

    /**
     * Adjusts constructor parameters without changing previous settings
     * for any option not specified
     *
     * Analogous to React.js's setProps
     */
    update: function update(options) {
        var self = this;
        var graphie = self.graphie;
        var state = _.extend(self.state, normalizeOptions(FUNCTION_ARRAY_OPTIONS, options));

        assert(kpoint.is(state.coord));

        // Default things inside the state.normalStyle object, because
        // _.extend is not deep.
        // We use _.extend instead of _.defaults because we don't want
        // to modify the passed-in copy (especially if it's from
        // DEFAULT_PROPS/STATE!)
        var normalColor = state.static ? KhanUtil.DYNAMIC : KhanUtil.INTERACTIVE;
        state.normalStyle = _.extend({
            fill: normalColor,
            stroke: normalColor,
            scale: 1
        }, state.normalStyle);

        state.highlightStyle = _.extend({
            fill: KhanUtil.INTERACTING,
            stroke: KhanUtil.INTERACTING,
            scale: 2
        }, state.highlightStyle);

        if (!state.static) {
            // the invisible shape in front of the point that gets mouse events
            if (!state.mouseTarget) {
                state.mouseTarget = graphie.mouselayer.circle(graphie.scalePoint(self.state.coord)[0], graphie.scalePoint(self.state.coord)[1], 15);
                state.mouseTarget.attr({ fill: "#000", opacity: 0.0 });
            }
        }

        // The starting coord of any move, sent to onMoveEnd as the previous
        // value
        var startCoord = state.coord;

        // The Movable representing this movablePoint's representation
        // This handles mouse events for us, which we propagate in
        // onMove
        self.movable.modify(_.extend({}, state, {
            add: null,
            modify: null,
            draw: self.draw.bind(self),
            remove: null,
            onMoveStart: function onMoveStart() {
                state.hasMoved = false;
                startCoord = state.coord;
                self._fireEvent(state.onMoveStart, startCoord, startCoord);
                self.draw();
            },
            onMove: function onMove(coord) {
                // The caller has the option of adding an onMove() method to the
                // movablePoint object we return as a sort of event handler
                // By returning false from onMove(), the move can be vetoed,
                // providing custom constraints on where the point can be moved.
                // By returning array [x, y], the move can be overridden

                var result = self._applyConstraints(coord, state.coord);
                if (result === false) {
                    return;
                } else if (kpoint.is(result)) {
                    coord = result;
                }
                if (!kpoint.equal(coord, state.coord)) {
                    var prevCoord = state.coord;
                    state.coord = coord;
                    state.hasMoved = true;
                    self._fireEvent(state.onMove, state.coord, prevCoord);
                    self.draw();
                }
            },
            onMoveEnd: function onMoveEnd() {
                if (self.isHovering() && !state.hasMoved) {
                    self._fireEvent(state.onClick, state.coord, startCoord);
                }
                self._fireEvent(state.onMoveEnd, state.coord, startCoord);
                state.hasMoved = false;
                self.draw();
            }
        }));

        // Trigger an add event if this hasn't been added before
        if (!state.added) {
            self.prevState = {};
            self._fireEvent(state.add, self.cloneState(), self.prevState);
            state.added = true;

            // Update the state for `added` and in case the add event
            // changed it
            self.prevState = self.cloneState();
        }

        // Trigger a modify event
        self._fireEvent(state.modify, self.cloneState(), self.prevState);
    },

    remove: function remove() {
        this.state.added = false;
        this._fireEvent(this.state.remove);
        if (this.movable) {
            this.movable.remove();
        }
        // TODO(jack): This should really be moved off of
        // movablePoint.state and only kept on movable.state
        this.state.mouseTarget = null;
    },

    constrain: function constrain() {
        var result = this._applyConstraints(this.coord(), this.coord());
        if (kpoint.is(result)) {
            this.setCoord(result);
        }
        return result !== false;
    },

    setCoord: function setCoord(coord) {
        assert(kpoint.is(coord, 2));
        this.state.coord = _.clone(coord);
        this.draw();
    },

    setCoordConstrained: function setCoordConstrained(coord) {
        assert(kpoint.is(coord, 2));
        var result = this._applyConstraints(coord, coord);
        this.state.coord = _.clone(result);
        this.draw();
    },

    // Clone these for use with raphael, which modifies the input
    // style parameters
    normalStyle: function normalStyle() {
        return _.clone(this.state.normalStyle);
    },

    highlightStyle: function highlightStyle() {
        return _.clone(this.state.highlightStyle);
    },

    // Change z-order to back
    toBack: function toBack() {
        this.movable.toBack();
        if (this.state.visibleShape) {
            this.state.visibleShape.toBack();
        }
    },

    // Change z-order to front
    toFront: function toFront() {
        if (this.state.visibleShape) {
            this.state.visibleShape.toFront();
        }
        this.movable.toFront();
    },

    /**
     * Forwarding methods to this.movable:
     */
    isHovering: function isHovering() {
        return this.movable.isHovering();
    },

    isDragging: function isDragging() {
        return this.movable.isDragging();
    },

    mouseTarget: function mouseTarget() {
        return this.movable.mouseTarget();
    },

    grab: function grab() {
        this.movable.grab();
    }
});

module.exports = MovablePoint;

},{"./interactive-util.js":281,"./movable-point-options.js":285,"./objective_.js":288}],287:[function(require,module,exports){
"use strict";

/**
 * Movable
 *
 * A Movable Something, that sends onMove events based on the
 * mouse coordinate (graphie unscaled, non-pixel-value) of the
 * move.
 *
 * Other MovableThings should generally have a Movable field, and
 * let this class handle all of the virtual mouse events, and then
 * take appropriate action in onMoveStart, onMove, onMoveEnd
 */

var InteractiveUtil = require("./interactive-util.js");
var normalizeOptions = InteractiveUtil.normalizeOptions;

var assert = InteractiveUtil.assert;
var knumber = KhanUtil.knumber;
var kpoint = KhanUtil.kpoint;

// state parameters that should be converted into an array of
// functions
var FUNCTION_ARRAY_OPTIONS = ["add", "modify", "draw", "remove", "onMoveStart", "onMove", "onMoveEnd", "onClick"];

// Default "props" and "state". Both are added to this.state and
// receive magic getter methods (this.isHovering() etc).
// However, properties in DEFAULT_PROPS are updated on `modify()`,
// while those in DEFAULT_STATE persist and are not updated.
// Things that the user might want to change should be on "props",
// while things used to render the movable should be on "state".
var DEFAULT_PROPS = {
    cursor: null
};
var DEFAULT_STATE = {
    added: false,
    isHovering: false,
    isMouseOver: false,
    isDragging: false,
    mouseTarget: null
};

var Movable = function Movable(graphie, options) {
    _.extend(this, {
        graphie: graphie,
        state: {
            // Set here because this must be unique for each instance
            id: _.uniqueId("movable")
        }
    });

    // We only set DEFAULT_STATE once, here
    this.modify(_.extend({}, DEFAULT_STATE, options));
};

InteractiveUtil.createGettersFor(Movable, _.extend({}, DEFAULT_PROPS, DEFAULT_STATE));
InteractiveUtil.addMovableHelperMethodsTo(Movable);

_.extend(Movable.prototype, {

    cloneState: function cloneState() {
        return _.clone(this.state);
    },

    _createDefaultState: function _createDefaultState() {
        return _.extend({
            id: this.state.id,
            add: [],
            modify: [],
            draw: [],
            remove: [],
            onMoveStart: [],
            onMove: [],
            onMoveEnd: [],
            onClick: []

            // We only update props here, because we want things on state to
            // be persistent, and updated appropriately in modify()
        }, DEFAULT_PROPS);
    },

    /**
     * Resets the object to its state as if it were constructed with
     * `options` originally. The only state maintained is `state.id`
     *
     * Analogous to React.js's replaceProps
     */
    modify: function modify(options) {
        this.update(_.extend({}, this._createDefaultState(), options));
    },

    /**
     * Simulates a mouse grab event on the movable object.
     */
    grab: function grab(coord) {
        assert(kpoint.is(coord));
        var self = this;
        var graphie = self.graphie;
        var state = self.state;

        state.isHovering = true;
        state.isDragging = true;
        graphie.isDragging = true;

        var startMouseCoord = coord;
        var prevMouseCoord = startMouseCoord;
        self._fireEvent(state.onMoveStart, startMouseCoord, startMouseCoord);

        var moveHandler = function moveHandler(e) {
            e.preventDefault();

            var mouseCoord = graphie.getMouseCoord(e);
            self._fireEvent(state.onMove, mouseCoord, prevMouseCoord);
            self.draw();
            prevMouseCoord = mouseCoord;
        };

        var upHandler = function upHandler(e) {
            $(document).unbind("vmousemove", moveHandler);
            $(document).unbind("vmouseup", upHandler);
            if (state.isHovering) {
                self._fireEvent(state.onClick, prevMouseCoord, startMouseCoord);
            }
            state.isHovering = self.state.isMouseOver;
            state.isDragging = false;
            graphie.isDragging = false;
            self._fireEvent(state.onMoveEnd, prevMouseCoord, startMouseCoord);
            self.draw();
        };

        $(document).bind("vmousemove", moveHandler);
        $(document).bind("vmouseup", upHandler);
    },

    /**
     * Adjusts constructor parameters without changing previous settings
     * for any option not specified
     *
     * Analogous to React.js's setProps
     */
    update: function update(options) {
        var self = this;
        var graphie = self.graphie;

        var prevState = self.cloneState();
        var state = _.extend(self.state, normalizeOptions(FUNCTION_ARRAY_OPTIONS, options));

        // the invisible shape in front of the point that gets mouse events
        if (state.mouseTarget && !prevState.mouseTarget) {
            var $mouseTarget = $(state.mouseTarget[0]);

            var isMouse = !('ontouchstart' in window);

            if (isMouse) {
                $mouseTarget.on("vmouseover", function () {
                    state.isMouseOver = true;
                    if (!graphie.isDragging) {
                        state.isHovering = true;
                    }
                    if (self.state.added) {
                        // Avoid drawing if the point has been removed
                        self.draw();
                    }
                });

                $mouseTarget.on("vmouseout", function () {
                    state.isMouseOver = false;
                    if (!state.isDragging) {
                        state.isHovering = false;
                    }
                    if (self.state.added) {
                        // Avoid drawing if the point has been removed
                        self.draw();
                    }
                });
            }

            $mouseTarget.on("vmousedown", function (e) {
                if (e.which !== 0 && e.which !== 1) {
                    return;
                }
                e.preventDefault();

                var mouseCoord = graphie.getMouseCoord(e);
                self.grab(mouseCoord);
            });
        }

        if (state.mouseTarget && state.cursor !== undefined) {
            // "" removes the css cursor if state.cursor is null
            $(state.mouseTarget[0]).css("cursor", state.cursor || "");
        }

        // Trigger an add event if this hasn't been added before
        if (!state.added) {
            self._fireEvent(state.modify, self.cloneState(), {});
            state.added = true;

            // Update the state for `added` and in case the add event
            // changed it
            self.prevState = self.cloneState();
        }

        // Trigger a modify event
        self._fireEvent(state.modify, self.cloneState(), self.prevState);
    },

    remove: function remove() {
        this.state.added = false;
        this._fireEvent(this.state.remove);
        if (this.state.mouseTarget) {
            $(this.state.mouseTarget).off();
            this.state.mouseTarget.remove();
            this.state.mouseTarget = null;
        }
    },

    // Change z-order to back
    toBack: function toBack() {
        if (this.state.mouseTarget) {
            this.state.mouseTarget.toBack();
        }
    },

    // Change z-order to front
    toFront: function toFront() {
        if (this.state.mouseTarget) {
            this.state.mouseTarget.toFront();
        }
    }
});

module.exports = Movable;

},{"./interactive-util.js":281}],288:[function(require,module,exports){
"use strict";

/**
 * A work-in-progress of _ methods for objects.
 * That is, they take an object as a parameter,
 * and return an object instead of an array.
 */

/* Does a pluck on keys inside objects in an object
 *
 * Ex:
 * tools = {
 *     translation: {
 *         enabled: true
 *     },
 *     rotation: {
 *         enabled: false
 *     }
 * };
 * pluckObject(tools, "enabled") returns {
 *     translation: true
 *     rotation: false
 * }
 */
var pluck = exports.pluck = function (table, subKey) {
  return _.object(_.map(table, function (value, key) {
    return [key, value[subKey]];
  }));
};

},{}],289:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var AnswerAreaEditor = require("./answer-area-editor.jsx");
var Editor = require("./editor.jsx");
var ITEM_DATA_VERSION = require("./version.json").itemDataVersion;

var ItemEditor = React.createClass({
    displayName: "ItemEditor",

    propTypes: {
        imageUploader: React.PropTypes.func,
        wasAnswered: React.PropTypes.bool,
        gradeMessage: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            onChange: function onChange() {},
            question: {},
            answerArea: {}
        };
    },

    // Notify the parent that the question or answer area has been updated.
    updateProps: function updateProps(newProps, cb) {
        var props = _(this.props).pick("question", "answerArea");
        this.props.onChange(_(props).extend(newProps), cb);
    },

    render: function render() {
        var img_src = Math.random() > 0.05 ? "/images/face-smiley01.png" : "/images/face-smiley02.png";
        return React.createElement(
            "div",
            { className: "perseus-editor-table" },
            React.createElement(
                "div",
                { className: "perseus-editor-row perseus-question-container" },
                React.createElement(
                    "div",
                    { className: "perseus-editor-left-cell" },
                    React.createElement(
                        "div",
                        { className: "pod-title" },
                        "Question"
                    ),
                    React.createElement(Editor, _extends({
                        ref: "questionEditor",
                        placeholder: "Type your question here...",
                        className: "perseus-question-editor",
                        imageUploader: this.props.imageUploader,
                        onChange: this.handleEditorChange
                    }, this.props.question))
                ),
                React.createElement(
                    "div",
                    { className: "perseus-editor-right-cell" },
                    React.createElement(
                        "div",
                        { id: "problemarea" },
                        React.createElement("div", { id: "workarea", className: "workarea" }),
                        React.createElement("div", { id: "hintsarea",
                            className: "hintsarea",
                            style: { display: "none" } })
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-editor-row perseus-answer-container" },
                React.createElement(
                    "div",
                    { className: "perseus-editor-left-cell" },
                    React.createElement(
                        "div",
                        { className: "pod-title" },
                        "Answer"
                    ),
                    React.createElement(AnswerAreaEditor, _extends({
                        ref: "answerAreaEditor",
                        onChange: this.handleAnswerAreaChange
                    }, this.props.answerArea))
                ),
                React.createElement(
                    "div",
                    { className: "perseus-editor-right-cell" },
                    React.createElement(
                        "div",
                        { id: "answer_area" },
                        React.createElement(
                            "span",
                            { id: "examples-show", style: { display: "none" } },
                            ' ',
                            "Acceptable formats",
                            ' '
                        ),
                        React.createElement("div", { id: "solutionarea", className: "solutionarea" }),
                        React.createElement(
                            "div",
                            { className: "answer-buttons" },
                            React.createElement("input", {
                                type: "button",
                                className: "simple-button green",
                                onClick: this.props.onCheckAnswer,
                                value: "Check Answer" }),
                            this.props.wasAnswered && React.createElement("img", { src: img_src,
                                className: "smiley" }),
                            this.props.gradeMessage && React.createElement(
                                "span",
                                null,
                                this.props.gradeMessage
                            )
                        )
                    )
                )
            )
        );
    },

    handleEditorChange: function handleEditorChange(newProps, cb, silent) {
        var question = _.extend({}, this.props.question, newProps);
        this.updateProps({ question: question }, cb, silent);
    },

    handleAnswerAreaChange: function handleAnswerAreaChange(newProps, cb, silent) {
        var answerArea = _.extend({}, this.props.answerArea, newProps);
        this.updateProps({ answerArea: answerArea }, cb, silent);
    },

    toJSON: function toJSON(skipValidation) {
        return {
            question: this.refs.questionEditor.toJSON(skipValidation),
            answerArea: this.refs.answerAreaEditor.toJSON(skipValidation),
            itemDataVersion: ITEM_DATA_VERSION
        };
    },

    focus: function focus() {
        this.questionEditor.focus();
    }
});

module.exports = ItemEditor;

},{"./answer-area-editor.jsx":250,"./editor.jsx":275,"./version.json":304,"react":246}],290:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require('react-dom');

var AnswerAreaRenderer = require("./answer-area-renderer.jsx");
var HintRenderer = require("./hint-renderer.jsx");
var Renderer = require("./renderer.jsx");
var Util = require("./util.js");
var ApiOptions = require("./perseus-api.jsx").Options;
var EnabledFeatures = require("./enabled-features.jsx");

var HintsRenderer = React.createClass({
    displayName: 'HintsRenderer',

    render: function render() {
        var hintsVisible = this.props.hintsVisible;
        var hints = this.props.hints.slice(0, hintsVisible === -1 ? undefined : hintsVisible).map(function (hint, i) {
            var shouldBold = i === this.props.hints.length - 1 && !/\*\*/.test(hint.content);
            return React.createElement(HintRenderer, {
                bold: shouldBold,
                hint: hint,
                key: "hintRenderer" + i,
                enabledFeatures: this.props.enabledFeatures,
                apiOptions: this.props.apiOptions });
        }, this);

        return React.createElement(
            'div',
            null,
            hints
        );
    }
});

var highlightedWidgets = function highlightedWidgets(widgetList) {
    return _.filter(widgetList, Util.widgetShouldHighlight);
};

var ItemRenderer = React.createClass({
    displayName: 'ItemRenderer',

    getDefaultProps: function getDefaultProps() {
        return {
            initialHintsVisible: 0,

            // TODO(joel) - handle this differently. Pass around nodes or
            // something half reasonable.
            workAreaSelector: "#workarea",
            solutionAreaSelector: "#solutionarea",
            hintsAreaSelector: "#hintsarea",

            enabledFeatures: {}, // a deep default is done in `this.update()`
            apiOptions: {} // likewise ^
        };
    },

    getInitialState: function getInitialState() {
        return {
            hintsVisible: this.props.initialHintsVisible,
            questionCompleted: false,
            questionHighlightedWidgets: [],
            answerHighlightedWidgets: []
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            questionHighlightedWidgets: [],
            answerHighlightedWidgets: []
        });
    },

    componentDidMount: function componentDidMount() {
        if (Khan.scratchpad) {
            Khan.scratchpad.enable();
        }
        this._currentFocus = {
            path: null,
            element: null
        };
        this.update();
    },

    componentDidUpdate: function componentDidUpdate() {
        this.update();
    },

    update: function update() {
        var enabledFeatures = _.extend({}, EnabledFeatures.defaults, this.props.enabledFeatures);

        var apiOptions = _.extend({}, ApiOptions.defaults, this.props.apiOptions, {
            onFocusChange: this._handleFocusChange
        });

        // Since the item renderer works by rendering things into three divs
        // that have completely different places in the DOM, we have to do this
        // strangeness instead of relying on React's normal render() method.
        // TODO(alpert): Figure out how to clean this up somehow
        this.questionRenderer = ReactDOM.render(React.createElement(Renderer, _extends({
            problemNum: this.props.problemNum,
            onInteractWithWidget: this.handleInteractWithWidget,
            highlightedWidgets: this.state.questionHighlightedWidgets,
            enabledFeatures: enabledFeatures,
            apiOptions: apiOptions,
            questionCompleted: this.state.questionCompleted
        }, this.props.item.question)), document.querySelector(this.props.workAreaSelector));

        this.answerAreaRenderer = ReactDOM.render(React.createElement(AnswerAreaRenderer, {
            type: this.props.item.answerArea.type,
            options: this.props.item.answerArea.options,
            calculator: this.props.item.answerArea.calculator || false,
            problemNum: this.props.problemNum,
            onInteractWithWidget: this.handleInteractWithAnswerWidget,
            highlightedWidgets: this.state.answerHighlightedWidgets,
            enabledFeatures: enabledFeatures,
            apiOptions: apiOptions
        }), document.querySelector(this.props.solutionAreaSelector));

        this.hintsRenderer = ReactDOM.render(React.createElement(HintsRenderer, {
            hints: this.props.item.hints,
            hintsVisible: this.state.hintsVisible,
            enabledFeatures: enabledFeatures,
            apiOptions: apiOptions
        }), document.querySelector(this.props.hintsAreaSelector));
    },

    _handleFocusChange: function _handleFocusChange(newFocus, oldFocus) {
        if (newFocus.path != null) {
            this._setCurrentFocus(newFocus);
        } else {
            this._onRendererBlur(oldFocus);
        }
    },

    // Sets the current focus path and element and
    // send an onChangeFocus event back to our parent.
    _setCurrentFocus: function _setCurrentFocus(newFocus) {
        // By the time this happens, newFocus.path cannot be a prefix of
        // prevFocused.path, since we must have either been called from
        // an onFocusChange within a renderer, which is only called when
        // this is not a prefix, or between the question and answer areas,
        // which can never prefix each other.
        var prevFocus = this._currentFocus;
        this._currentFocus = newFocus;
        if (this.props.apiOptions.onFocusChange != null) {
            this.props.apiOptions.onFocusChange(this._currentFocus, prevFocus);
        }
    },

    _onRendererBlur: function _onRendererBlur(oldFocus) {
        var _this = this;

        // Wait until after any new focus events fire this tick before
        // declaring that nothing is focused.
        // If a different widget was focused, we'll see an onBlur event
        // now, but then an onFocus event on a different element before
        // this callback is executed
        _.defer(function () {
            if (_.isEqual(_this._currentFocus.path, oldFocus.path)) {
                _this._setCurrentFocus({ path: null, element: null });
            }
        });
    },

    /**
     * Accepts a question area widgetId, or an answer area widgetId of
     * the form "answer-input-number 1", or the string "answer-area"
     * for the whole answer area (if the answer area is a single widget).
     */
    _setWidgetProps: function _setWidgetProps(widgetId, newProps, callback) {
        var maybeAnswerAreaWidget = widgetId.match(/^answer-(.*)$/);

        if (maybeAnswerAreaWidget) {
            var answerAreaWidgetId = maybeAnswerAreaWidget[1];
            this.answerAreaRenderer._setWidgetProps(answerAreaWidgetId, newProps, callback);
        } else {
            this.questionRenderer._setWidgetProps(widgetId, newProps, callback);
        }
    },

    setInputValue: function setInputValue(inputWidgetId, newValue, focus) {
        // TODO(jack): This is a hack to allow for a consistent format
        // between this and onFocusChange. Remove when we're no longer
        // using widget ids in our api
        if (_.isArray(inputWidgetId)) {
            inputWidgetId = inputWidgetId[0];
        }
        // TODO(jack): change this to value: when we change input-number/
        // expression's prop to be value
        // TODO(jack): As the code below demonstrates, this whole
        // implementation is a horrible, horrible hack, and should be
        // changed so that the widget can handle setting this "value"
        // itself
        var newProps;
        if (/expression /.test(inputWidgetId)) {
            newProps = { value: newValue };
        } else if (inputWidgetId === "answer-area") {
            // If it's the answer area, do both! #yolo
            // (maybe it's an input-number, maybe it's an expression)
            // TODO(jack): Fix this.
            newProps = {
                currentValue: newValue,
                value: newValue
            };
        } else {
            newProps = { currentValue: newValue };
        }
        this._setWidgetProps(inputWidgetId, newProps, function () {
            return focus;
        });
    },

    handleInteractWithWidget: function handleInteractWithWidget(widgetId) {
        var withRemoved = _.difference(this.state.questionHighlightedWidgets, [widgetId]);
        this.setState({
            questionCompleted: false,
            questionHighlightedWidgets: withRemoved
        });
    },

    handleInteractWithAnswerWidget: function handleInteractWithAnswerWidget(widgetId) {
        var withRemoved = _.difference(this.state.answerHighlightedWidgets, [widgetId]);
        this.setState({
            answerHighlightedWidgets: withRemoved
        });
    },

    render: function render() {
        return React.createElement('div', null);
    },

    focus: function focus() {
        return this.questionRenderer.focus() || this.answerAreaRenderer.focus();
    },

    componentWillUnmount: function componentWillUnmount() {
        ReactDOM.unmountComponentAtNode(document.querySelector(this.props.workAreaSelector));
        ReactDOM.unmountComponentAtNode(document.querySelector(this.props.solutionAreaSelector));
        ReactDOM.unmountComponentAtNode(document.querySelector(this.props.hintsAreaSelector));
    },

    showHint: function showHint(hintNum) {
        if (hintNum) {
            this.setState({
                hintsVisible: hintNum + 1
            });
        } else if (this.state.hintsVisible < this.getNumHints()) {
            this.setState({
                hintsVisible: this.state.hintsVisible + 1
            });
        }
    },

    getNumHints: function getNumHints() {
        return this.props.item.hints.length;
    },

    showGuess: function showGuess(answerData) {
        this.questionRenderer.showGuess(answerData);
        if (answerData !== undefined && this.questionRenderer.widgetIds.length > 0) {
            // Left answers for answer widgets only.
            answerData = answerData[1];
        }
        this.answerAreaRenderer.showGuess(answerData);
        return;
    },
    canShowAllHistoryWidgets: function canShowAllHistoryWidgets() {
        var canShowAllHistoryWidgetsInAnswer = this.answerAreaRenderer.canShowAllHistoryWidgets();
        var canShowAllHistoryWidgetsInQuestion = this.questionRenderer.canShowAllHistoryWidgets();
        if (canShowAllHistoryWidgetsInAnswer && canShowAllHistoryWidgetsInQuestion) return true;
        return false;
    },
    scoreInput: function scoreInput() {
        var qGuessAndScore = this.questionRenderer.guessAndScore();
        var aGuessAndScore = this.answerAreaRenderer.guessAndScore();

        var qGuess = qGuessAndScore[0],
            qScore = qGuessAndScore[1];
        var aGuess = aGuessAndScore[0],
            aScore = aGuessAndScore[1];

        var emptyQuestionAreaWidgets = this.questionRenderer.emptyWidgets();
        var emptyAnswerAreaWidgets = this.answerAreaRenderer.emptyWidgets();
        this.setState({
            questionHighlightedWidgets: emptyQuestionAreaWidgets,
            answerHighlightedWidgets: emptyAnswerAreaWidgets
        });

        var guess, score;
        if (qGuess.length === 0) {
            // No widgets in question. For compatability with old guess format,
            // leave it out here completely.
            guess = aGuess;
            score = aScore;
        } else {
            guess = [qGuess, aGuess];
            score = Util.combineScores(qScore, aScore);
        }

        if (score.type === "points") {
            var correct = score.earned >= score.total;
            this.setState({ questionCompleted: correct });
            return {
                empty: false,
                correct: correct,
                message: score.message,
                guess: guess
            };
        } else if (score.type === "invalid") {
            this.setState({ questionCompleted: false });
            return {
                empty: true,
                correct: false,
                message: score.message,
                guess: guess
            };
        }
    }
});

module.exports = ItemRenderer;

},{"./answer-area-renderer.jsx":251,"./enabled-features.jsx":276,"./hint-renderer.jsx":278,"./perseus-api.jsx":294,"./renderer.jsx":298,"./util.js":303,"react":246,"react-dom":95}],291:[function(require,module,exports){
"use strict";

/**
 * Changeable
 *
 * Adds a this.change() function to a component
 *
 * This.change takes prop changes as parameters, and calls
 * this.props.onChange with the modified props.
 */
var React = require("react");
var _ = require("underscore");

var WIDGET_PROP_BLACKLIST = require("./widget-prop-blacklist.jsx");

var USAGE = "Usage:\n" + "  this.change({propName: 5}, callback);\n" + "  this.change(\"propName\", 5, callback);\n" + "  this.change(\"propName\")";

/**
 * Primary helper function for this.change()
 *
 * Takes the parameters in a consistent style, once this.change() has
 * figured out which way it was called.
 */
var _changeMultiple = function _changeMultiple(component, newProps, callback) {
    // Omit "default" props:
    // ref and key come from react, and don't actually represent
    //   the conceptual state of our component
    // onChange comes from our parent to allow this modification,
    //   and doesn't conceptually represent the state of our component
    var currProps = _.omit(component.props, WIDGET_PROP_BLACKLIST);
    var nextProps = _.extend(currProps, newProps);
    component.props.onChange(nextProps, callback);
};

/**
 * Helper function for changing a single prop
 */
var _changeSingle = function _changeSingle(component, propName, value, callback) {
    if (value === undefined) {
        // If called with a single prop name, return a lambda to change
        // a single prop on the current object
        return _.partial(_changeSingle, component, propName);
    } else {
        // If called with two values, change a single prop of the
        // current object
        var newProps = {};
        newProps[propName] = value;
        _changeMultiple(component, newProps, callback);
    }
};

/**
 * this.change()
 *
 * Can be called as follows:
 * this.change(newProps, callback);
 *
 * this.change(propName, propValue, callback);
 *
 * this.change(propName) -> returns a lambda that takes a prop value to
 * set and a callback to call after having set that value.
 */
var change = function change(newPropsOrSinglePropName, propValue, callback) {

    if (_.isObject(newPropsOrSinglePropName) && callback === undefined) {
        // Called with an object of multiple props to change
        callback = propValue;
        return _changeMultiple(this, newPropsOrSinglePropName, // object newProps
        callback);
    } else if (_.isString(newPropsOrSinglePropName)) {
        // Called with a string propName of a single prop to change
        return _changeSingle(this, newPropsOrSinglePropName, // string propName
        propValue, callback);
    } else {
        throw new Error("Invalid types sent to this.change(): " + _.toArray(arguments).join() + "\n" + USAGE);
    }
};

var Changeable = {
    propTypes: {
        onChange: React.PropTypes.func.isRequired
    },
    change: change
};

module.exports = Changeable;

},{"./widget-prop-blacklist.jsx":293,"react":246,"underscore":248}],292:[function(require,module,exports){
"use strict";

var WIDGET_PROP_BLACKLIST = require("./widget-prop-blacklist.jsx");

var JsonifyProps = {
    toJSON: function toJSON() {
        // Omit props that get passed to all widgets
        return _.omit(this.props, WIDGET_PROP_BLACKLIST);
    }
};

module.exports = JsonifyProps;

},{"./widget-prop-blacklist.jsx":293}],293:[function(require,module,exports){
"use strict";

module.exports = [
// standard props "added" by react
// (technically the renderer still adds them)
"key", "ref",
// added by src/renderer.jsx
"widgetId", "onChange", "problemNum", "enabledFeatures", "apiOptions"];

},{}],294:[function(require,module,exports){
"use strict";

/**
 * [Most of] the Perseus client API.
 *
 * If making a change to this file, or otherwise to the perseus
 * API, you should increment:
 *  * the perseus api major version if it is a breaking change
 *  * the perseus api minor version if it is an additive-only change
 *  * nothing if it is purely a bug fix.
 *
 * Callbacks passed to Renderer/ItemRenderer:
 *  * interceptInputFocus:
 *    When non-null, inputs will not receive focus events,
 *    but instead this function will be called
 *  * onInputError:
 *    Called when there is an error grading a widget
 *  * onFocusChange: (newFocus, oldFocus)
 *    Called when the user focus changes. Each parameter is an object
 *    containing two fields, `path` and `element`.
 *    `path` is an array uniquely identifying the input to perseus
 *    `element` is a DOM element representing the area covered by
 *    the input (but is not necessarily an `<input>` element).
 *    When focus changes to or from nothing being selected, `path`
 *    will be null.
 *
 * Stable CSS ClassNames:
 * These are css class names that will continue to preserve their
 * semantic meaning across the same perseus api major version.
 */
var React = require("react");

module.exports = {
    Options: {
        propTypes: React.PropTypes.shape({
            isMobile: React.PropTypes.bool,
            fancyDropdowns: React.PropTypes.bool.isRequired,
            interceptInputFocus: React.PropTypes.func,
            onInputError: React.PropTypes.func.isRequired,
            onFocusChange: React.PropTypes.func.isRequired,
            staticRender: React.PropTypes.bool.isRequired,
            readOnly: React.PropTypes.bool.isRequired,
            baseElements: React.PropTypes.shape({
                Link: React.PropTypes.func
            })
        }).isRequired,

        defaults: {
            isMobile: false,
            fancyDropdowns: false,
            interceptInputFocus: null,
            onInputError: function onInputError() {},
            onFocusChange: function onFocusChange() {},
            staticRender: false,
            readOnly: false,
            baseElements: {
                Link: function Link(props) {
                    return React.createElement("a", props);
                }
            }
        }
    },
    ClassNames: {
        INPUT: "perseus-input",
        FOCUSED: "perseus-focused",
        RADIO: {
            OPTION: "perseus-radio-option",
            SELECTED: "perseus-radio-selected",
            OPTION_CONTENT: "perseus-radio-option-content"
        }
    }
};

},{"react":246}],295:[function(require,module,exports){
"use strict";

require("./all-widgets.js");

var version = require("./version.json");

module.exports = {
    apiVersion: version.apiVersion,
    itemDataVersion: version.itemDataVersion,
    init: require("./init.js"),
    render: require("./render.js"),
    AnswerAreaRenderer: require("./answer-area-renderer.jsx"),
    Editor: require("./editor.jsx"),
    EditorPage: require("./editor-page.jsx"),
    ItemRenderer: require("./item-renderer.jsx"),
    Renderer: require("./renderer.jsx"),
    RevisionDiff: require("./diffs/revision-diff.jsx"),
    StatefulEditorPage: require("./stateful-editor-page.jsx"),
    ClassNames: require("./perseus-api.jsx").ClassNames,
    Util: require("./util.js")
};

},{"./all-widgets.js":249,"./answer-area-renderer.jsx":251,"./diffs/revision-diff.jsx":268,"./editor-page.jsx":274,"./editor.jsx":275,"./init.js":279,"./item-renderer.jsx":290,"./perseus-api.jsx":294,"./render.js":297,"./renderer.jsx":298,"./stateful-editor-page.jsx":299,"./util.js":303,"./version.json":304}],296:[function(require,module,exports){
"use strict";

var React = require('react');

var QuestionParagraph = React.createClass({
    displayName: "QuestionParagraph",

    render: function render() {
        return React.createElement(
            "div",
            { className: "paragraph" },
            this.props.children
        );
    }
});

module.exports = QuestionParagraph;

},{"react":246}],297:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var render = function render(Component, dom, props) {
    return ReactDOM.render(React.createElement(Component, props), dom);
};

module.exports = render;

},{"react":246,"react-dom":95}],298:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');

var TeX = require("./tex.jsx");
var WidgetContainer = require("./widget-container.jsx");
var Widgets = require("./widgets.js");
var QuestionParagraph = require("./question-paragraph.jsx");

var Util = require("./util.js");
var EnabledFeatures = require("./enabled-features.jsx");
var ApiOptions = require("./perseus-api.jsx").Options;

var mapObject = function mapObject(obj, lambda) {
    var result = {};
    _.each(_.keys(obj), function (key) {
        result[key] = lambda(obj[key], key);
    });
    return result;
};

var specialChars = {
    // escaped: original
    "\\a": '\x07', // \a isn't valid javascript
    "\\b": "\b",
    "\\t": "\t",
    "\\n": "\n",
    "\\v": "\v",
    "\\f": "\f",
    "\\r": "\r",
    "\\\\": "\\"
};

var rEscapedChars = /\\a|\\b|\\t|\\n|\\v|\\f|\\r|\\\\/g;

if (typeof KA !== "undefined" && KA.language === "en-PT") {
    // When using crowdin's jipt (Just in place translation), we need to keep a
    // registry of crowdinId's to component so that we can update the
    // component's state as the translator enters their translation.
    window.PerseusTranslationComponents = [];

    if (!KA.jipt_dom_insert_checks) {
        KA.jipt_dom_insert_checks = [];
    }

    // We add a function that will get called whenever jipt says the dom needs
    // to be updated
    KA.jipt_dom_insert_checks.push(function (text, node, attribute) {
        var index = $(node).data("perseus-component-index");
        // We only update if we had added an index onto the node's data.
        if (node && typeof index !== "undefined") {
            var component = window.PerseusTranslationComponents[index];

            if (!component) {
                // The component has disappeared, so we tell jipt not to try
                // and insert anything
                return false;
            }
            // Jipt sends down the escaped translation, so we need to
            // unescape \\t to \t among other characters here
            text = text.replace(rEscapedChars, function (ch) {
                return specialChars[ch];
            });

            component.setState({
                jiptContent: text
            });

            // Return false to tell jipt not to insert anything into the DOM
            // itself, otherwise it will mess up what React expects there to be
            return false;
        }
        // The string updated wasn't part of perseus, so we tell jipt to just
        // insert the translation as-is.
        return text;
    });
}

var SHOULD_CLEAR_WIDGETS_PROP_LIST = ["content", "problemNum", "widgets"];

// Check if one focus path / id path is a prefix of another
// The focus path null will never be a prefix of any non-null
// path, since it represents no focus.
// Otherwise, prefix is calculated by whether every array
// element in the prefix is present in the same position in the
// wholeArray path.
var isIdPathPrefix = function isIdPathPrefix(prefixArray, wholeArray) {
    if (prefixArray === null || wholeArray === null) {
        return prefixArray === wholeArray;
    }
    return _.every(prefixArray, function (elem, i) {
        return _.isEqual(elem, wholeArray[i]);
    });
};

var Renderer = React.createClass({
    displayName: 'Renderer',

    propTypes: {
        highlightedWidgets: React.PropTypes.array,
        enabledFeatures: EnabledFeatures.propTypes,
        apiOptions: React.PropTypes.object,
        questionCompleted: React.PropTypes.bool,
        onInteractWithWidget: React.PropTypes.func
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (!_.isEqual(_.pick(this.props, SHOULD_CLEAR_WIDGETS_PROP_LIST), _.pick(nextProps, SHOULD_CLEAR_WIDGETS_PROP_LIST))) {
            this.setState(this._getInitialWidgetState(nextProps));
        }
    },

    getDefaultProps: function getDefaultProps() {
        return {
            content: "",
            widgets: {},
            ignoreMissingWidgets: false,
            highlightedWidgets: [],
            enabledFeatures: EnabledFeatures.defaults,
            apiOptions: {}, // we'll do a deep defaults in render()
            // onRender may be called multiple times per render, for example
            // if there are multiple images or TeX pieces within `content`.
            // It is a good idea to debounce any functions passed here.
            questionCompleted: false,
            onRender: function onRender() {},
            onInteractWithWidget: function onInteractWithWidget() {}
        };
    },

    getInitialState: function getInitialState() {
        return _.extend({
            jiptContent: null
        }, this._getInitialWidgetState());
    },

    _getInitialWidgetState: function _getInitialWidgetState(props) {
        props = props || this.props;
        var allWidgetInfo = this._getAllWidgetsInfo(props);
        return {
            widgetInfo: allWidgetInfo,
            widgetProps: this._getAllWidgetsStartProps(allWidgetInfo)
        };
    },

    _getAllWidgetsInfo: function _getAllWidgetsInfo(props) {
        props = props || this.props;
        return mapObject(props.widgets, function (widgetInfo, widgetId) {
            if (!widgetInfo.type) {
                var type = widgetId.split(" ")[0];
                widgetInfo = _.extend({}, widgetInfo, {
                    type: type
                });
            }
            return Widgets.upgradeWidgetInfoToLatestVersion(widgetInfo);
        });
    },

    _getAllWidgetsStartProps: function _getAllWidgetsStartProps(allWidgetInfo) {
        var _this = this;

        return mapObject(allWidgetInfo, function (editorProps) {
            return Widgets.getRendererPropsForWidgetInfo(_.extend({
                problemNum: _this.props.problemNum
            }, editorProps));
        });
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        var stateChanged = !_.isEqual(this.state, nextState);
        var propsChanged = !_.isEqual(this.props, nextProps);
        return propsChanged || stateChanged;
    },

    getPiece: function getPiece(saved, /* output */widgetIds, apiOptions) {
        if (saved.charAt(0) === "@") {
            // Just text
            return saved;
        } else if (saved.charAt(0) === "$") {
            // Math
            var tex = saved.slice(1, saved.length - 1);
            return React.createElement(
                TeX,
                { onRender: this.props.onRender },
                tex
            );
        } else if (saved.charAt(0) === "[") {
            // Widget
            var match = Util.rWidgetParts.exec(saved);
            var id = match[1];
            var implied_type = match[2];

            var widgetInfo = this.state.widgetInfo[id];
            if (widgetInfo || this.props.ignoreMissingWidgets) {
                // TODO(jack): Remove this input/output parameter
                widgetIds.push(id);

                var type = (widgetInfo || {}).type || implied_type;
                var cls = Widgets.getWidget(type, this.props.enabledFeatures);
                var shouldHighlight = _.contains(this.props.highlightedWidgets, id);

                return React.createElement(WidgetContainer, {
                    ref: "container:" + id,
                    key: "container:" + id,
                    type: cls,
                    initialProps: this.getWidgetProps(id),
                    shouldHighlight: shouldHighlight
                });
            }
        }
    },

    getApiOptions: function getApiOptions(props) {
        return _.extend({}, ApiOptions.defaults, props.apiOptions);
    },

    getWidgetProps: function getWidgetProps(id) {
        var _this2 = this;

        var widgetProps = this.state.widgetProps[id] || {};
        return _.extend({}, widgetProps, {
            widgetId: id,
            problemNum: this.props.problemNum,
            enabledFeatures: this.props.enabledFeatures,
            apiOptions: this.getApiOptions(this.props),
            questionCompleted: this.props.questionCompleted,
            onFocus: _.partial(this._onWidgetFocus, id),
            onBlur: _.partial(this._onWidgetBlur, id),
            onChange: function onChange(newProps, cb) {
                _this2._setWidgetProps(id, newProps, cb);
            }
        });
    },

    _onWidgetFocus: function _onWidgetFocus(id, focusPath, element) {
        if (focusPath === undefined && element === undefined) {
            focusPath = [];
            element = ReactDOM.findDOMNode(this.refs[id]);
        } else {
            if (!_.isArray(focusPath)) {
                throw new Error("widget props.onFocus focusPath must be an Array, " + "but was" + JSON.stringify(focusPath));
            }
            if (element == null) {
                throw new Error("widget props.onFocus element was " + element);
            }
        }
        this._setCurrentFocus([id].concat(focusPath), element);
    },

    _onWidgetBlur: function _onWidgetBlur(id) {
        var _this3 = this;

        var blurringFocus = this._currentFocus;
        // Wait until after any new focus events fire this tick before
        // declaring that nothing is focused.
        // If a different widget was focused, we'll see an onBlur event
        // now, but then an onFocus event on a different element before
        // this callback is executed
        _.defer(function () {
            if (_.isEqual(_this3._currentFocus.path, blurringFocus.path)) {
                _this3._setCurrentFocus(null, null);
            }
        });
    },

    render: function render() {
        var content = this.state.jiptContent || this.props.content;

        if (typeof KA !== "undefined" && KA.language === "en-PT" && this.state.jiptContent == null && this.props.content.indexOf('crwdns') !== -1) {
            // Crowdin's JIPT (Just in place translation) uses a fake language
            // with language tag "en-PT" where the value of the translations
            // look like: {crwdns2657085:0}{crwdne2657085:0} where it keeps the
            // {crowdinId:ngettext variant}. We detect whether the current
            // content matches this, so we can take over rendering of
            // the perseus content as the translators interact with jipt.
            // We search for only part of the tag that crowdin uses to guard
            // against them changing the format on us. The full tag it looks
            // for can be found in https://cdn.crowdin.net/jipt/jipt.js
            // globalPhrase var.

            // If we haven't already added this component to the registry do so
            // now. showHints() may cause this component to be rerendered
            // before jipt has a chance to replace its contents, so this check
            // will keep us from adding the component to the registry a second
            // time.
            if (!this.translationIndex) {
                this.translationIndex = window.PerseusTranslationComponents.push(this) - 1;
            }
            // We now need to output this tag, as jipt looks for it to be
            // able to replace it with a translation that it runs an ajax
            // call to get.  We add a data attribute with the index to the
            // Persues.TranslationComponent registry so that when jipt
            // calls its before_dom_insert we can lookup this component by
            // this attribute and render the text with markdown.
            return React.createElement(
                'div',
                {
                    'data-perseus-component-index': this.translationIndex },
                content
            );
        }
        var self = this;
        var extracted = Renderer.extractMathAndWidgets(content);
        var markdown = extracted[0];
        var savedMath = extracted[1];
        var widgetIds = this.widgetIds = [];

        var apiOptions = _.extend({}, ApiOptions.defaults, this.props.apiOptions);

        // XXX(alpert): smartypants gets called on each text node before it's
        // added to the DOM tree, so we override it to insert the math and
        // widgets.
        var smartypants = markedReact.InlineLexer.prototype.smartypants;
        markedReact.InlineLexer.prototype.smartypants = function (text) {
            var pieces = Util.split(text, /@@(\d+)@@/g);
            for (var i = 0; i < pieces.length; i++) {
                var type = i % 2;
                if (type === 0) {
                    pieces[i] = smartypants.call(this, pieces[i]);
                } else if (type === 1) {
                    // A saved math-or-widget number
                    pieces[i] = self.getPiece(savedMath[pieces[i]], widgetIds, apiOptions);
                }
            }
            return pieces;
        };

        var wrap = function wrap(text) {
            tokCount++;
            return React.createElement(
                QuestionParagraph,
                { key: '' + tokCount },
                text
            );
        };

        var tok = markedReact.Parser.prototype.tok;
        var tokLevelCount = 0;
        var tokCount = 0;
        markedReact.Parser.prototype.tok = function () {
            tokLevelCount++;
            var result;
            var text = tok.call(this);
            if (tokLevelCount === 1 && (!_.isArray(text) || text.length)) {
                result = wrap(text);
            } else {
                result = text;
            }
            tokLevelCount--;
            return result;
        };

        try {
            return React.createElement(
                'div',
                null,
                markedReact(markdown)
            );
        } finally {
            markedReact.InlineLexer.prototype.smartypants = smartypants;
            markedReact.Parser.prototype.tok = tok;
        }
    },

    handleRender: function handleRender() {
        var onRender = this.props.onRender;

        var $images = $(ReactDOM.findDOMNode(this)).find("img");
        var imageAttrs = this.props.images || {};

        // TODO(jack): Weave this into the rendering in markedReact by passing
        // a function for how to render images, which reads this data
        // (probably part of a larger marked refactor to take all rendering
        // methods via parameters)
        _.map(_.toArray($images), function (image, i) {
            var $image = $(image);
            var src = $image.attr('src');
            var attrs = imageAttrs[src];
            if (attrs) {
                $image.attr(attrs);
            }
        });

        // Fire callback on image load...
        // TODO (jack): make this call happen exactly once through promises!
        $images.on("load", onRender);

        // ...as well as right now (non-image, non-TeX or image from cache)
        onRender();
    },

    componentDidMount: function componentDidMount() {
        this.handleRender();
        this._currentFocus = {
            path: null,
            element: null
        };
    },

    componentDidUpdate: function componentDidUpdate() {
        this.handleRender();
    },

    componentWillUnmount: function componentWillUnmount() {
        if (this.translationIndex != null) {
            window.PerseusTranslationComponents[this.translationIndex] = null;
        }
    },

    // Sets the current focus path and element
    // If the new focus path is not a prefix of the old focus path,
    // we send an onChangeFocus event back to our parent.
    _setCurrentFocus: function _setCurrentFocus(path, element) {
        // We don't do this when the new path is a prefix because
        // that prefix is already focused (we're just in a more specific
        // area of it). This makes it safe to call _setCurrentFocus
        // whenever a widget is interacted with--we won't wipe out
        // our focus state if we are already focused on a subpart
        // of that widget (i.e. a transformation NumberInput inside
        // of a transformer widget).
        if (!isIdPathPrefix(path, this._currentFocus.path)) {
            var prevFocus = this._currentFocus;
            this._currentFocus = {
                path: path,
                element: element
            };
            if (this.props.apiOptions.onFocusChange != null) {
                this.props.apiOptions.onFocusChange(this._currentFocus, prevFocus);
            }
        }
    },

    focus: function focus() {
        var id;
        var focusResult;
        for (var i = 0; i < this.widgetIds.length; i++) {
            var widgetId = this.widgetIds[i];
            var widget = this.getWidgetInstance(widgetId);
            var widgetFocusResult = widget.focus && widget.focus();
            if (widgetFocusResult) {
                id = widgetId;
                focusResult = widgetFocusResult;
                break;
            }
        }

        if (id) {
            // reconstruct a {path, element} focus object
            var path;
            var element;
            if (_.isObject(focusResult)) {
                // The result of focus was a {path, id} object itself
                path = [id].concat(focusResult.path || []);
                element = focusResult.element || ReactDOM.findDOMNode(this.getWidgetInstance(id));
            } else {
                // The result of focus was true or the like; just
                // construct a root focus object
                path = [id];
                element = ReactDOM.findDOMNode(this.getWidgetInstance(id));
            }

            this._setCurrentFocus(path, element);
            return true;
        }
    },

    toJSON: function toJSON(skipValidation) {
        var state = {};
        _.each(this.props.widgets, function (props, id) {
            var widget = this.getWidgetInstance(id);
            var s = widget.toJSON(skipValidation);
            if (!_.isEmpty(s)) {
                state[id] = s;
            }
        }, this);
        return state;
    },

    emptyWidgets: function emptyWidgets() {
        var _this4 = this;

        return _.filter(this.widgetIds, function (id) {
            var widgetProps = _this4.props.widgets[id];
            var score = _this4.getWidgetInstance(id).simpleValidate(widgetProps.options, null);
            return Util.scoreIsEmpty(score);
        });
    },

    _setWidgetProps: function _setWidgetProps(id, newProps, cb) {
        var _this5 = this;

        var widgetProps = _.clone(this.state.widgetProps);
        widgetProps[id] = _.extend({}, widgetProps[id], newProps);
        this.setState({ widgetProps: widgetProps }, function () {
            var cbResult = cb && cb();
            _this5.props.onInteractWithWidget(id);
            if (cbResult !== false) {
                // TODO(jack): For some reason, some widgets don't always end
                // up in refs here, which is repro-able if you make an
                // [[ orderer 1 ]] and copy-paste this, then change it to be
                // an [[ orderer 2 ]]. The resulting Renderer ends up with
                // an "orderer 2" ref but not an "orderer 1" ref. @_@??
                // TODO(jack): Figure out why this is happening and fix it
                // As far as I can tell, this is only an issue in the
                // editor-page, so doing this shouldn't break clients hopefully
                var element = _this5.refs[id] ? ReactDOM.findDOMNode(_this5.getWidgetInstance(id)) : null;
                _this5._setCurrentFocus([id], element);
            }
        });
    },

    setInputValue: function setInputValue(inputWidgetId, newValue, focus) {
        // TODO(jack): change this to value: when we change input-number/
        // expression's prop to be value
        this._setWidgetProps(inputWidgetId, {
            currentValue: String(newValue)
        }, function () {
            return focus;
        });
    },

    getWidgetInstance: function getWidgetInstance(id) {
        var ref = this.refs["container:" + id];
        if (!ref) {
            return null;
        }
        return ref.getWidget();
    },

    showGuess: function showGuess(answerData) {
        if (!answerData) return {};
        return _.map(this.widgetIds, function (id, index) {
            if (this.refs[id].setAnswerFromJSON === undefined) {
                // Target widget cannot show answer.
                return { showSuccess: false, err: 'no setAnswerFromJSON implemented for ' + id + ' widget' };
            } else {
                // Just show the given answer.
                if (answerData[0].length <= index) {
                    console.log("showGuess err");
                    return {};
                }
                widgetAnswerData = answerData[0][index];
                this.refs[id].setAnswerFromJSON(widgetAnswerData);
                return { showSuccess: true };
            }
        }, this);
    },

    canShowAllHistoryWidgets: function canShowAllHistoryWidgets(answerData) {
        var r = true;
        _.map(this.widgetIds, function (id, index) {
            if (this.refs[id].setAnswerFromJSON === undefined) {
                if (id !== 'image 1') {
                    r = false;
                }
            }
        }, this);
        return r;
    },

    guessAndScore: function guessAndScore() {
        var widgetProps = this.props.widgets;
        var onInputError = this.props.apiOptions.onInputError || function () {};

        var totalGuess = _.map(this.widgetIds, function (id) {
            if (id.indexOf('lights-puzzle') > -1 || id.indexOf('transformer') > -1 || id.indexOf('image') > -1) {
                return 'no save ' + id + ' widget';
            }
            return this.getWidgetInstance(id).toJSON();
        }, this);

        var totalScore = _.chain(this.widgetIds).filter(function (id) {
            var props = widgetProps[id];
            // props.graded is unset or true
            return props.graded == null || props.graded;
        }).map(function (id) {
            var props = widgetProps[id];
            var widget = this.getWidgetInstance(id);
            return widget.simpleValidate(props.options, onInputError);
        }, this).reduce(Util.combineScores, Util.noScore).value();

        return [totalGuess, totalScore];
    },

    examples: function examples() {
        var widgets = this.widgetIds;
        var examples = _.compact(_.map(widgets, function (widget) {
            return widget.examples ? widget.examples() : null;
        }));

        // no widgets with examples
        if (!examples.length) {
            return null;
        }

        var allEqual = _.all(examples, function (example) {
            return _.isEqual(examples[0], example);
        });

        // some widgets have different examples
        // TODO(alex): handle this better
        if (!allEqual) {
            return null;
        }

        return examples[0];
    },

    statics: {
        extractMathAndWidgets: extractMathAndWidgets
    }
});

var rInteresting = /(\$|[{}]|\\[\\${}]|\n{2,}|\[\[\u2603 [a-z-]+ [0-9]+\]\]|@@\d+@@)/g;

function extractMathAndWidgets(text) {
    // "$x$ is a cool number, just like $6 * 7$!" gives
    //     ["@@0@@ is a cool number, just like @@1@@!", ["$x$", "$6 * 7$"]]
    //
    // Inspired by http://stackoverflow.com/q/11231030.
    var savedMath = [];
    var blocks = Util.split(text, rInteresting);

    var mathPieces = [],
        l = blocks.length,
        block,
        braces;
    for (var i = 0; i < l; i++) {
        block = blocks[i];

        if (mathPieces.length) {
            // Looking for an end delimeter
            mathPieces.push(block);
            blocks[i] = "";

            if (block === "$" && braces <= 0) {
                blocks[i] = saveMath(mathPieces.join(""));
                mathPieces = [];
            } else if (block.slice(0, 2) === "\n\n" || i === l - 1) {
                // We're at the end of a line... just don't do anything
                // TODO(alpert): Error somehow?
                blocks[i] = mathPieces.join("");
                mathPieces = [];
            } else if (block === "{") {
                braces++;
            } else if (block === "}") {
                braces--;
            }
        } else if (i % 2 === 1) {
            // Looking for a start delimeter
            var two = block && block.slice(0, 2);
            if (two === "[[" || two === "@@") {
                // A widget or an @@n@@ thing (which we pull out so we don't
                // get confused later).
                blocks[i] = saveMath(block);
            } else if (block === "$") {
                // We got one! Save it for later and blank out its space.
                mathPieces.push(block);
                blocks[i] = "";
                braces = 0;
            }
            // Else, just normal text. Move along, move along.
        }
    }

    return [blocks.join(""), savedMath];

    function saveMath(math) {
        savedMath.push(math);
        return "@@" + (savedMath.length - 1) + "@@";
    }
}

module.exports = Renderer;

},{"./enabled-features.jsx":276,"./perseus-api.jsx":294,"./question-paragraph.jsx":296,"./tex.jsx":302,"./util.js":303,"./widget-container.jsx":305,"./widgets.js":306,"react":246,"react-dom":95}],299:[function(require,module,exports){
"use strict";

var React = require('react');
var EditorPage = require("./editor-page.jsx");

/* Renders an EditorPage as a non-controlled component.
 *
 * Normally the parent of EditorPage must pass it an onChange callback and then
 * respond to any changes by modifying the EditorPage props to reflect those
 * changes. With StatefulEditorPage changes are stored in state so you can
 * query them with toJSON.
 */
var StatefulEditorPage = React.createClass({
    displayName: "StatefulEditorPage",

    render: function render() {
        return React.createElement(EditorPage, this.state);
    },
    getInitialState: function getInitialState() {
        return _({}).extend(this.props, {
            onChange: this.handleChange,
            ref: "editor"
        });
    },
    // getInitialState isn't called if the react component is re-rendered
    // in-place on the dom, in which case this is called instead, so we
    // need to update the state here.
    // (This component is currently re-rendered by the "Add image" button.)
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState(nextProps);
    },
    toJSON: function toJSON() {
        return this.refs.editor.toJSON();
    },
    handleChange: function handleChange(newState, cb) {
        this.setState(newState, cb);
    },
    scorePreview: function scorePreview() {
        return this.refs.editor.scorePreview();
    }
});

module.exports = StatefulEditorPage;

},{"./editor-page.jsx":274,"react":246}],300:[function(require,module,exports){
"use strict";

// Generated by running:
// `node less-to-js.js 'stylesheets/exercise-content-package/variables.less'`
module.exports = {
    // @baseFontFamily:        "Proxima Nova", sans-serif;
    baseFontFamily: "'Proxima Nova',sans-serif",
    // @boldFontFamily:        "Proxima Nova Semibold", sans-serif;
    boldFontFamily: "'Proxima Nova Semibold',sans-serif",
    // @green:                 #76a005;
    green: "#76A005",
    // @kaGreen:               #71b307;
    kaGreen: "#71B307",
    // @blue:                  #1c758a;
    blue: "#1C758A",
    // @gray:                  #aaa;
    gray: "#AAAAAA",
    // @red:                   #ffbaba;
    red: "#FFBABA",
    // @questionWidth:         480px;
    questionWidth: "480px",
    // @grayLight:             #aaa;
    grayLight: "#AAAAAA",
    // @grayLighter:           #ddd;
    grayLighter: "#DDDDDD",
    // @learnstormBlue:        #4898fc;
    learnstormBlue: "#4898FC",

    white: '#FFFFFF',
    gray98: '#FAFAFA',
    gray97: '#F6F7F7',
    gray95: '#F0F1F2',
    gray90: '#E3E5E6',
    gray85: '#D6D8DA',
    gray76: '#BABEC2',
    gray68: '#888D93',
    gray41: '#626569',
    gray25: '#3B3e40',
    gray17: '#21242c',
    black: '#000000',

    // @pure-sm-min: 568px;
    pureSmMin: "568px",
    // @pure-md-min: 768px;
    pureMdMin: "768px",
    // @pure-lg-min: 1024px;
    pureLgMin: "1024px",
    // @pure-xl-min: 1280px;
    pureXlMin: "1280px",
    // @pure-xs-max: (@pure-sm-min - 1);
    pureXsMax: "567px",
    // @pure-sm-max: (@pure-md-min - 1);
    pureSmMax: "767px",
    // @pure-md-max: (@pure-lg-min - 1);
    pureMdMax: "1023px",
    // @pure-lg-max: (@pure-xl-min - 1);
    pureLgMax: "1279px",
    // @tableBackgroundAccent: #f9f9f9; // for striping
    tableBackgroundAccent: "#F9F9F9",
    // @satBlue:               #0084ce;
    satBlue: "#0084CE",
    // @satSelectedBackgroundColor: #e4f3f9;
    satSelectedBackgroundColor: "#E4F3F9",
    // @satActiveBackgroundColor: #d0edf4;
    satActiveBackgroundColor: "#D0EDF4",
    // @satCorrectColor:       #009900;
    satCorrectColor: "#009900",
    // @satCorrectBorderColor: #00cc00;
    satCorrectBorderColor: "#00CC00",
    // @satCorrectBackgroundColor: #e4f7e4;
    satCorrectBackgroundColor: "#E4F7E4",
    // @satIncorrectColor:     #990000;
    satIncorrectColor: "#990000",
    // @satIncorrectBorderColor: #cc5252;
    satIncorrectBorderColor: "#CC5252",
    // @satIncorrectBackgroundColor: #f2ebeb;
    satIncorrectBackgroundColor: "#F2EBEB",
    // @zIndexScratchPad: 1;
    zIndexScratchPad: "1",
    // @zIndexAboveScratchpad: @zIndexScratchPad + 1;
    zIndexAboveScratchpad: "2",
    // @zIndexInteractiveComponent: @zIndexAboveScratchpad + 1;
    zIndexInteractiveComponent: "3",
    // @zIndexCurrentlyDragging: @zIndexInteractiveComponent + 1;
    zIndexCurrentlyDragging: "4",
    // @zIndexCalculator: @zIndexCurrentlyDragging + 1;
    zIndexCalculator: "5",
    // @phoneMargin: 16px;
    phoneMargin: 16,

    negativePhoneMargin: -16,
    hintBorderWidth: 4,

    // The 'base unit' -- our new typography and layout styles are defined in
    // terms of multiples of the 'base unit'.
    baseUnitPx: 16,

    interactiveSizes: {
        defaultBoxSize: 400,
        defaultBoxSizeSmall: 288
    },

    circleSize: 20
};

module.exports.radioBorderColor = module.exports.gray76;
module.exports.checkedColor = module.exports.kaGreen;

},{}],301:[function(require,module,exports){
"use strict";

/**
 * A default set of media queries to use for different screen sizes. Based on
 * the breakpoints from purecss.
 *
 * Use like:
 *   StyleSheet.create({
 *       blah: {
 *           [mediaQueries.xs]: {
 *
 *           },
 *       },
 *   });
 */

var _require = require("./constants.js"),
    pureXsMax = _require.pureXsMax,
    pureSmMin = _require.pureSmMin,
    pureSmMax = _require.pureSmMax,
    pureMdMin = _require.pureMdMin,
    pureMdMax = _require.pureMdMax,
    pureLgMin = _require.pureLgMin,
    pureLgMax = _require.pureLgMax,
    pureXlMin = _require.pureXlMin;

module.exports = {
    xs: "@media screen and (max-width: " + pureXsMax + ")",
    sm: "@media screen and (min-width: " + pureSmMin + ") and " + ("(max-width: " + pureSmMax + ")"),
    md: "@media screen and (min-width: " + pureMdMin + ") and " + ("(max-width: " + pureMdMax + ")"),
    lg: "@media screen and (min-width: " + pureLgMin + ") and " + ("(max-width: " + pureLgMax + ")"),
    xl: "@media screen and (min-width: " + pureXlMin + "))",

    smOrSmaller: "@media screen and (max-width: " + pureSmMax + ")",
    mdOrSmaller: "@media screen and (max-width: " + pureMdMax + ")",
    lgOrSmaller: "@media screen and (max-width: " + pureLgMax + ")",

    smOrLarger: "@media screen and (min-width: " + pureSmMin + ")",
    mdOrLarger: "@media screen and (min-width: " + pureMdMin + ")",
    lgOrLarger: "@media screen and (min-width: " + pureLgMin + ")"
};

},{"./constants.js":300}],302:[function(require,module,exports){
"use strict";

/**
 * For math rendered using MathJax. Use me like <TeX>2x + 3</TeX>.
 */

var React = require('react');

var pendingScripts = [];
var needsProcess = false;
var timeout = null;

function process(script, callback) {
    pendingScripts.push(script);
    if (!needsProcess) {
        needsProcess = true;
        timeout = setTimeout(doProcess, 0, callback);
    }
}

function doProcess(callback) {
    MathJax.Hub.Queue(function () {
        var oldElementScripts = MathJax.Hub.elementScripts;
        MathJax.Hub.elementScripts = function (element) {
            var scripts = pendingScripts;
            pendingScripts = [];
            needsProcess = false;
            return scripts;
        };

        try {
            return MathJax.Hub.Process(null, callback);
        } catch (e) {
            // IE8 requires `catch` in order to use `finally`
            throw e;
        } finally {
            MathJax.Hub.elementScripts = oldElementScripts;
        }
    });
}

var TeX = React.createClass({
    displayName: "TeX",

    getDefaultProps: function getDefaultProps() {
        return {
            // Called after math is rendered or re-rendered
            onRender: function onRender() {},
            onClick: null
        };
    },

    render: function render() {
        return React.createElement(
            "span",
            { onClick: this.props.onClick },
            React.createElement("span", { ref: "mathjax" }),
            React.createElement("span", { ref: "katex" })
        );
    },

    componentDidMount: function componentDidMount() {
        var text = this.props.children;
        var onRender = this.props.onRender;

        if (typeof Exercises === "undefined" || Exercises.useKatex) {
            try {
                var katexHolder = this.refs.katex;
                katex.render(text, katexHolder);
                onRender();
                return;
            } catch (e) {
                /* jshint -W103 */
                if (e.__proto__ !== katex.ParseError.prototype) {
                    /* jshint +W103 */
                    throw e;
                }
            }
        }

        this.setScriptText(text);
        process(this.script, onRender);
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        var oldText = prevProps.children;
        var newText = this.props.children;
        var onRender = this.props.onRender;

        if (oldText !== newText) {
            if (typeof Exercises === "undefined" || Exercises.useKatex) {
                try {
                    var katexHolder = this.refs.katex;
                    katex.render(newText, katexHolder);
                    if (this.script) {
                        var jax = MathJax.Hub.getJaxFor(this.script);
                        if (jax) {
                            jax.Remove();
                        }
                    }
                    onRender();
                    return;
                } catch (e) {
                    /* jshint -W103 */
                    if (e.__proto__ !== katex.ParseError.prototype) {
                        /* jshint +W103 */
                        throw e;
                    }
                }
            }

            $(this.refs.katex).empty();

            if (this.script) {
                var component = this;
                MathJax.Hub.Queue(function () {
                    var jax = MathJax.Hub.getJaxFor(component.script);
                    if (jax) {
                        return jax.Text(newText, onRender);
                    } else {
                        component.setScriptText(newText);
                        process(component.script, onRender);
                    }
                });
            } else {
                this.setScriptText(newText);
                process(this.script, onRender);
            }
        }
    },

    setScriptText: function setScriptText(text) {
        if (!this.script) {
            this.script = document.createElement("script");
            this.script.type = "math/tex";
            this.refs.mathjax.appendChild(this.script);
        }
        if ("text" in this.script) {
            // IE8, etc
            this.script.text = text;
        } else {
            this.script.textContent = text;
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        if (this.script) {
            var jax = MathJax.Hub.getJaxFor(this.script);
            if (jax) {
                jax.Remove();
            }
        }
    }
});

module.exports = TeX;

},{"react":246}],303:[function(require,module,exports){
"use strict";

var nestedMap = function nestedMap(children, func, context) {
    if (_.isArray(children)) {
        return _.map(children, function (child) {
            return nestedMap(child, func);
        });
    } else {
        return func.call(context, children);
    }
};

var Util = {
    nestedMap: nestedMap,

    rWidgetParts: /^\[\[\u2603 (([a-z-]+) ([0-9]+))\]\]$/,

    noScore: {
        type: "points",
        earned: 0,
        total: 0,
        message: null
    },

    asc: function asc(text) {
        // 全型轉半型的 function
        if (typeof text != "string") {
            return text;
        }
        var asciiTable = "!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        var big5Table = "%uFF01%u201D%uFF03%uFF04%uFF05%uFF06%u2019%uFF08%uFF09%uFF0A%uFF0B%uFF0C%uFF0D%uFF0E%uFF0F%uFF10%uFF11%uFF12%uFF13%uFF14%uFF15%uFF16%uFF17%uFF18%uFF19%uFF1A%uFF1B%uFF1C%uFF1D%uFF1E%uFF1F%uFF20%uFF21%uFF22%uFF23%uFF24%uFF25%uFF26%uFF27%uFF28%uFF29%uFF2A%uFF2B%uFF2C%uFF2D%uFF2E%uFF2F%uFF30%uFF31%uFF32%uFF33%uFF34%uFF35%uFF36%uFF37%uFF38%uFF39%uFF3A%uFF3B%uFF3C%uFF3D%uFF3E%uFF3F%u2018%uFF41%uFF42%uFF43%uFF44%uFF45%uFF46%uFF47%uFF48%uFF49%uFF4A%uFF4B%uFF4C%uFF4D%uFF4E%uFF4F%uFF50%uFF51%uFF52%uFF53%uFF54%uFF55%uFF56%uFF57%uFF58%uFF59%uFF5A%uFF5B%uFF5C%uFF5D%uFF5E";

        var result = "";
        for (var i = 0; i < text.length; i++) {
            var val = escape(text.charAt(i));
            var j = big5Table.indexOf(val);
            result += j > -1 && val.length == 6 ? asciiTable.charAt(j / 6) : text.charAt(i);
        }
        return result;
    },

    seededRNG: function seededRNG(seed) {
        var randomSeed = seed;

        return function () {
            // Robert Jenkins' 32 bit integer hash function.
            var seed = randomSeed;
            seed = seed + 0x7ed55d16 + (seed << 12) & 0xffffffff;
            seed = (seed ^ 0xc761c23c ^ seed >>> 19) & 0xffffffff;
            seed = seed + 0x165667b1 + (seed << 5) & 0xffffffff;
            seed = (seed + 0xd3a2646c ^ seed << 9) & 0xffffffff;
            seed = seed + 0xfd7046c5 + (seed << 3) & 0xffffffff;
            seed = (seed ^ 0xb55a4f09 ^ seed >>> 16) & 0xffffffff;
            return (randomSeed = seed & 0xfffffff) / 0x10000000;
        };
    },

    // Shuffle an array using a given random seed or function.
    // If `ensurePermuted` is true, the input and ouput are guaranteed to be
    // distinct permutations.
    shuffle: function shuffle(array, randomSeed, ensurePermuted) {
        // Always return a copy of the input array
        var shuffled = _.clone(array);

        // Handle edge cases (input array is empty or uniform)
        if (!shuffled.length || _.all(shuffled, function (value) {
            return _.isEqual(value, shuffled[0]);
        })) {
            return shuffled;
        }

        var random;
        if (_.isFunction(randomSeed)) {
            random = randomSeed;
        } else {
            random = Util.seededRNG(randomSeed);
        }

        do {
            // Fischer-Yates shuffle
            for (var top = shuffled.length; top > 0; top--) {
                var newEnd = Math.floor(random() * top),
                    temp = shuffled[newEnd];

                shuffled[newEnd] = shuffled[top - 1];
                shuffled[top - 1] = temp;
            }
        } while (ensurePermuted && _.isEqual(array, shuffled));

        return shuffled;
    },

    // In IE8, split doesn't work right. Implement it ourselves.
    split: "x".split(/(.)/g).length ? function (str, r) {
        return str.split(r);
    } : function (str, r) {
        // Based on Steven Levithan's MIT-licensed split, available at
        // http://blog.stevenlevithan.com/archives/cross-browser-split
        var output = [];
        var lastIndex = r.lastIndex = 0;
        var match;

        while (match = r.exec(str)) {
            output.push(str.slice(lastIndex, match.index));
            output.push.apply(output, match.slice(1));
            lastIndex = match.index + match[0].length;
        }

        output.push(str.slice(lastIndex));
        return output;
    },

    /**
     * Given two score objects for two different widgets, combine them so that
     * if one is wrong, the total score is wrong, etc.
     */
    combineScores: function combineScores(scoreA, scoreB) {
        var message;

        if (scoreA.type === "points" && scoreB.type === "points") {
            if (scoreA.message && scoreB.message && scoreA.message !== scoreB.message) {
                // TODO(alpert): Figure out how to combine messages usefully
                message = null;
            } else {
                message = scoreA.message || scoreB.message;
            }

            return {
                type: "points",
                earned: scoreA.earned + scoreB.earned,
                total: scoreA.total + scoreB.total,
                message: message
            };
        } else if (scoreA.type === "points" && scoreB.type === "invalid") {
            return scoreB;
        } else if (scoreA.type === "invalid" && scoreB.type === "points") {
            return scoreA;
        } else if (scoreA.type === "invalid" && scoreB.type === "invalid") {
            if (scoreA.message && scoreB.message && scoreA.message !== scoreB.message) {
                // TODO(alpert): Figure out how to combine messages usefully
                message = null;
            } else {
                message = scoreA.message || scoreB.message;
            }

            return {
                type: "invalid",
                message: message
            };
        }
    },

    /**
     * Return the first valid interpretation of 'text' as a number, in the form
     * {value: 2.3, exact: true}.
     */
    firstNumericalParse: function firstNumericalParse(text) {
        // TODO(alpert): This is sort of hacky...
        var first;
        var val = Khan.answerTypes.predicate.createValidatorFunctional(function (ans) {
            first = ans;
            return true; /* break */
        }, {
            simplify: "optional",
            inexact: true,
            forms: "integer, proper, improper, pi, log, mixed, decimal"
        });

        val(text);
        return first;
    },

    stringArrayOfSize: function stringArrayOfSize(size) {
        return _(size).times(function () {
            return "";
        });
    },

    /**
     * For a graph's x or y dimension, given the tick step,
     * the ranges extent (e.g. [-10, 10]), the pixel dimension constraint,
     * and the grid step, return a bunch of configurations for that dimension.
     *
     * Example:
     *      gridDimensionConfig(10, [-50, 50], 400, 5)
     *
     * Returns: {
     *      scale: 4,
     *      snap: 2.5,
     *      tickStep: 2,
     *      unityLabel: true
     * };
     */
    gridDimensionConfig: function gridDimensionConfig(absTickStep, extent, dimensionConstraint, gridStep) {
        var scale = Util.scaleFromExtent(extent, dimensionConstraint);
        var stepPx = absTickStep * scale;
        var unityLabel = stepPx > 30;
        return {
            scale: scale,
            tickStep: absTickStep / gridStep,
            unityLabel: unityLabel
        };
    },

    /**
     * Given the range, step, and boxSize, calculate the reasonable gridStep.
     * Used for when one was not given explicitly.
     *
     * Example:
     *      getGridStep([[-10, 10], [-10, 10]], [1, 1], 340)
     *
     * Returns: [1, 1]
     */
    getGridStep: function getGridStep(range, step, boxSize) {
        return _(2).times(function (i) {
            var scale = Util.scaleFromExtent(range[i], boxSize);
            var gridStep = Util.gridStepFromTickStep(step[i], scale);
            return gridStep;
        });
    },

    snapStepFromGridStep: function snapStepFromGridStep(gridStep) {
        return _.map(gridStep, function (step) {
            return step / 2;
        });
    },

    /**
     * Given the range and a dimension, come up with the appropriate
     * scale.
     * Example:
     *      scaleFromExtent([-25, 25], 500) // returns 10
     */
    scaleFromExtent: function scaleFromExtent(extent, dimensionConstraint) {
        var span = extent[1] - extent[0];
        var scale = dimensionConstraint / span;
        return scale;
    },

    /**
     * Return a reasonable tick step given extent and dimension.
     * (extent is [begin, end] of the domain.)
     * Example:
     *      tickStepFromExtent([-10, 10], 300) // returns 2
     */
    tickStepFromExtent: function tickStepFromExtent(extent, dimensionConstraint) {
        var span = extent[1] - extent[0];

        var tickFactor;
        // If single number digits
        if (15 < span && span <= 20) {
            tickFactor = 23;

            // triple digit or decimal
        } else if (span > 100 || span < 5) {
            tickFactor = 10;

            // double digit
        } else {
            tickFactor = 16;
        }
        var constraintFactor = dimensionConstraint / 500;
        var desiredNumTicks = tickFactor * constraintFactor;
        return Util.tickStepFromNumTicks(span, desiredNumTicks);
    },

    /**
     * Given the tickStep and the graph's scale, find a
     * grid step.
     * Example:
     *      gridStepFromTickStep(200, 0.2) // returns 100
     */
    gridStepFromTickStep: function gridStepFromTickStep(tickStep, scale) {
        var tickWidth = tickStep * scale;
        var x = tickStep;
        var y = Math.pow(10, Math.floor(Math.log(x) / Math.LN10));
        var leadingDigit = Math.floor(x / y);
        if (tickWidth < 25) {
            return tickStep;
        }
        if (tickWidth < 50) {
            if (leadingDigit === 5) {
                return tickStep;
            } else {
                return tickStep / 2;
            }
        }
        if (leadingDigit === 1) {
            return tickStep / 2;
        }
        if (leadingDigit === 2) {
            return tickStep / 4;
        }
        if (leadingDigit === 5) {
            return tickStep / 5;
        }
    },

    /**
     * Find a good tick step for the desired number of ticks in the range
     * Modified from d3.scale.linear: d3_scale_linearTickRange.
     * Thanks, mbostock!
     * Example:
     *      tickStepFromNumTicks(50, 6) // returns 10
     */
    tickStepFromNumTicks: function tickStepFromNumTicks(span, numTicks) {
        var step = Math.pow(10, Math.floor(Math.log(span / numTicks) / Math.LN10));
        var err = numTicks / span * step;

        // Filter ticks to get closer to the desired count.
        if (err <= 0.15) {
            step *= 10;
        } else if (err <= 0.35) {
            step *= 5;
        } else if (err <= 0.75) {
            step *= 2;
        }

        // Round start and stop values to step interval.
        return step;
    },

    /**
     * Transparently update deprecated props so that the code to deal
     * with them only lives in one place: (Widget).deprecatedProps
     *
     * For example, if a boolean `foo` was deprecated in favor of a
     * number 'bar':
     *      deprecatedProps: {
     *          foo: function(props) {
     *              return {bar: props.foo ? 1 : 0};
     *          }
     *      }
     */
    DeprecationMixin: {
        // This lifecycle stage is only called before first render
        componentWillMount: function componentWillMount() {
            var newProps = {};

            _.each(this.deprecatedProps, function (func, prop) {
                if (_.has(this.props, prop)) {
                    _.extend(newProps, func(this.props));
                }
            }, this);

            if (!_.isEmpty(newProps)) {
                // Set new props directly so that widget renders correctly
                // when it first mounts, even though these will be overwritten
                // almost immediately afterwards...
                _.extend(this.props, newProps);

                // ...when we propagate the new props upwards and they come
                // back down again.
                setTimeout(this.props.onChange, 0, newProps);
            }
        }
    },

    /**
     * Approximate equality on numbers and primitives.
     */
    eq: function eq(x, y) {
        if (_.isNumber(x) && _.isNumber(y)) {
            return Math.abs(x - y) < 1e-9;
        } else {
            return x === y;
        }
    },

    /**
     * Deep approximate equality on primitives, numbers, arrays, and objects.
     */
    deepEq: function deepEq(x, y) {
        if (_.isArray(x) && _.isArray(y)) {
            if (x.length !== y.length) {
                return false;
            }
            for (var i = 0; i < x.length; i++) {
                if (!Util.deepEq(x[i], y[i])) {
                    return false;
                }
            }
            return true;
        } else if (_.isArray(x) || _.isArray(y)) {
            return false;
        } else if (_.isObject(x) && _.isObject(y)) {
            return x === y || _.all(x, function (v, k) {
                return Util.deepEq(y[k], v);
            }) && _.all(y, function (v, k) {
                return Util.deepEq(x[k], v);
            });
        } else if (_.isObject(x) || _.isObject(y)) {
            return false;
        } else {
            return Util.eq(x, y);
        }
    },

    /**
     * Query String Parser
     *
     * Original from:
     * http://stackoverflow.com/questions/901115/get-querystring-values-in-javascript/2880929#2880929
     */
    parseQueryString: function parseQueryString(query) {
        query = query || window.location.search.substring(1);
        var urlParams = {},
            e,
            a = /\+/g,
            // Regex for replacing addition symbol with a space
        r = /([^&=]+)=?([^&]*)/g,
            d = function d(s) {
            return decodeURIComponent(s.replace(a, " "));
        };

        while (e = r.exec(query)) {
            urlParams[d(e[1])] = d(e[2]);
        }

        return urlParams;
    },

    /**
     * Query string adder
     * Works for URLs without #.
     * Original from:
     * http://stackoverflow.com/questions/5999118/add-or-update-query-string-parameter
     */
    updateQueryString: function updateQueryString(uri, key, value) {
        value = encodeURIComponent(value);
        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
        } else {
            return uri + separator + key + "=" + value;
        }
    },

    /**
     * A more strict encodeURIComponent that escapes `()'!`s
     * Especially useful for creating URLs that are embeddable in markdown
     *
     * Adapted from
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
     * This function and the above original available under the
     * CC-BY-SA 2.5 license.
     */
    strongEncodeURIComponent: function strongEncodeURIComponent(str) {
        return encodeURIComponent(str)
        // Note that although RFC3986 reserves "!", RFC5987 does not,
        // so we do not need to escape it
        .replace(/['()!]/g, window.escape) // i.e., %27 %28 %29
        .replace(/\*/g, '%2A');
    },

    // There are certain widgets where we don't want to provide the "answered"
    // highlight indicator.
    // The issue with just using the `graded` flag on questions is that showing
    // that a certain widget is ungraded can sometimes reveal the answer to a
    // question ("is this transformation possible? if so, do it")
    // This is kind of a hack to get around this.
    widgetShouldHighlight: function widgetShouldHighlight(widget) {
        if (!widget) {
            return false;
        }
        var HIGHLIGHT_BAR_BLACKLIST = ["measurer", "protractor"];
        return !_.contains(HIGHLIGHT_BAR_BLACKLIST, widget.type);
    },

    /**
     * If a widget says that it is empty once it is graded.
     * Trying to encapsulate references to the score format.
     */
    scoreIsEmpty: function scoreIsEmpty(score) {
        return score.type === "invalid";
    },

    /**
     * Extracts the location of a touch or mouse event, allowing you to pass
     * in a "mouseup", "mousedown", or "mousemove" event and receive the
     * correct coordinates. Shouldn't be used with "vmouse" events.
     *
     * The Util.touchHandlers are used to track the current state of the touch
     * event, such as whether or not the user is currently pressed down (either
     * through touch or mouse) on the screen.
     */

    touchHandlers: {
        pointerDown: false,
        currentTouchIdentifier: null
    },

    resetTouchHandlers: function resetTouchHandlers() {
        _.extend(Util.touchHandlers, {
            pointerDown: false,
            currentTouchIdentifier: null
        });
    },

    extractPointerLocation: function extractPointerLocation(event) {
        var touchOrEvent;

        if (Util.touchHandlers.pointerDown) {
            // Look for the touch matching the one we're tracking; ignore others
            if (Util.touchHandlers.currentTouchIdentifier != null) {
                var len = event.changedTouches ? event.changedTouches.length : 0;
                for (var i = 0; i < len; i++) {
                    if (event.changedTouches[i].identifier === Util.touchHandlers.currentTouchIdentifier) {
                        touchOrEvent = event.changedTouches[i];
                    }
                }
            } else {
                touchOrEvent = event;
            }

            var isEndish = event.type === "touchend" || event.type === "touchcancel";
            if (touchOrEvent && isEndish) {
                Util.touchHandlers.pointerDown = false;
                Util.touchHandlers.currentTouchIdentifier = null;
            }
        } else {
            // touchstart or mousedown
            Util.touchHandlers.pointerDown = true;
            if (event.touches) {
                touchOrEvent = event.touches[0];
                Util.touchHandlers.currentTouchIdentifier = touchOrEvent.identifier;
            } else {
                touchOrEvent = event;
            }
        }

        if (touchOrEvent) {
            return {
                left: touchOrEvent.pageX,
                top: touchOrEvent.pageY
            };
        }
    },

    /**
     * Pass this function as the touchstart for an element to
     * avoid sending the touch to the mobile scratchpad
     */
    captureScratchpadTouchStart: function captureScratchpadTouchStart(e) {
        e.stopPropagation();
    }
};

Util.random = Util.seededRNG(new Date().getTime() & 0xffffffff);

module.exports = Util;

},{}],304:[function(require,module,exports){
module.exports={
    "apiVersion": {
        "major": 1,
        "minor": 0
    },
    "itemDataVersion": {
        "major": 0,
        "minor": 1
    }
}

},{}],305:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var classNames = require("classnames");

var WidgetContainer = React.createClass({
    displayName: "WidgetContainer",

    propTypes: {
        shouldHighlight: React.PropTypes.bool,
        type: React.PropTypes.func,
        initialProps: React.PropTypes.object.isRequired
    },

    render: function render() {
        var className = classNames({
            "perseus-widget-container": true,
            "widget-highlight": this.props.shouldHighlight,
            "widget-nohighlight": !this.props.shouldHighlight
        });

        var WidgetType = this.props.type;
        if (WidgetType == null) {
            // Just give up on invalid widget types
            return React.createElement("div", { className: className });
        }

        return React.createElement(
            "div",
            { className: className,
                style: WidgetType.displayMode ? {
                    display: WidgetType.displayMode
                } : {} },
            React.createElement(WidgetType, _extends({}, this.props.initialProps, { ref: "widget" }))
        );
    },

    getWidget: function getWidget() {
        return this.refs.widget;
    }
});

module.exports = WidgetContainer;

},{"classnames":12,"react":246}],306:[function(require,module,exports){
"use strict";

var widgets = {};
var editors = {};

var Widgets = {
    // Widgets must be registered to avoid circular dependencies with the
    // core Editor and Renderer components.
    register: function register(name, widget, editor) {
        widgets[name] = widget;
        editors[name] = editor;
    },

    getWidget: function getWidget(name, enabledFeatures) {
        // TODO(alex): Consider referring to these as renderers to avoid
        // overloading "widget"
        if (!_.has(widgets, name)) {
            return null;
        }

        // Allow widgets to specify a widget directly or via a function
        if (widgets[name].getWidget) {
            return widgets[name].getWidget(enabledFeatures);
        } else {
            return widgets[name].widget;
        }
    },

    getEditor: function getEditor(name) {
        return _.has(editors, name) ? editors[name] : null;
    },

    getTransform: function getTransform(name) {
        return _.has(widgets, name) ? widgets[name].transform || _.identity : null;
    },

    getVersion: function getVersion(name) {
        return widgets[name].version || { major: 0, minor: 0 };
    },

    getVersionVector: function getVersionVector() {
        var version = {};
        _.each(_.keys(widgets), function (name) {
            version[name] = Widgets.getVersion(name);
        });
        return version;
    },

    getPublicWidgets: function getPublicWidgets() {
        // TODO(alex): Update underscore.js so that _.pick can take a function.
        return _.pick(widgets, _.reject(_.keys(widgets), function (name) {
            return widgets[name].hidden;
        }));
    },

    upgradeWidgetInfoToLatestVersion: function upgradeWidgetInfoToLatestVersion(oldWidgetInfo) {
        var type = oldWidgetInfo.type;
        if (!_.isString(type)) {
            throw new Error("widget type must be a string, but was: " + type);
        }
        var widgetExports = widgets[type];

        if (widgetExports == null) {
            // If we have a widget that isn't registered, we can't upgrade it
            // TODO(jack): Figure out what the best thing to do here would be
            return oldWidgetInfo;
        }

        // Unversioned widgets (pre-July 2014) are all implicitly 0.0
        var initialVersion = oldWidgetInfo.version || { major: 0, minor: 0 };
        var latestVersion = widgetExports.version || { major: 0, minor: 0 };

        // We do a clone here so that it's safe to mutate the input parameter
        // in propUpgrades functions (which I will probably accidentally do at
        // some point, and we would like to not break when that happens).
        var newEditorProps = _.clone(oldWidgetInfo.options) || {};

        var upgradePropsMap = widgetExports.propUpgrades || {};

        // Empty props usually mean a newly created widget by the editor,
        // and are always considerered up-to-date.
        // Mostly, we'd rather not run upgrade functions on props that are
        // not complete.
        if (_.keys(newEditorProps).length !== 0) {

            // We loop through all the versions after the current version of
            // the loaded widget, up to and including the latest version of the
            // loaded widget, and run the upgrade function to bring our loaded
            // widget's props up to that version.
            // There is a little subtlety here in that we call
            // upgradePropsMap[1] to upgrade *to* version 1,
            // (not from version 1).
            for (var nextVersion = initialVersion.major + 1; nextVersion <= latestVersion.major; nextVersion++) {

                if (upgradePropsMap[nextVersion]) {
                    newEditorProps = upgradePropsMap[nextVersion](newEditorProps);
                } else if (typeof console !== 'undefined' && console.warn) {
                    // This is a warning because it is unlikely to be hit in
                    // local testing, and a warning is slightly less scary in
                    // prod than a `throw new Error`
                    console.warn("No upgrade found for widget `" + type + "` from " + "major version `" + (nextVersion - 1) + "` to " + "major version `" + nextVersion + "` found. This " + "is necessary to render this `" + type + "` correctly.");
                    // But try to keep going anyways (yolo!)
                    // (Throwing an error here would just break the page
                    // silently anyways, so that doesn't seem much better
                    // than a halfhearted attempt to continue, however
                    // shallow...)
                }
            }
        }

        return _.extend({}, oldWidgetInfo, { // maintain other info, like type
            version: latestVersion,
            // Default graded to true (so null/undefined becomes true):
            graded: oldWidgetInfo.graded != null ? oldWidgetInfo.graded : true,
            options: newEditorProps
        });
    },

    getRendererPropsForWidgetInfo: function getRendererPropsForWidgetInfo(widgetInfo) {
        var type = widgetInfo.type;
        var widgetExports = widgets[type];
        var transform = widgetExports.transform || _.identity;
        // widgetInfo.options are the widgetEditor's props:
        return transform(widgetInfo.options);
    }
};

module.exports = Widgets;

},{}],307:[function(require,module,exports){
"use strict";

var React = require("react");

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var Renderer = require("../renderer.jsx");
var TextListEditor = require("../components/text-list-editor.jsx");

var captureScratchpadTouchStart = require("../util.js").captureScratchpadTouchStart;

var Categorizer = React.createClass({
    displayName: "Categorizer",

    mixins: [JsonifyProps, Changeable],

    propTypes: {
        // List of items that are being categorized (along the left side)
        items: React.PropTypes.arrayOf(React.PropTypes.string),
        // List of categories (across the top)
        categories: React.PropTypes.arrayOf(React.PropTypes.string),
        // Ordered list of correct answers, mapping items to categories thusly:
        //   values[<items_index>] == <categories_index>
        values: React.PropTypes.arrayOf(React.PropTypes.number)
    },

    getDefaultProps: function getDefaultProps() {
        return {
            items: [],
            categories: [],
            values: []
        };
    },
    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        this.props.onChange(answerData);
    },
    getInitialState: function getInitialState() {
        return {
            uniqueId: _.uniqueId("perseus_radio_")
        };
    },

    render: function render() {
        var _this = this;

        var self = this;

        return React.createElement(
            "div",
            { className: "categorizer-container clearfix" },
            React.createElement(
                "table",
                null,
                React.createElement(
                    "thead",
                    null,
                    React.createElement(
                        "tr",
                        null,
                        React.createElement(
                            "th",
                            null,
                            "\xA0"
                        ),
                        _.map(this.props.categories, function (category) {
                            return React.createElement(
                                "th",
                                { className: "category" },
                                React.createElement(Renderer, { content: category })
                            );
                        })
                    )
                ),
                React.createElement(
                    "tbody",
                    null,
                    _.map(this.props.items, function (item, itemNum) {
                        var uniqueId = self.state.uniqueId + "_" + itemNum;
                        return React.createElement(
                            "tr",
                            null,
                            React.createElement(
                                "td",
                                null,
                                React.createElement(Renderer, { content: item })
                            ),
                            _.range(self.props.categories.length).map(function (catNum) {
                                return React.createElement(
                                    "td",
                                    { className: "category" },
                                    React.createElement(
                                        "label",
                                        { onTouchStart: captureScratchpadTouchStart },
                                        React.createElement("input", {
                                            type: "radio",
                                            name: uniqueId,
                                            checked: self.props.values[itemNum] === catNum,
                                            onChange: _this.onChange.bind(_this, itemNum, catNum)
                                        }),
                                        React.createElement("span", null)
                                    )
                                );
                            })
                        );
                    })
                )
            )
        );
    },

    onChange: function onChange(itemNum, catNum) {
        var values = _.clone(this.props.values);
        values[itemNum] = catNum;
        this.change("values", values);
    },

    simpleValidate: function simpleValidate(rubric) {
        return Categorizer.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Categorizer, {
    validate: function validate(state, rubric) {
        var completed = true;
        var allCorrect = true;
        _.each(rubric.values, function (value, i) {
            if (state.values[i] == null) {
                completed = false;
            }
            if (state.values[i] !== value) {
                allCorrect = false;
            }
        });
        if (!completed) {
            return {
                type: "invalid",
                message: "Make sure you select something for every row."
            };
        }
        return {
            type: "points",
            earned: allCorrect ? 1 : 0,
            total: 1,
            message: null
        };
    }
});

var CategorizerEditor = React.createClass({
    displayName: "CategorizerEditor",

    mixins: [JsonifyProps, Changeable],

    propTypes: {
        items: React.PropTypes.arrayOf(React.PropTypes.string),
        categories: React.PropTypes.arrayOf(React.PropTypes.string),
        values: React.PropTypes.arrayOf(React.PropTypes.number)
    },

    getDefaultProps: function getDefaultProps() {
        return {
            items: [],
            categories: [],
            values: []
        };
    },

    render: function render() {
        var _this2 = this;

        return React.createElement(
            "div",
            null,
            "\u985E\u5225:",
            React.createElement(TextListEditor, {
                options: this.props.categories,
                onChange: function onChange(cat) {
                    _this2.change("categories", cat);
                },
                layout: "horizontal" }),
            "\u9805\u76EE:",
            React.createElement(TextListEditor, {
                options: this.props.items,
                onChange: function onChange(items) {
                    _this2.change({
                        items: items,
                        // TODO(eater): This truncates props.values so there
                        // are never more correct answers than items, ensuring
                        // the widget is possible to answer correctly.
                        // It doesn't necessarly keep each answer with
                        // its corresponding item if an item is deleted from
                        // the middle. Inconvenient, but it's at least possible
                        // for content creators to catch and fix.
                        values: _.first(_this2.props.values, items.length)
                    });
                },
                layout: "vertical" }),
            React.createElement(Categorizer, {
                items: this.props.items,
                categories: this.props.categories,
                values: this.props.values,
                onChange: function onChange(newProps) {
                    _this2.props.onChange(newProps);
                }
            })
        );
    }
});

module.exports = {
    name: "categorizer",
    displayName: "Categorizer/分類器",
    widget: Categorizer,
    editor: CategorizerEditor,
    transform: function transform(editorProps) {
        return _.pick(editorProps, "items", "categories");
    },
    hidden: false
};

},{"../components/text-list-editor.jsx":267,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../renderer.jsx":298,"../util.js":303,"react":246}],308:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");
var classNames = require("classnames");

var InfoTip = require("react-components/js/info-tip.jsx");
var FancySelect = require("../components/fancy-select.jsx");
var FancyOption = FancySelect.Option;

var JsonifyProps = require("../mixins/jsonify-props.jsx");
var ApiOptions = require("../perseus-api.jsx").Options;

var captureScratchpadTouchStart = require("../util.js").captureScratchpadTouchStart;

var Dropdown = React.createClass({
    displayName: "Dropdown",

    propTypes: {
        choices: React.PropTypes.arrayOf(React.PropTypes.string),
        selected: React.PropTypes.number,
        placeholder: React.PropTypes.string,
        apiOptions: ApiOptions.propTypes
    },

    getDefaultProps: function getDefaultProps() {
        return {
            choices: [],
            selected: 0,
            placeholder: "",
            apiOptions: ApiOptions.defaults
        };
    },
    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        this.props.onChange({ selected: answerData.value });
    },
    render: function render() {
        var choices = this.props.choices.slice();

        if (this.props.apiOptions.fancyDropdowns) {
            return React.createElement(
                FancySelect,
                {
                    onChange: this._handleChange,
                    className: "perseus-widget-dropdown",
                    value: this.props.selected },
                React.createElement(
                    FancyOption,
                    { value: 0, visible: false },
                    React.createElement(
                        "span",
                        { className: "placeholder" },
                        this.props.placeholder
                    )
                ),
                choices.map(function (choice, i) {
                    // Always visible so we can animate them with css
                    return React.createElement(
                        FancyOption,
                        { value: i + 1, visible: true },
                        choice
                    );
                })
            );
        } else {
            var style = {
                fontSize: "120%"
            };
            return React.createElement(
                "select",
                {
                    onChange: this._handleChangeEvent,
                    onTouchStart: captureScratchpadTouchStart,
                    className: "perseus-widget-dropdown",
                    value: this.props.selected,
                    style: style },
                React.createElement(
                    "option",
                    { value: 0, disabled: true },
                    this.props.placeholder
                ),
                choices.map(function (choice, i) {
                    return React.createElement(
                        "option",
                        {
                            key: "" + (i + 1),
                            value: i + 1 },
                        choice
                    );
                })
            );
        }
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this).focus();
        return true;
    },

    _handleChangeEvent: function _handleChangeEvent(e) {
        this._handleChange(parseInt(e.target.value));
    },

    _handleChange: function _handleChange(selected) {
        this.props.onChange({ selected: selected });
    },

    toJSON: function toJSON(skipValidation) {
        return { value: this.props.selected };
    },

    simpleValidate: function simpleValidate(rubric) {
        return Dropdown.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "inline-block"
    }
});

_.extend(Dropdown, {
    validate: function validate(state, rubric) {
        var selected = state.value;
        if (selected === 0) {
            return {
                type: "invalid",
                message: null
            };
        } else {
            var correct = rubric.choices[selected - 1].correct;
            return {
                type: "points",
                earned: correct ? 1 : 0,
                total: 1,
                message: null
            };
        }
    }
});

var DropdownEditor = React.createClass({
    displayName: "DropdownEditor",

    mixins: [JsonifyProps],

    propTypes: {
        choices: React.PropTypes.arrayOf(React.PropTypes.shape({
            content: React.PropTypes.string,
            correct: React.PropTypes.bool
        })),
        placeholder: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "",
            choices: [{
                content: "",
                correct: false
            }]
        };
    },

    render: function render() {
        var dropdownGroupName = _.uniqueId("perseus_dropdown_");
        return React.createElement(
            "div",
            { className: "perseus-widget-dropdown" },
            React.createElement(
                "div",
                null,
                "\u4E0B\u62C9\u5F0F\u9078\u55AE",
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u77ED\u6558\u8FF0\u7684\u55AE\u9078\u984C\u3002\u4F8B\u5982\uFF1A ",
                        "<",
                        ", ",
                        ">",
                        ", \u2264, \u2265 "
                    )
                )
            ),
            React.createElement("input", {
                type: "text",
                placeholder: "\u9810\u8A2D\u503C",
                value: this.props.placeholder,
                onChange: this.onPlaceholderChange }),
            React.createElement(
                InfoTip,
                null,
                React.createElement(
                    "p",
                    null,
                    "\u9019\u6703\u986F\u793A\u70BA\u4E0B\u62C9\u5F0F\u9078\u55AE\u7684\u9810\u8A2D\u503C\uFF0C\u53EF\u4EE5\u7D66\u4F7F\u7528\u8005\u4E00\u4E9B\u4E0B\u62C9\u5F0F\u9078\u55AE\u53EF\u80FD\u7B54\u6848\u7684\u6307\u793A\u3002\u4F8B\u5982\uFF1A\u662F/\u4E0D\u662F/\u53EF\u80FD\u662F\u3002"
                )
            ),
            React.createElement(
                "ul",
                null,
                this.props.choices.map(function (choice, i) {
                    return React.createElement(
                        "li",
                        { key: "" + i },
                        React.createElement(
                            "div",
                            null,
                            React.createElement("input", {
                                ref: "radio" + i,
                                type: "radio",
                                name: dropdownGroupName,
                                checked: choice.correct ? "checked" : "",
                                onChange: this.onCorrectChange.bind(this, i),
                                value: i }),
                            React.createElement("input", {
                                type: "text",
                                ref: "editor" + i,
                                onChange: this.onContentChange.bind(this, i),
                                value: choice.content }),
                            React.createElement(
                                "a",
                                { href: "#", className: "simple-button orange",
                                    onClick: this.removeChoice.bind(this, i) },
                                React.createElement("span", { className: "icon-trash remove-choice" })
                            )
                        )
                    );
                }, this)
            ),
            React.createElement(
                "div",
                { className: "add-choice-container" },
                React.createElement(
                    "a",
                    { href: "#", className: "simple-button orange",
                        onClick: this.addChoice },
                    React.createElement("span", { className: "icon-plus" }),
                    ' ',
                    "\u589E\u52A0\u9078\u9805",
                    ' '
                )
            )
        );
    },

    onPlaceholderChange: function onPlaceholderChange(e) {
        var placeholder = e.target.value;
        this.props.onChange({ placeholder: placeholder });
    },

    onCorrectChange: function onCorrectChange(choiceIndex) {
        var choices = _.map(this.props.choices, function (choice, i) {
            return _.extend({}, choice, {
                correct: i === choiceIndex
            });
        });
        this.props.onChange({ choices: choices });
    },

    onContentChange: function onContentChange(choiceIndex, e) {
        var choices = this.props.choices.slice();
        var choice = _.clone(choices[choiceIndex]);
        choice.content = e.target.value;
        choices[choiceIndex] = choice;
        this.props.onChange({ choices: choices });
    },

    addChoice: function addChoice(e) {
        e.preventDefault();

        var choices = this.props.choices;
        var blankChoice = { content: "", correct: false };
        this.props.onChange({
            choices: choices.concat([blankChoice])
        }, this.focus.bind(this, choices.length));
    },

    removeChoice: function removeChoice(choiceIndex, e) {
        e.preventDefault();
        var choices = _(this.props.choices).clone();
        choices.splice(choiceIndex, 1);
        this.props.onChange({
            choices: choices
        });
    },

    focus: function focus(i) {
        ReactDOM.findDOMNode(this.refs["editor" + i]).focus();
        return true;
    }
});

var propTransform = function propTransform(editorProps) {
    return {
        placeholder: editorProps.placeholder,
        choices: _.map(editorProps.choices, function (choice) {
            return choice.content;
        })
    };
};

module.exports = {
    name: "dropdown",
    displayName: "Drop down/下拉式選單",
    widget: Dropdown,
    editor: DropdownEditor,
    transform: propTransform,
    hidden: false
};

},{"../components/fancy-select.jsx":252,"../mixins/jsonify-props.jsx":292,"../perseus-api.jsx":294,"../util.js":303,"classnames":12,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95}],309:[function(require,module,exports){
"use strict";

/**
 * This is an example graphie-using widget
 *
 * TODO(jack): Add more comments
 */

var React = require('react');
var Util = require("../util.js");
var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var Graphie = require("../components/graphie.jsx");
var MovablePoint = Graphie.MovablePoint;

var knumber = KhanUtil.knumber;
var kpoint = KhanUtil.kpoint;

/**
 * This is the widget's renderer. It shows up in the right column
 * in test.html, and is what is visible to users, and where
 * users enter their answers.
 */
var ExampleGraphieWidget = React.createClass({
    displayName: "ExampleGraphieWidget",

    mixins: [Changeable, JsonifyProps],

    propTypes: {
        graph: React.PropTypes.object.isRequired,
        coord: React.PropTypes.arrayOf(React.PropTypes.number)
    },

    getDefaultProps: function getDefaultProps() {
        return {
            // We want to allow our coord to be null to test if the
            // user has interacted with this widget yet when grading it
            coord: null,
            graph: {
                box: [400, 400],
                labels: ["x", "y"],
                range: [[-10, 10], [-10, 10]],
                step: [1, 1],
                gridStep: [1, 1],
                valid: true,
                backgroundImage: null,
                markings: "grid",
                showProtractor: false
            }
        };
    },

    render: function render() {
        return React.createElement(
            Graphie,
            {
                ref: "graphie",
                box: this.props.graph.box,
                range: this.props.graph.range,
                options: this.props.graph,
                setup: this.setupGraphie },
            React.createElement(MovablePoint, {
                pointSize: 5,
                coord: this.props.coord || [0, 0],
                constraints: [MovablePoint.constraints.snap(), MovablePoint.constraints.bound()],
                onMove: this.movePoint })
        );
    },

    movePoint: function movePoint(newCoord) {
        this.change({
            coord: newCoord
        });
    },

    _getGridConfig: function _getGridConfig(options) {
        return _.map(options.step, function (step, i) {
            return Util.gridDimensionConfig(step, options.range[i], options.box[i], options.gridStep[i]);
        });
    },

    setupGraphie: function setupGraphie(graphie, options) {
        var gridConfig = this._getGridConfig(options);
        graphie.graphInit({
            range: options.range,
            scale: _.pluck(gridConfig, "scale"),
            axisArrows: "<->",
            labelFormat: function labelFormat(s) {
                return "\\small{" + s + "}";
            },
            gridStep: options.gridStep,
            tickStep: _.pluck(gridConfig, "tickStep"),
            labelStep: 1,
            unityLabels: _.pluck(gridConfig, "unityLabel")
        });
        graphie.label([0, options.range[1][1]], options.labels[1], "above");
    },

    simpleValidate: function simpleValidate(rubric) {
        return ExampleGraphieWidget.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

/**
 * This is the widget's grading function
 */
_.extend(ExampleGraphieWidget, {
    validate: function validate(state, rubric) {
        if (state.coord == null) {
            return {
                type: "invalid",
                message: null
            };
        } else if (kpoint.equal(state.coord, rubric.correct)) {
            return {
                type: "points",
                earned: 1,
                total: 1,
                message: null
            };
        } else {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }
    }
});

/**
 * This is the widget's editor. This is what shows up on the left side
 * of the screen in test.html. Only the question writer sees this.
 */
var ExampleGraphieWidgetEditor = React.createClass({
    displayName: "ExampleGraphieWidgetEditor",

    mixins: [Changeable, JsonifyProps],

    getDefaultProps: function getDefaultProps() {
        return {
            correct: [4, 4],
            graph: {
                box: [340, 340],
                labels: ["x", "y"],
                range: [[-10, 10], [-10, 10]],
                step: [1, 1],
                gridStep: [1, 1],
                valid: true,
                backgroundImage: null,
                markings: "grid",
                showProtractor: false
            }
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(ExampleGraphieWidget, {
                graph: this.props.graph,
                coord: this.props.correct,
                onChange: this.handleChange })
        );
    },

    handleChange: function handleChange(newProps) {
        if (newProps.coord) {
            this.change({
                correct: newProps.coord
            });
        }
    }
});

/**
 * For this widget to work, we must export it.
 * We also must require() this file in src/all-widgets.js
 */
module.exports = {
    name: "example-graphie-widget",
    displayName: "Example Graphie Widget",
    hidden: true, // Hides this widget from the Perseus.Editor widget select
    widget: ExampleGraphieWidget,
    editor: ExampleGraphieWidgetEditor
};

},{"../components/graphie.jsx":257,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../util.js":303,"react":246}],310:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable no-var, react/forbid-prop-types, react/jsx-closing-bracket-location, react/sort-comp */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

var React = require("react");
var _ = require("underscore");

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var Editor = require("../editor.jsx");
var TextInput = require("../components/text-input.jsx");

var defaultExplanationProps = {
    showPrompt: "顯示說明",
    hidePrompt: "隱藏說明",
    explanation: "",
    widgets: {}
};

var ExplanationEditor = React.createClass({
    displayName: "ExplanationEditor",

    mixins: [Changeable, JsonifyProps],
    propTypes: _extends({}, Changeable.propTypes, {
        showPrompt: React.PropTypes.string,
        hidePrompt: React.PropTypes.string,
        explanation: React.PropTypes.string,
        widgets: React.PropTypes.object,
        apiOptions: React.PropTypes.any
    }),

    getDefaultProps: function getDefaultProps() {
        return defaultExplanationProps;
    },

    getInitialState: function getInitialState() {
        return {};
    },

    render: function render() {
        var _this = this;

        return React.createElement(
            "div",
            { className: "perseus-widget-explanation-editor" },
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "label",
                    null,
                    "\u986F\u793A\u8AAA\u660E\u7684\u63D0\u793A\u6587\u5B57: ",
                    React.createElement(TextInput, {
                        value: this.props.showPrompt,
                        onChange: this.change("showPrompt") })
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "label",
                    null,
                    "\u96B1\u85CF\u8AAA\u660E\u7684\u63D0\u793A\u6587\u5B57: ",
                    React.createElement(TextInput, {
                        value: this.props.hidePrompt,
                        onChange: this.change("hidePrompt") })
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(Editor, {
                    apiOptions: this.props.apiOptions,
                    content: this.props.explanation,
                    widgets: this.props.widgets,
                    widgetEnabled: true,
                    immutableWidgets: false,
                    onChange: function onChange(props) {
                        var newProps = {};
                        if (_.has(props, "content")) {
                            newProps.explanation = props.content;
                        }
                        if (_.has(props, "widgets")) {
                            newProps.widgets = props.widgets;
                        }
                        _this.change(newProps);
                    } })
            )
        );
    }
});

module.exports = ExplanationEditor;

},{"../components/text-input.jsx":266,"../editor.jsx":275,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246,"underscore":248}],311:[function(require,module,exports){
"use strict";

var _explanationLink, _mobileExplanationLin;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable comma-dangle, object-curly-spacing, react/forbid-prop-types, react/sort-comp */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

var _require = require("aphrodite"),
    StyleSheet = _require.StyleSheet,
    css = _require.css;

var React = require("react");
var _ = require("underscore");

var Changeable = require("../mixins/changeable.jsx");
var PerseusApi = require("../perseus-api.jsx");
var Renderer = require("../renderer.jsx");
var mediaQueries = require("../styles/media-queries.js");
var styleConstants = require("../styles/constants.js");

var defaultExplanationProps = {
    showPrompt: "顯示說明",
    hidePrompt: "隱藏說明",
    explanation: "",
    widgets: {}
};

var Explanation = React.createClass({
    displayName: "Explanation",

    mixins: [Changeable],
    propTypes: _extends({}, Changeable.propTypes, {
        apiOptions: PerseusApi.Options.propTypes,
        explanation: React.PropTypes.string,
        hidePrompt: React.PropTypes.string,
        showPrompt: React.PropTypes.string,
        widgets: React.PropTypes.object
    }),

    getDefaultProps: function getDefaultProps() {
        return defaultExplanationProps;
    },

    getInitialState: function getInitialState() {
        return {
            expanded: false
        };
    },

    _onClick: function _onClick() {
        this.setState({
            expanded: !this.state.expanded
        });
    },

    render: function render() {
        var Link = this.props.apiOptions.baseElements.Link;
        var _props$apiOptions = this.props.apiOptions,
            readOnly = _props$apiOptions.readOnly,
            isMobile = _props$apiOptions.isMobile;


        var linkAnchor = this.state.expanded ? this.props.hidePrompt : this.props.showPrompt;

        var linkContainer = void 0;

        var href = readOnly ? null : 'javascript:void(0)';
        var onClick = readOnly ? null : this._onClick;

        if (isMobile) {
            linkContainer = React.createElement(
                "div",
                { className: css(styles.linkContainer) },
                React.createElement(
                    "a",
                    {
                        className: css(styles.mobileExplanationLink),
                        href: href,
                        onClick: onClick
                    },
                    linkAnchor
                ),
                this.state.expanded && React.createElement(
                    "svg",
                    { className: css(styles.disclosureArrow) },
                    React.createElement("polygon", {
                        style: { fill: backgroundColor },
                        points: "0," + arrowHeight + " " + (arrowWidth + "," + arrowHeight + " ") + (arrowWidth / 2 + ",0")
                    })
                )
            );
        } else {
            linkContainer = React.createElement(
                "div",
                { className: css(styles.linkContainer) },
                React.createElement(
                    Link,
                    {
                        className: css(styles.explanationLink),
                        href: href,
                        onClick: onClick
                    },
                    "[" + linkAnchor + "]"
                )
            );
        }

        var expandedStyle = isMobile ? styles.contentExpandedMobile : styles.contentExpanded;

        return React.createElement(
            "div",
            { className: css(styles.container) },
            linkContainer,
            React.createElement(
                "div",
                { className: css(styles.content, isMobile && styles.contentMobile, this.state.expanded && expandedStyle),
                    style: {
                        height: this.state.expanded ? "auto" : 0,
                        overflow: this.state.expanded ? "visible" : "hidden"
                    },
                    ref: "content"
                },
                React.createElement(Renderer, {
                    apiOptions: this.props.apiOptions,
                    content: this.props.explanation,
                    widgets: this.props.widgets
                })
            )
        );
    },

    getUserInput: function getUserInput() {
        return {};
    },

    simpleValidate: function simpleValidate(rubric) {
        return Explanation.validate(this.getUserInput(), rubric);
    },
    statics: {
        displayMode: "inline"
    }
});

var leftBorderSpacing = 23;
var verticalContentPadding = 10;

var arrowWidth = 30;
var arrowHeight = 14;
var backgroundColor = styleConstants.gray95;

var styles = StyleSheet.create({
    container: {
        display: 'inline',
        position: 'relative'
    },

    linkContainer: {
        display: 'inline-block'
    },

    explanationLink: (_explanationLink = {
        fontStyle: 'italic',
        color: '#007d96'

    }, _defineProperty(_explanationLink, mediaQueries.xl, {
        fontSize: 20,
        lineHeight: 1.1
    }), _defineProperty(_explanationLink, mediaQueries.lgOrSmaller, {
        fontSize: 17,
        lineHeight: 1.4
    }), _defineProperty(_explanationLink, mediaQueries.smOrSmaller, {
        fontSize: 14,
        lineHeight: 1.3
    }), _explanationLink),

    mobileExplanationLink: (_mobileExplanationLin = {
        color: styleConstants.kaGreen,
        borderBottom: "dashed 1px " + styleConstants.kaGreen,
        textDecoration: 'none'

    }, _defineProperty(_mobileExplanationLin, mediaQueries.xl, {
        fontSize: 22,
        lineHeight: 1.4
    }), _defineProperty(_mobileExplanationLin, mediaQueries.lgOrSmaller, {
        fontSize: 20,
        lineHeight: 1.5
    }), _defineProperty(_mobileExplanationLin, mediaQueries.smOrSmaller, {
        fontSize: 18,
        lineHeight: 1.2
    }), _mobileExplanationLin),

    content: {
        position: 'relative',
        transition: 'margin-top 0.1s'
    },

    contentExpanded: {
        borderLeft: '5px solid #ccc',
        marginLeft: -leftBorderSpacing,
        paddingLeft: leftBorderSpacing,

        paddingBottom: verticalContentPadding,

        // Note: we still use arrow height as the vertical margin, even on
        // desktop when there is no arrow, but it's good enough.
        marginBottom: arrowHeight,
        marginTop: arrowHeight
    },

    contentExpandedMobile: {
        boxSizing: 'content-box',
        paddingTop: 32,
        paddingBottom: 32,
        marginTop: arrowHeight
    },

    contentMobile: {
        background: backgroundColor,

        // TODO(benkomalo): this is to "full bleed" the background.
        // The actual content padding differs depending on the host
        // container, so this needs to be fixed eventually.
        marginLeft: styleConstants.negativePhoneMargin,
        marginRight: styleConstants.negativePhoneMargin,
        paddingLeft: styleConstants.phoneMargin,
        paddingRight: styleConstants.phoneMargin
    },

    disclosureArrow: {
        // HACK - positioning at "bottom: 0", doesn't actually position it to
        // the real bottom, because the container is `inline-block`, and it
        // seems to position it to the baseline? We put in a generous
        // fudge factor to position it down to be flush with the content box
        // below it.
        bottom: -(arrowHeight + 5),
        height: arrowHeight,
        left: '50%',
        marginLeft: -(arrowWidth / 2),
        position: 'absolute',
        width: arrowWidth
    }
});

_.extend(Explanation, {
    validate: function validate(state, rubric) {
        return {
            type: "points",
            earned: 0,
            total: 0,
            message: null
        };
    }
});

module.exports = {
    name: "explanation",
    displayName: "Explanation/解釋",
    defaultAlignment: "inline",
    widget: Explanation,
    transform: _.identity
};

},{"../mixins/changeable.jsx":291,"../perseus-api.jsx":294,"../renderer.jsx":298,"../styles/constants.js":300,"../styles/media-queries.js":301,"aphrodite":5,"react":246,"underscore":248}],312:[function(require,module,exports){
"use strict";

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require("react");
var ReactDOM = require("react-dom");
var classNames = require("classnames");

var InfoTip = require("react-components/js/info-tip.jsx");
var Tooltip = require("react-components/js/tooltip.jsx");

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");
var ApiOptions = require("../perseus-api.jsx").Options;

var EnabledFeatures = require("../enabled-features.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");

var InputWithExamples = require("../components/input-with-examples.jsx");
var MathInput = require("../components/math-input.jsx");
var TeX = require("../tex.jsx"); // OldExpression only
var TexButtons = require("../components/tex-buttons.jsx");

var EnabledFeatures = require("../enabled-features.jsx");
var Util = require("../util.js");

var ERROR_MESSAGE = $._("Sorry, I don't understand that!");

var BUTTON_SETS_EASY = ["basic"];
var BUTTON_SETS_HARD = ["basic", "relations", "trig", "prealgebra"];

// The new, MathQuill input expression widget
var Expression = React.createClass({
    displayName: "Expression",

    mixins: [Changeable],

    propTypes: {
        value: React.PropTypes.string,
        times: React.PropTypes.bool,
        functions: React.PropTypes.arrayOf(React.PropTypes.string),
        buttonsVisible: React.PropTypes.oneOf(['always', 'never', 'focused']),
        enabledFeatures: EnabledFeatures.propTypes,
        apiOptions: ApiOptions.propTypes,
        buttonSets: TexButtons.buttonSetsType
    },

    getDefaultProps: function getDefaultProps() {
        return {
            value: "",
            times: false,
            functions: [],
            onFocus: function onFocus() {},
            onBlur: function onBlur() {},
            enabledFeatures: EnabledFeatures.defaults,
            apiOptions: ApiOptions.defaults,
            buttonSets: ["basic"]
        };
    },

    getInitialState: function getInitialState() {
        return {
            showErrorTooltip: false,
            showErrorText: false
        };
    },

    parse: function parse(value, props) {
        // TODO(jack): Disable icu for content creators here, or
        // make it so that solution answers with ','s or '.'s work
        var options = _.pick(props || this.props, "functions");
        if (icu && icu.getDecimalFormatSymbols) {
            _.extend(options, icu.getDecimalFormatSymbols());
        }
        return KAS.parse(value, options);
    },

    render: function render() {
        var _this = this;

        if (this.props.apiOptions.staticRender) {
            var style = {
                borderRadius: "5px",
                padding: "4px",
                background: "white",
                border: "1px solid #a4a4a4"
            };
            return React.createElement(
                "span",
                { style: style },
                React.createElement(
                    TeX,
                    { ref: "input", onClick: this._handleFocus },
                    this.props.value
                )
            );
        } else {
            // TODO(alex): Style this tooltip to be more consistent with other
            // tooltips on the site; align to left middle (once possible)
            var errorTooltip = React.createElement(
                "span",
                { className: "error-tooltip" },
                React.createElement(
                    Tooltip,
                    {
                        className: "error-text-container",
                        horizontalPosition: "right",
                        horizontalAlign: "left",
                        verticalPosition: "top",
                        arrowSize: 10,
                        borderColor: "#fcc335",
                        show: this.state.showErrorText },
                    React.createElement("i", {
                        className: "icon-exclamation-sign error-icon",
                        onMouseEnter: function onMouseEnter() {
                            _this.setState({ showErrorText: true });
                        },
                        onMouseLeave: function onMouseLeave() {
                            _this.setState({ showErrorText: false });
                        },
                        onClick: function onClick() {
                            // TODO(alex): Better error feedback for mobile
                            _this.setState({
                                showErrorText: !_this.state.showErrorText
                            });
                        } }),
                    React.createElement(
                        "div",
                        { className: "error-text" },
                        ERROR_MESSAGE
                    )
                )
            );

            var className = classNames({
                "perseus-widget-expression": true,
                "show-error-tooltip": this.state.showErrorTooltip
            });

            var inEditor = window.location.pathname.indexOf("/questionpanel/perseus_editor/") >= 0;

            return React.createElement(
                "span",
                { className: className },
                React.createElement(MathInput, {
                    ref: "input",
                    value: this.props.value,
                    onChange: this.handleChange,
                    convertDotToTimes: this.props.times,
                    buttonsVisible: this.props.buttonsVisible || "focused",
                    buttonSets: this.props.buttonSets,
                    onFocus: this._handleFocus,
                    onBlur: this._handleBlur,
                    inEditor: inEditor }),
                this.state.showErrorTooltip && errorTooltip
            );
        }
    },

    handleChange: function handleChange(newValue) {
        this.props.onChange({ value: Util.asc(newValue) });
    },

    _handleFocus: function _handleFocus() {
        if (this.props.apiOptions.staticRender) {
            this.props.onFocus([], this.refs.input);
        } else {
            this.props.onFocus([], this.refs.input.getInputDOMNode());
        }
    },

    _handleBlur: function _handleBlur() {
        this.props.onBlur([], this.refs.input.getInputDOMNode());
    },

    errorTimeout: null,

    // Whenever the input value changes, attempt to parse it.
    //
    // Clear any errors if this parse succeeds, show an error within a second
    // if it fails.
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        if (!_.isEqual(this.props.value, nextProps.value) || !_.isEqual(this.props.functions, nextProps.functions)) {

            clearTimeout(this.errorTimeout);

            if (this.parse(nextProps.value, nextProps).parsed) {
                this.setState({ showErrorTooltip: false });
            } else {
                // Store timeout ID so that we can clear it above
                this.errorTimeout = setTimeout(function () {
                    var apiResult = _this2.props.apiOptions.onInputError(null, // reserved for some widget identifier
                    _this2.props.value, ERROR_MESSAGE);
                    if (apiResult !== false) {
                        _this2.setState({ showErrorTooltip: true });
                    }
                }, 500);
            }
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        clearTimeout(this.errorTimeout);
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.input).focus();
        return true;
    },

    // HACK(joel)
    insert: function insert(text) {
        this.refs.input.insert(text);
    },

    simpleValidate: function simpleValidate(rubric, onInputError) {
        onInputError = onInputError || function () {};
        return Expression.validate(this.toJSON(), rubric, onInputError);
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        if (answerData === undefined) {
            answerData = { value: "" };
        }
        this.props.onChange(answerData);
    },

    toJSON: function toJSON(skipValidation) {
        return { value: this.props.value };
    },

    statics: {
        displayMode: "inline-block"
    }
});

_.extend(Expression, {
    validate: function validate(state, rubric, onInputError) {
        var options = _.clone(rubric);
        if (icu && icu.getDecimalFormatSymbols) {
            _.extend(options, icu.getDecimalFormatSymbols());
        }
        // We don't give options to KAS.parse here because that is parsing
        // the solution answer, not the student answer, and we don't
        // want a solution to work if the student is using a different
        // language but not in english.
        var val = Khan.answerTypes.expression.createValidatorFunctional(KAS.parse(rubric.value, rubric).expr, options);

        var result = val(state.value);

        // TODO(eater): Seems silly to translate result to this invalid/points
        // thing and immediately translate it back in ItemRenderer.scoreInput()
        if (result.empty) {
            var apiResult = onInputError(null, // reserved for some widget identifier
            state.value, result.message);
            return {
                type: "invalid",
                message: apiResult === false ? null : result.message
            };
        } else {
            return {
                type: "points",
                earned: result.correct ? 1 : 0,
                total: 1,
                message: result.message
            };
        }
    }
});

var ExpressionEditor = React.createClass({
    displayName: "ExpressionEditor",

    mixins: [Changeable, JsonifyProps],

    propTypes: {
        value: React.PropTypes.string,
        form: React.PropTypes.bool,
        simplify: React.PropTypes.bool,
        times: React.PropTypes.bool,
        functions: React.PropTypes.arrayOf(React.PropTypes.string),
        buttonSets: TexButtons.buttonSetsType
    },

    getDefaultProps: function getDefaultProps() {
        return {
            value: "",
            form: true,
            simplify: false,
            times: true,
            functions: ["f", "g", "h"],
            buttonSets: ["basic"]
        };
    },

    getInitialState: function getInitialState() {
        var value = this.props.value;

        return {
            // In Junyi, all expressions are new expression widget, not oldExpression widget.
            // So isTeX default is true.
            isTex: true
        };
    },

    render: function render() {
        var _this3 = this;

        var simplifyWarning = null;
        var shouldTryToParse = this.props.simplify && this.props.value !== "";
        if (shouldTryToParse) {
            var expression = KAS.parse(this.props.value);
            if (expression.parsed && !expression.expr.isSimplified()) {
                simplifyWarning = React.createElement(
                    "p",
                    { className: "warning" },
                    React.createElement(
                        "b",
                        null,
                        "Warning"
                    ),
                    ": You specified that the answer should be simplified but did not provide a simplified answer. Are you sure you want to require simplification?"
                );
            }
        }

        // TODO(alex): Consider adding more warnings (like the above) here

        var expressionProps = {
            ref: "expression",
            value: this.props.value,
            times: this.props.times,
            functions: this.props.functions,
            onChange: function onChange(newProps) {
                return _this3.change(newProps);
            },
            buttonsVisible: "never",
            buttonSets: this.props.buttonSets
        };

        // checkboxes to choose which sets of input buttons are shown
        var buttonSetChoices = _(TexButtons.buttonSets).map(function (set, name) {
            // The first one gets special cased to always be checked, disabled,
            // and float left.
            var isFirst = name === "basic";
            var checked = _.contains(_this3.props.buttonSets, name) || isFirst;
            var className = isFirst ? "button-set-label-float" : "button-set-label";

            var chineseName = "";
            switch (name) {
                case "basic":
                    chineseName = "基本運算";
                    break;
                case "relations":
                    chineseName = "不等式";
                    break;
                case "trig":
                    chineseName = "三角函數";
                    break;
                case "prealgebra":
                    chineseName = "初階代數";
                    break;
                default:
                    chineseName = "其他";
            };

            return React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    { className: className, key: name },
                    React.createElement("input", { type: "checkbox",
                        checked: checked,
                        disabled: isFirst,
                        onChange: function onChange() {
                            return _this3.handleButtonSet(name);
                        } }),
                    chineseName
                )
            );
        });

        // TODO(joel) - move buttons outside of the label so they don't weirdly
        // focus
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u6B63\u78BA\u7B54\u6848:",
                    ' ',
                    React.createElement(Expression, expressionProps)
                )
            ),
            this.state.isTex && React.createElement(TexButtons, {
                className: "math-input-buttons",
                convertDotToTimes: this.props.times,
                onInsert: this.handleTexInsert,
                sets: this.props.buttonSets }),
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    form: this.props.form,
                    onChange: this.props.onChange,
                    labelAlignment: "right",
                    label: "\u7B54\u6848\u4E00\u5B9A\u8981\u8207\u683C\u5F0F\u76F8\u7B26\u3002" }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5B78\u751F\u5FC5\u9808\u8F38\u5165\u76F8\u540C\u7684\u7B97\u5F0F\u3002 \u4F46\u5BB9\u8A31\u4EA4\u63DB\u5F8B\u8207\u8CA0\u865F\uFF0C\u4F8B\u5982\uFF1A1+3\uFF0C\u53EF\u63A5\u53D73+1\u62161-(-3)\uFF0C\u4F46\u4E0D\u80FD\u63A5\u53D74\u62162+2\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    simplify: this.props.simplify,
                    onChange: this.props.onChange,
                    labelAlignment: "right",
                    label: "\u7B54\u6848\u4E00\u5B9A\u8981\u5316\u7C21\u3001\u5C55\u958B\u3002" }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7B54\u6848\u4E00\u5B9A\u8981\u5316\u7C21\u6216\u5C55\u958B\uFF0C\u4F8B\u5982\u65B9\u7A0B\u5F0F (x^2+2x+1) \uFF0C\u5982\u679C\u8F38\u5165 (x+1)^2 \u5C31\u6703\u7B97\u4E0D\u5C0D\uFF0C\u4E26\u4E14\u63D0\u793A\u5B78\u751F\uFF1A factored equation (x+1)^2 will render this response \"\u4F60\u7684\u7B54\u6848\u9084\u6C92\u5316\u7C21\u6216\u5C55\u958B\"\u3002"
                    )
                )
            ),
            simplifyWarning,
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    times: this.props.times,
                    onChange: this.props.onChange,
                    labelAlignment: "right",
                    label: "\u7528 \xD7 \u8868\u793A\u4E58\u865F\u3002" }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7B97\u8853\u554F\u984C\u4F7F\u7528 \xD7 \u8868\u793A\u4E58\u6CD5\uFF0C\u4EE3\u6578\u554F\u984C\u7528\u30FB\u8868\u793A\u4E58\u6CD5\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    null,
                    "\u904B\u7B97\u7B26\u865F\u9078\u64C7:"
                ),
                buttonSetChoices
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "函數名稱: ",
                    React.createElement("input", { type: "text",
                        defaultValue: this.props.functions.join(" "),
                        onChange: this.handleFunctions })
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5217\u5728\u6B64\u8655\u7684\u8B8A\u6578\u70BA\u51FD\u6578\u540D\u7A31\uFF0C\u7576\u6211\u5011\u4F7F\u7528 f(x)\uFF0C\u6703\u628A\u5B83\u89E3\u8B80\u6210\u51FD\u6578\uFF0C\u800C\u4E0D\u662F\u89E3\u91CB\u6210 f \u4E58\u4EE5 x \u3002"
                    )
                )
            )
        );
    },

    handleTexInsert: function handleTexInsert(str) {
        this.refs.expression.insert(str);
    },

    // called when the selected buttonset changes
    handleButtonSet: function handleButtonSet(changingName) {
        var _this4 = this;

        var buttonSetNames = _(TexButtons.buttonSets).keys();

        // Filter to preserve order - using .union and .difference would always
        // move the last added button set to the end.
        // Because filter by buttonSetNames, the order can be keep
        var buttonSets = _(buttonSetNames).filter(function (set) {
            // if set in original buttonSets & set is changingName => false
            // if set in original buttonSets & set is not changingName => true
            // if set not in original buttonSets & set is changingName => true
            // if set not in original buttonSets & set is not changingName => false
            return _(_this4.props.buttonSets).contains(set) !== (set === changingName);
        });

        this.props.onChange({ buttonSets: buttonSets });
    },

    handleFunctions: function handleFunctions(e) {
        var newProps = {};
        newProps.functions = _.compact(e.target.value.split(/[ ,]+/));
        this.props.onChange(newProps);
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.expression).focus();
        return true;
    }
});

var propUpgrades = {
    1: function _(v0props) {
        var easybuttons = v0props.easybuttons,
            props = _objectWithoutProperties(v0props, ["easybuttons"]);

        if ('easybuttons' in v0props) {
            props.buttonSets = easybuttons ? BUTTON_SETS_EASY : BUTTON_SETS_HARD;
        }
        return props;
    }
};

module.exports = {
    name: "expression",
    displayName: "Expression/數學式",
    widget: Expression,
    editor: ExpressionEditor,
    version: { major: 1, minor: 0 },
    transform: function transform(editorProps) {
        return _.pick(editorProps, "times", "functions", "buttonSets");
    },
    hidden: false,
    propUpgrades: propUpgrades
};

},{"../components/input-with-examples.jsx":258,"../components/math-input.jsx":259,"../components/prop-check-box.jsx":262,"../components/tex-buttons.jsx":265,"../enabled-features.jsx":276,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../perseus-api.jsx":294,"../tex.jsx":302,"../util.js":303,"classnames":12,"react":246,"react-components/js/info-tip.jsx":68,"react-components/js/tooltip.jsx":72,"react-dom":95}],313:[function(require,module,exports){
"use strict";

/**
 * This is an iframe widget. It is used for rendering an iframe that
 *  then communicates its state via window.postMessage
 * This is useful for embedding arbitrary visualizations/simulations with
 *  completed conditions, such as the mazes and games in Algorithms.
 * It's particularly well suited for embedding our ProcessingJS programs,
 *  but could also be used for embedding viz's hosted elsewhere.
 */

var React = require("react");

var BlurInput = require("react-components/js/blur-input.jsx");
var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");
var updateQueryString = require("../util.js").updateQueryString;

/* This renders the iframe and handles validation via window.postMessage */
var Iframe = React.createClass({
    displayName: "Iframe",


    mixins: [Changeable, JsonifyProps],

    propTypes: {
        status: React.PropTypes.string,
        message: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            // options: incomplete, incorrect, correct
            status: "correct",
            // optional message
            message: null,
            allowFullScreen: true
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;

        // We receive data from the iframe that contains {passed: true/false}
        //  and use that to set the status
        // It could also contain an optional message
        $(window).bind("message", function (e) {
            var data = {};
            try {
                data = JSON.parse(e.originalEvent.data);
            } catch (err) {
                return;
            }

            if (_.isUndefined(data.testsPassed)) {
                return;
            }

            var status = data.testsPassed ? "correct" : "incorrect";
            _this.change({
                status: status,
                message: data.message
            });
        });
    },

    render: function render() {
        var style = {
            width: this.props.width,
            height: this.props.height
        };
        var url = this.props.url;

        // If the URL doesnt start with http, it must be a program ID
        if (url && url.length && url.indexOf("http") !== 0) {
            url = "https://www.youtube.com/embed/" + url;
            // Origin is used by output.js in deciding to send messages
            url = updateQueryString(url, "origin", window.location.origin);
        }

        // Turn array of [{name: "", value: ""}] into object
        if (this.props.settings) {
            var settings = {};
            _.each(this.props.settings, function (setting) {
                if (setting.name && setting.value) {
                    settings[setting.name] = setting.value;
                }
            });
            // This becomes available to programs as Program.settings()
            url = updateQueryString(url, "settings", JSON.stringify(settings));
        }

        // We sandbox the iframe so that we whitelist only the functionality
        //  that we need. This makes it a bit safer in case some content
        //  creator "went wild".
        // http://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/
        return React.createElement("iframe", { sandbox: "allow-same-origin allow-scripts",
            style: style, src: url,
            allowFullScreen: this.props.allowFullScreen });
    },

    simpleValidate: function simpleValidate(rubric) {
        return Iframe.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

/**
 * This is the widget's grading function
 */
_.extend(Iframe, {
    validate: function validate(state, rubric) {
        // The iframe can tell us whether it's correct or incorrect,
        //  and pass an optional message
        if (state.status === "correct") {
            return {
                type: "points",
                earned: 1,
                total: 1,
                message: state.message || null
            };
        } else if (state.status === "incorrect") {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: state.message || null
            };
        } else {
            return {
                type: "invalid",
                message: "Keep going, you're not there yet!"
            };
        }
    }
});

/**
 * This is used for editing a name/value pair.
 */
var PairEditor = React.createClass({
    displayName: "PairEditor",


    mixins: [Changeable, JsonifyProps],

    propTypes: {
        name: React.PropTypes.string,
        value: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            name: "",
            value: ""
        };
    },

    render: function render() {
        return React.createElement(
            "fieldset",
            null,
            React.createElement(
                "label",
                null,
                "\u540D\u7A31:",
                React.createElement(BlurInput, { value: this.props.name,
                    onChange: this.change("name") })
            ),
            React.createElement(
                "label",
                null,
                "\u8A2D\u5B9A\u503C:",
                React.createElement(BlurInput, { value: this.props.value,
                    onChange: this.change("value") })
            )
        );
    }
});

/**
 * This is used for editing a set of name/value pairs.
 */
var PairsEditor = React.createClass({
    displayName: "PairsEditor",


    mixins: [Changeable, JsonifyProps],

    propTypes: {
        pairs: React.PropTypes.arrayOf(React.PropTypes.shape({
            name: React.PropTypes.string,
            value: React.PropTypes.string
        })).isRequired
    },

    render: function render() {
        var _this2 = this;

        var editors = _.map(this.props.pairs, function (pair, i) {
            return React.createElement(PairEditor, { key: i, name: pair.name, value: pair.value,
                onChange: _this2.handlePairChange.bind(_this2, i) });
        });
        return React.createElement(
            "div",
            null,
            editors
        );
    },

    handlePairChange: function handlePairChange(pairIndex, pair) {
        // If they're both non empty, add a new one
        var pairs = this.props.pairs.slice();
        pairs[pairIndex] = pair;

        var lastPair = pairs[pairs.length - 1];
        if (lastPair.name && lastPair.value) {
            pairs.push({ name: "", value: "" });
        }
        this.change("pairs", pairs);
    }
});

/**
 * This is the main editor for this widget, to specify all the options.
 */
var IframeEditor = React.createClass({
    displayName: "IframeEditor",


    mixins: [Changeable, JsonifyProps],

    getDefaultProps: function getDefaultProps() {
        return {
            url: "",
            settings: [{ name: "", value: "" }],
            width: 560,
            height: 320
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "label",
                null,
                "\u7DB2\u5740 Url:",
                React.createElement(BlurInput, { name: "url",
                    value: this.props.url,
                    onChange: this.change("url") })
            )
        );
    },

    handleSettingsChange: function handleSettingsChange(settings) {
        this.change({ settings: settings.pairs });
    }
});

module.exports = {
    name: "iframe",
    displayName: "Iframe/外掛套件",
    widget: Iframe,
    // Let's not expose it to all content creators yet
    hidden: false,
    editor: IframeEditor
};

},{"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../util.js":303,"react":246,"react-components/js/blur-input.jsx":65}],314:[function(require,module,exports){
"use strict";

var React = require("react");
var _ = require("underscore");

var BlurInput = require("react-components/js/blur-input.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var Graphie = require("../components/graphie.jsx");
var RangeInput = require("../components/range-input.jsx");

var defaultBoxSize = 400;
var defaultRange = [0, 10];
var defaultBackgroundImage = {
    url: null,
    width: 0,
    height: 0
};
var maxImageSize = 480;

/**
 * Alignment option for captions, relative to specified coordinates.
 */
var alignments = ["center", "above", "above right", "right", "below right", "below", "below left", "left", "above left"];

function blankLabel() {
    return {
        content: "",
        coordinates: [0, 0],
        alignment: "center"
    };
}

var ImageWidget = React.createClass({
    displayName: "ImageWidget",

    mixins: [Changeable, JsonifyProps],

    propTypes: {
        range: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.number)),
        box: React.PropTypes.arrayOf(React.PropTypes.number),
        backgroundImage: React.PropTypes.shape({
            url: React.PropTypes.string,
            width: React.PropTypes.number,
            height: React.PropTypes.number
        }),
        useBoxSize: React.PropTypes.bool,
        labels: React.PropTypes.arrayOf(React.PropTypes.shape({
            content: React.PropTypes.string,
            coordinates: React.PropTypes.arrayOf(React.PropTypes.number),
            alignment: React.PropTypes.string
        })),
        allowScratchpad: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            range: [defaultRange, defaultRange],
            box: [defaultBoxSize, defaultBoxSize],
            backgroundImage: defaultBackgroundImage,
            labels: [],
            allowScratchpad: true
        };
    },

    render: function render() {
        var image;
        var backgroundImage = this.props.backgroundImage;
        if (backgroundImage.url) {
            var style = {
                width: backgroundImage.width,
                height: backgroundImage.height
            };
            image = React.createElement("img", { style: style, src: backgroundImage.url });
        }

        var box = this.props.box;

        return React.createElement(
            "div",
            {
                className: "graphie-container",
                style: {
                    width: box[0],
                    height: box[1]
                } },
            image,
            React.createElement(Graphie, {
                ref: "graphie",
                box: this.props.box,
                range: this.props.range,
                options: _.pick(this.props, "box", "range", "labels"),
                setup: this.setupGraphie,
                allowScratchpad: this.props.allowScratchpad })
        );
    },

    setupGraphie: function setupGraphie(graphie, options) {
        _.map(options.labels, function (label) {
            graphie.label(label.coordinates, label.content, label.alignment);
        });
    },

    simpleValidate: function simpleValidate(rubric) {
        return ImageWidget.validate(this.toJSON(), rubric);
    },

    focus: $.noop,

    statics: {
        displayMode: "block"
    }
});

_.extend(ImageWidget, {
    validate: function validate(state, rubric) {
        return {
            type: "points",
            earned: 0,
            total: 0,
            message: null
        };
    }
});

var ImageEditor = React.createClass({
    displayName: "ImageEditor",

    mixins: [Changeable, JsonifyProps],

    componentDidMount: function componentDidMount() {
        var _this = this;

        setTimeout(function () {
            var url = _this.props.backgroundImage.url;
            _this.onUrlChange(url);
        }, 0);
    },

    getDefaultProps: function getDefaultProps() {
        return {
            range: [defaultRange, defaultRange],
            box: [defaultBoxSize, defaultBoxSize],
            useBoxSize: false,
            backgroundImage: defaultBackgroundImage,
            labels: []
        };
    },

    render: function render() {
        var imageSettings = React.createElement(
            "div",
            { className: "image-settings" },
            React.createElement(
                "div",
                null,
                "\u5716\u7247\u7DB2\u5740:",
                ' ',
                React.createElement(BlurInput, { value: this.props.backgroundImage.url,
                    onChange: this.onUrlChange }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u586B\u5165\u5716\u7247\u7684\u7DB2\u5740\u3002\u4F8B\u5982\uFF0C\u5148\u4E0A\u50B3\u81F3 http://imgur.com \uFF0C\u8CBC\u4E0A\u5716\u7247\u7DB2\u5740 (Direct link)\u3002"
                    )
                )
            ),
            React.createElement(
                "label",
                null,
                React.createElement("input", { type: "checkbox",
                    checked: this.props.useBoxSize,
                    onChange: this.toggleUseBoxSize }),
                "\u624B\u52D5\u8ABF\u6574\u5BEC\u5EA6\uFF0C\u5BEC\u5EA6\u4E0A\u9650480"
            ),
            React.createElement(
                "div",
                null,
                "\u5BEC\u5EA6:",
                ' ',
                React.createElement(BlurInput, { value: parseInt(this.props.box[0]),
                    onChange: this.onWidthChange }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5E0C\u671B\u5716\u7247\u986F\u793A\u7684\u5BEC\u5EA6(px)\uFF0C\u82E5\u8981\u8ABF\u6574\u8ACB\u5148\u52FE\u9078\"\u624B\u52D5\u8ABF\u6574\u5BEC\u5EA6\""
                    )
                )
            )
        );

        return React.createElement(
            "div",
            { className: "perseus-widget-image" },
            imageSettings
        );
    },

    _renderRowForLabel: function _renderRowForLabel(label, i) {
        return React.createElement(
            "tr",
            { key: i },
            React.createElement(
                "td",
                null,
                React.createElement(RangeInput, {
                    value: label.coordinates,
                    onChange: this.onCoordinateChange.bind(this, i) })
            ),
            React.createElement(
                "td",
                { style: { verticalAlign: "bottom", width: "5px" } },
                React.createElement("input", {
                    type: "text",
                    className: "graph-settings-axis-label",
                    value: label.content,
                    onChange: this.onContentChange.bind(this, i) })
            ),
            React.createElement(
                "td",
                null,
                React.createElement(
                    "select",
                    {
                        className: "perseus-widget-dropdown",
                        value: label.alignment,
                        onChange: this.onAlignmentChange.bind(this, i) },
                    alignments.map(function (alignment, i) {
                        return React.createElement(
                            "option",
                            { key: "" + i, value: alignment },
                            alignment
                        );
                    }, this)
                )
            ),
            React.createElement(
                "td",
                null,
                React.createElement(
                    "a",
                    {
                        href: "#",
                        className: "simple-button orange delete-label",
                        title: "Remove this label",
                        onClick: this.removeLabel.bind(this, i) },
                    React.createElement("span", { className: "icon-trash" })
                )
            )
        );
    },

    addLabel: function addLabel(e) {
        e.preventDefault();
        var labels = this.props.labels.slice();
        var label = blankLabel();
        labels.push(label);
        this.props.onChange({
            labels: labels
        });
    },

    removeLabel: function removeLabel(labelIndex, e) {
        e.preventDefault();
        var labels = _(this.props.labels).clone();
        labels.splice(labelIndex, 1);
        this.props.onChange({ labels: labels });
    },

    onCoordinateChange: function onCoordinateChange(labelIndex, newCoordinates) {
        var labels = this.props.labels.slice();
        labels[labelIndex] = _.extend({}, labels[labelIndex], {
            coordinates: newCoordinates
        });
        this.props.onChange({ labels: labels });
    },

    onContentChange: function onContentChange(labelIndex, e) {
        var newContent = e.target.value;
        var labels = this.props.labels.slice();
        labels[labelIndex] = _.extend({}, labels[labelIndex], {
            content: newContent
        });
        this.props.onChange({ labels: labels });
    },

    onAlignmentChange: function onAlignmentChange(labelIndex, e) {
        var newAlignment = e.target.value;
        var labels = this.props.labels.slice();
        labels[labelIndex] = _.extend({}, labels[labelIndex], {
            alignment: newAlignment
        });
        this.props.onChange({ labels: labels });
    },

    onWidthChange: function onWidthChange(newAlignment) {
        var image = _.clone(this.props.backgroundImage);
        if (this.props.useBoxSize) {
            var w_h_ratio = image.height / image.width;
            image.width = parseInt(newAlignment) > maxImageSize ? maxImageSize : parseInt(newAlignment);
            image.height = Math.round(image.width * w_h_ratio);
        }
        var box = [image.width, image.height];
        this.props.onChange({
            backgroundImage: image,
            box: box
        });
    },

    toggleUseBoxSize: function toggleUseBoxSize() {
        var useBoxSize = !this.props.useBoxSize;
        if (!useBoxSize) {
            this.reloadImage(this.props.backgroundImage.url);
        }
        this.props.onChange({
            useBoxSize: useBoxSize
        });
    },

    setUrl: function setUrl(url, width, height) {
        if (!this.isMounted()) {
            return;
        }

        var image = _.clone(this.props.backgroundImage);
        image.url = url;
        image.width = width;
        image.height = height;
        var box = [image.width, image.height];
        this.props.onChange({
            backgroundImage: image,
            box: box,
            useBoxSize: false
        });
    },

    reloadImage: function reloadImage(url) {
        var img = new Image();
        img.onload = function () {
            return this.setUrl(url, img.width, img.height);
        }.bind(this);
        img.src = url;
    },

    onUrlChange: function onUrlChange(url) {
        if (url) {
            if (this.props.backgroundImage.url != url) {
                this.reloadImage(url);
            }
        } else {
            this.setUrl(url, 0, 0);
        }
    },

    onRangeChange: function onRangeChange(type, newRange) {
        var range = this.props.range.slice();
        range[type] = newRange;
        this.props.onChange({ range: range });
    }
});

module.exports = {
    name: "image",
    displayName: "Image/圖片",
    widget: ImageWidget,
    editor: ImageEditor
};

},{"../components/graphie.jsx":257,"../components/range-input.jsx":263,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246,"react-components/js/blur-input.jsx":65,"react-components/js/info-tip.jsx":68,"underscore":248}],315:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");
var BlurInput = require("react-components/js/blur-input.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var Renderer = require("../renderer.jsx");
var TeX = require("../tex.jsx");
var InputWithExamples = require("../components/input-with-examples.jsx");

var ApiOptions = require("../perseus-api.jsx").Options;
var Util = require("../util.js");
var EnabledFeatures = require("../enabled-features.jsx");

var toNumericString = KhanUtil.toNumericString;

var answerTypes = {
    number: {
        name: "數字",
        forms: "integer, decimal, proper, improper, mixed"
    },
    decimal: {
        name: "小數",
        forms: "decimal"
    },
    integer: {
        name: "整數",
        forms: "integer"
    },
    rational: {
        name: "分數與帶分數",
        forms: "integer, proper, improper, mixed"
    },
    improper: {
        name: "假分數 (不接受帶分數)",
        forms: "integer, proper, improper"
    },
    mixed: {
        name: "帶分數 (不接受假分數)",
        forms: "integer, proper, mixed"
    },
    percent: {
        name: "數字或百分數",
        forms: "integer, decimal, proper, improper, mixed, percent"
    },
    pi: {
        name: "\u6709 \u03C0 \u7684\u6578", forms: "pi"
    }
};

var formExamples = {
    "integer": function integer(options) {
        return $._("an integer, like $6$");
    },
    "proper": function proper(options) {
        if (options.simplify === "optional") {
            return $._("真分數, 例 $1/2$ or $6/10$");
        } else {
            return $._("最簡真分數, 例 $3/5$");
        }
    },
    "improper": function improper(options) {
        if (options.simplify === "optional") {
            return $._("假分數, 例 $10/7$ or $14/8$");
        } else {
            return $._("最簡假分數, 例 $7/4$");
        }
    },
    "mixed": function mixed(options) {
        return $._("帶分數, 例 $1\\ 3/4$");
    },
    "decimal": function decimal(options) {
        return $._("精確的小數, 例 $0.75$");
    },
    "percent": function percent(options) {
        return $._("a percent, like $12.34\\%$");
    },
    "pi": function pi(options) {
        return $._("pi 的倍數, 例 $12\\ \\text{pi}$ or " + "$2/3\\ \\text{pi}$");
    }
};

var InputNumber = React.createClass({
    displayName: "InputNumber",

    propTypes: {
        currentValue: React.PropTypes.string,
        enabledFeatures: EnabledFeatures.propTypes
    },

    getDefaultProps: function getDefaultProps() {
        return {
            currentValue: "",
            size: "normal",
            answerType: "number",
            enabledFeatures: EnabledFeatures.defaults,
            apiOptions: ApiOptions.defaults
        };
    },

    shouldShowExamples: function shouldShowExamples() {
        return this.props.enabledFeatures.toolTipFormats && this.props.answerType !== "number";
    },

    render: function render() {
        if (this.props.apiOptions.staticRender) {
            var style = {
                borderRadius: "5px",
                padding: "4px",
                background: "white",
                border: "1px solid #a4a4a4"
            };
            return React.createElement(
                "span",
                { style: style },
                React.createElement(
                    TeX,
                    { ref: "input", onClick: this._handleFocus },
                    this.props.currentValue
                )
            );
        } else {
            return React.createElement(InputWithExamples, {
                ref: "input",
                value: this.props.currentValue,
                onChange: this.handleChange,
                className: "perseus-input-size-" + this.props.size,
                examples: this.examples(),
                shouldShowExamples: this.shouldShowExamples(),
                interceptFocus: this._getInterceptFocus(),
                onFocus: this._handleFocus,
                onBlur: this._handleBlur });
        }
    },

    _handleFocus: function _handleFocus() {
        if (this.props.apiOptions.staticRender) {
            this.props.onFocus([], this.refs.input);
        } else {
            this.props.onFocus([], this.refs.input.getInputDOMNode());
        }
    },

    _handleBlur: function _handleBlur() {
        this.props.onBlur([], this.refs.input.getInputDOMNode());
    },

    _getInterceptFocus: function _getInterceptFocus() {
        return this.props.apiOptions.interceptInputFocus && this._interceptFocus;
    },

    _interceptFocus: function _interceptFocus() {
        this.props.onFocus([], this.refs.input.getInputDOMNode());
        var interceptProp = this.props.apiOptions.interceptInputFocus;
        if (interceptProp) {
            return interceptProp(this.props.widgetId, this.refs.input.getInputDOMNode());
        }
    },

    handleChange: function handleChange(newValue) {
        this.props.onChange({ currentValue: Util.asc(newValue) });
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.input).focus();
        return true;
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        if (answerData === undefined) {
            answerData = { currentValue: "" };
        }
        this.props.onChange(answerData);
    },

    toJSON: function toJSON(skipValidation) {
        return {
            currentValue: this.props.currentValue
        };
    },

    simpleValidate: function simpleValidate(rubric, onInputError) {
        onInputError = onInputError || function () {};
        return InputNumber.validate(this.toJSON(), rubric, onInputError);
    },

    examples: function examples() {
        var type = this.props.answerType;
        var forms = answerTypes[type].forms.split(/\s*,\s*/);

        var examples = _.map(forms, function (form) {
            return formExamples[form](this.props);
        }, this);

        return [$._("**Acceptable Formats**")].concat(examples);
    },

    statics: {
        displayMode: "inline-block"
    }
});

_.extend(InputNumber, {
    validate: function validate(state, rubric, onInputError) {
        if (rubric.answerType == null) {
            rubric.answerType = "number";
        }
        var val = Khan.answerTypes.number.createValidatorFunctional(rubric.value, {
            simplify: rubric.simplify,
            inexact: rubric.inexact || undefined,
            maxError: rubric.maxError,
            forms: answerTypes[rubric.answerType].forms
        });

        var result = val(state.currentValue);

        // TODO(eater): Seems silly to translate result to this invalid/points
        // thing and immediately translate it back in ItemRenderer.scoreInput()
        if (result.empty) {
            var apiResult = onInputError(null, // reserved for some widget identifier
            state.currentValue, result.message);
            return {
                type: "invalid",
                message: apiResult === false ? null : result.message
            };
        } else {
            return {
                type: "points",
                earned: result.correct ? 1 : 0,
                total: 1,
                message: result.message
            };
        }
    }
});

var InputNumberEditor = React.createClass({
    displayName: "InputNumberEditor",

    getDefaultProps: function getDefaultProps() {
        return {
            value: "0",
            simplify: "required",
            size: "normal",
            inexact: false,
            maxError: 0.1,
            answerType: "number"
        };
    },

    handleAnswerChange: function handleAnswerChange(str) {
        var value = Util.firstNumericalParse(str) || 0;
        this.props.onChange({ value: value });
    },

    render: function render() {
        var _this = this;

        var answerTypeOptions = _.map(answerTypes, function (v, k) {
            return React.createElement(
                "option",
                { value: k, key: k },
                v.name
            );
        }, this);

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    ' ',
                    "\u6B63\u78BA\u7B54\u6848:",
                    ' ',
                    React.createElement(BlurInput, { value: "" + this.props.value,
                        onChange: this.handleAnswerChange,
                        ref: "input" })
                )
            ),
            React.createElement(
                "div",
                null,
                ' ',
                "\u7B54\u6848\u985E\u578B:",
                ' ',
                React.createElement(
                    "select",
                    {
                        value: this.props.answerType,
                        onChange: function onChange(e) {
                            _this.props.onChange({ answerType: e.target.value });
                        } },
                    answerTypeOptions
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9810\u8A2D\u4F7F\u7528\u300C\u6578\u5B57\u300D\uFF0C\u9664\u975E\u7B54\u6848\u9700\u8981\u662F\u4E00\u500B\u7279\u5B9A\u7684\u683C\u5F0F\u3002(\u4F8B\u5982\uFF1A\u5C07\u5C0F\u6578\u8F49\u63DB\u6210\u5206\u6578\u7684\u554F\u984C)"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    ' ',
                    "\u5BEC\u5EA6",
                    ' ',
                    React.createElement(
                        "select",
                        { value: this.props.size,
                            onChange: function onChange(e) {
                                _this.props.onChange({ size: e.target.value });
                            } },
                        React.createElement(
                            "option",
                            { value: "normal" },
                            "\u4E00\u822C (80px)"
                        ),
                        React.createElement(
                            "option",
                            { value: "small" },
                            "\u8F03\u5C0F (40px)"
                        )
                    )
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9810\u8A2D\u4F7F\u7528\u4E00\u822C\u5927\u5C0F\uFF0C\u9664\u975E\u9700\u8981\u5F88\u591A\u500B\u7B54\u6848\u683C\u5728\u540C\u4E00\u884C\uFF0C\u6703\u51FA\u73FE\u653E\u4E0D\u4E0B\u7684\u60C5\u6CC1\u3002"
                    )
                )
            )
        );
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.input).focus();
        return true;
    },

    toJSON: function toJSON() {
        return _.pick(this.props, "value", "simplify", "size", "inexact", "maxError", "answerType");
    }
});

var propTransform = function propTransform(editorProps) {
    return _.pick(editorProps, "simplify", "size", "answerType");
};

module.exports = {
    name: "input-number",
    displayName: "input-number/數值填充",
    widget: InputNumber,
    editor: InputNumberEditor,
    transform: propTransform
};

},{"../components/input-with-examples.jsx":258,"../enabled-features.jsx":276,"../perseus-api.jsx":294,"../renderer.jsx":298,"../tex.jsx":302,"../util.js":303,"react":246,"react-components/js/blur-input.jsx":65,"react-components/js/info-tip.jsx":68,"react-dom":95}],316:[function(require,module,exports){
"use strict";

var React = require('react');
var Graph = require("../components/graph.jsx");
var GraphSettings = require("../components/graph-settings.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var Interactive2 = require("../interactive2.js");
var NumberInput = require("../components/number-input.jsx");
var Util = require("../util.js");

var knumber = KhanUtil.knumber;
var kpoint = KhanUtil.kpoint;

var DeprecationMixin = Util.DeprecationMixin;

var TRASH_ICON_URI = 'https://ka-perseus-graphie.s3.amazonaws.com/b1452c0d79fd0f7ff4c3af9488474a0a0decb361.png';

var defaultBoxSize = 400;
var defaultEditorBoxSize = 340;
var defaultBackgroundImage = {
    url: null,
    scale: 1,
    bottom: 0,
    left: 0
};

var eq = Util.eq;
var deepEq = Util.deepEq;

var UNLIMITED = "unlimited";

// Sample background image:
// https://ka-perseus-graphie.s3.amazonaws.com/29c1b0fcd17fe63df0f148fe357044d5d5c7d0bb.png

function ccw(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);
}

function collinear(a, b, c) {
    return eq(ccw(a, b, c), 0);
}

function sign(val) {
    if (eq(val, 0)) {
        return 0;
    } else {
        return val > 0 ? 1 : -1;
    }
}

// default to defaultValue if actual is null or undefined
function defaultVal(actual, defaultValue) {
    return actual == null ? defaultValue : actual;
}

// Given rect bounding points A and B, whether point C is inside the rect
function pointInRect(a, b, c) {
    return c[0] <= Math.max(a[0], b[0]) && c[0] >= Math.min(a[0], b[0]) && c[1] <= Math.max(a[1], b[1]) && c[1] >= Math.min(a[1], b[1]);
}

// Whether line segment AB intersects line segment CD
// http://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
function intersects(ab, cd) {
    var triplets = [[ab[0], ab[1], cd[0]], [ab[0], ab[1], cd[1]], [cd[0], cd[1], ab[0]], [cd[0], cd[1], ab[1]]];

    var orientations = _.map(triplets, function (triplet) {
        return sign(ccw.apply(null, triplet));
    });

    if (orientations[0] !== orientations[1] && orientations[2] !== orientations[3]) {
        return true;
    }

    for (var i = 0; i < 4; i++) {
        if (orientations[i] === 0 && pointInRect.apply(null, triplets[i])) {
            return true;
        }
    }

    return false;
}

function vector(a, b) {
    return _.map(_.zip(a, b), function (pair) {
        return pair[0] - pair[1];
    });
}

function magnitude(v) {
    return Math.sqrt(_.reduce(v, function (memo, el) {
        return memo + Math.pow(el, 2);
    }, 0));
}

function dotProduct(a, b) {
    return _.reduce(_.zip(a, b), function (memo, pair) {
        return memo + pair[0] * pair[1];
    }, 0);
}

function sideLengths(coords) {
    var segments = _.zip(coords, rotate(coords));
    return _.map(segments, function (segment) {
        return magnitude(vector.apply(null, segment));
    });
}

// Based on http://math.stackexchange.com/a/151149
function angleMeasures(coords) {
    var triplets = _.zip(rotate(coords, -1), coords, rotate(coords, 1));

    var offsets = _.map(triplets, function (triplet) {
        var p = vector(triplet[1], triplet[0]);
        var q = vector(triplet[2], triplet[1]);
        var raw = Math.acos(dotProduct(p, q) / (magnitude(p) * magnitude(q)));
        return sign(ccw.apply(null, triplet)) > 0 ? raw : -raw;
    });

    var sum = _.reduce(offsets, function (memo, arg) {
        return memo + arg;
    }, 0);

    return _.map(offsets, function (offset) {
        return sum > 0 ? Math.PI - offset : Math.PI + offset;
    });
}

// Whether two polygons are similar (or if specified, congruent)
function similar(coords1, coords2, tolerance) {
    if (coords1.length !== coords2.length) {
        return false;
    }

    var n = coords1.length;

    var angles1 = angleMeasures(coords1);
    var angles2 = angleMeasures(coords2);

    var sides1 = sideLengths(coords1);
    var sides2 = sideLengths(coords2);

    for (var i = 0; i < 2 * n; i++) {
        var angles = angles2.slice();
        var sides = sides2.slice();

        // Reverse angles and sides to allow matching reflected polygons
        if (i >= n) {
            angles.reverse();
            sides.reverse();
            // Since sides are calculated from two coordinates,
            // simply reversing results in an off by one error
            sides = rotate(sides, 1);
        }

        angles = rotate(angles, i);
        sides = rotate(sides, i);

        if (deepEq(angles1, angles)) {
            var sidePairs = _.zip(sides1, sides);

            var factors = _.map(sidePairs, function (pair) {
                return pair[0] / pair[1];
            });

            var same = _.all(factors, function (factor) {
                return eq(factors[0], factor);
            });

            var congruentEnough = _.all(sidePairs, function (pair) {
                return knumber.equal(pair[0], pair[1], tolerance);
            });

            if (same && congruentEnough) {
                return true;
            }
        }
    }

    return false;
}

// Less than or approximately equal
function leq(a, b) {
    return a < b || eq(a, b);
}

// Given triangle with sides ABC return angle opposite side C in degrees
function lawOfCosines(a, b, c) {
    return Math.acos((a * a + b * b - c * c) / (2 * a * b)) * 180 / Math.PI;
}

function canonicalSineCoefficients(coeffs) {
    // For a curve of the form f(x) = a * Sin(b * x - c) + d,
    // this function ensures that a, b > 0, and c is its
    // smallest possible positive value.
    var amplitude = coeffs[0];
    var angularFrequency = coeffs[1];
    var phase = coeffs[2];
    var verticalOffset = coeffs[3];

    // Guarantee a > 0
    if (amplitude < 0) {
        amplitude *= -1;
        angularFrequency *= -1;
        phase *= -1;
    }

    var period = 2 * Math.PI;
    // Guarantee b > 0
    if (angularFrequency < 0) {
        angularFrequency *= -1;
        phase *= -1;
        phase += period / 2;
    }

    // Guarantee c is smallest possible positive value
    while (phase > 0) {
        phase -= period;
    }
    while (phase < 0) {
        phase += period;
    }

    return [amplitude, angularFrequency, phase, verticalOffset];
}

// e.g. rotate([1, 2, 3]) -> [2, 3, 1]
function rotate(array, n) {
    n = typeof n === "undefined" ? 1 : n % array.length;
    return array.slice(n).concat(array.slice(0, n));
}

function capitalize(str) {
    return str.replace(/(?:^|-)(.)/g, function (match, letter) {
        return letter.toUpperCase();
    });
}

function getLineEquation(first, second) {
    if (eq(first[0], second[0])) {
        return "x = " + first[0].toFixed(3);
    } else {
        var m = (second[1] - first[1]) / (second[0] - first[0]);
        var b = first[1] - m * first[0];
        return "y = " + m.toFixed(3) + "x + " + b.toFixed(3);
    }
}

// Stolen from the wikipedia article
// http://en.wikipedia.org/wiki/Line-line_intersection
function getLineIntersection(firstPoints, secondPoints) {
    var x1 = firstPoints[0][0],
        y1 = firstPoints[0][1],
        x2 = firstPoints[1][0],
        y2 = firstPoints[1][1],
        x3 = secondPoints[0][0],
        y3 = secondPoints[0][1],
        x4 = secondPoints[1][0],
        y4 = secondPoints[1][1];

    var determinant = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

    if (Math.abs(determinant) < 1e-9) {
        return "Lines are parallel";
    } else {
        var x = ((x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)) / determinant;
        var y = ((x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)) / determinant;
        return "Intersection: (" + x.toFixed(3) + ", " + y.toFixed(3) + ")";
    }
}

function numSteps(range, step) {
    return Math.floor((range[1] - range[0]) / step);
}

var deprecatedProps = {
    showGraph: function showGraph(props) {
        return { markings: props.showGraph ? "graph" : "none" };
    }
};

var InteractiveGraph = React.createClass({
    displayName: "InteractiveGraph",


    getInitialState: function getInitialState() {
        return {
            shouldShowInstructions: this._getShouldShowInstructions()
        };
    },

    getDefaultProps: function getDefaultProps() {
        var range = [[-10, 10], [-10, 10]];
        var step = [1, 1];
        var gridStep = Util.getGridStep(range, step, defaultBoxSize);
        var snapStep = Util.snapStepFromGridStep(gridStep);
        return {
            labels: ["x", "y"],
            range: range,
            box: [defaultBoxSize, defaultBoxSize],
            step: step,
            gridStep: gridStep,
            snapStep: snapStep,
            backgroundImage: defaultBackgroundImage,
            markings: "graph",
            showProtractor: false,
            showRuler: false,
            rulerLabel: "",
            rulerTicks: 10,
            graph: {
                type: "linear"
            }
        };
    },

    mixins: [DeprecationMixin],
    deprecatedProps: deprecatedProps,

    _getShouldShowInstructions: function _getShouldShowInstructions(props) {
        props = props || this.props;
        return this.isClickToAddPoints(props) && (props.graph.coords == null || props.graph.coords.length === 0);
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        var oldType = prevProps.graph.type;
        var newType = this.props.graph.type;
        if (oldType !== newType || prevProps.graph.allowReflexAngles !== this.props.graph.allowReflexAngles || prevProps.graph.angleOffsetDeg !== this.props.graph.angleOffsetDeg || prevProps.graph.numPoints !== this.props.graph.numPoints || prevProps.graph.numSides !== this.props.graph.numSides || prevProps.graph.numSegments !== this.props.graph.numSegments || prevProps.graph.showAngles !== this.props.graph.showAngles || prevProps.graph.showSides !== this.props.graph.showSides || prevProps.graph.snapTo !== this.props.graph.snapTo || prevProps.graph.snapDegrees !== this.props.graph.snapDegrees) {
            this["remove" + capitalize(oldType) + "Controls"]();
            this["add" + capitalize(newType) + "Controls"]();
        }
        if (this.shouldResetGraphie) {
            this.resetGraphie();
        }
    },

    render: function render() {
        var _this = this;

        var typeSelect;
        var extraOptions;
        if (this.props.flexibleType) {
            typeSelect = React.createElement(
                "select",
                {
                    value: this.props.graph.type,
                    onChange: function onChange(e) {
                        var type = e.target.value;
                        _this.props.onChange({
                            graph: { type: type }
                        });
                    } },
                React.createElement(
                    "option",
                    { value: "linear" },
                    "\u7DDA\u6027\u51FD\u6578"
                ),
                React.createElement(
                    "option",
                    { value: "quadratic" },
                    "\u4E8C\u6B21\u51FD\u6578"
                ),
                React.createElement(
                    "option",
                    { value: "sinusoid" },
                    "\u6B63\u9918\u5F26\u51FD\u6578"
                ),
                React.createElement(
                    "option",
                    { value: "circle" },
                    "\u5713\u5F62"
                ),
                React.createElement(
                    "option",
                    { value: "point" },
                    "\u9EDE"
                ),
                React.createElement(
                    "option",
                    { value: "linear-system" },
                    "\u806F\u7ACB\u65B9\u7A0B\u7D44"
                ),
                React.createElement(
                    "option",
                    { value: "polygon" },
                    "\u591A\u908A\u5F62"
                ),
                React.createElement(
                    "option",
                    { value: "segment" },
                    "\u7DDA\u6BB5"
                ),
                React.createElement(
                    "option",
                    { value: "ray" },
                    "\u5C04\u7DDA"
                ),
                React.createElement(
                    "option",
                    { value: "angle" },
                    "\u89D2\u5EA6"
                )
            );

            if (this.props.graph.type === "point") {
                extraOptions = React.createElement(
                    "select",
                    {
                        key: "point-select",
                        value: this.props.graph.numPoints || 1,
                        onChange: function onChange(e) {
                            // Convert numbers, leave UNLIMITED intact:
                            var num = +e.target.value || e.target.value;
                            _this.props.onChange({
                                graph: {
                                    type: "point",
                                    numPoints: num,
                                    coords: null
                                }
                            });
                        } },
                    _.map(_.range(1, 7), function (n) {
                        return React.createElement(
                            "option",
                            { value: n },
                            n,
                            " \u9EDE"
                        );
                    }),
                    React.createElement(
                        "option",
                        { value: UNLIMITED },
                        "\u7121\u9650\u5236"
                    )
                );
            } else if (this.props.graph.type === "polygon") {
                extraOptions = React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "select",
                            {
                                key: "polygon-select",
                                value: this.props.graph.numSides || 3,
                                onChange: function onChange(e) {
                                    // Convert numbers, leave UNLIMITED intact:
                                    var num = +e.target.value || e.target.value;
                                    var graph = _.extend({}, _this.props.graph, {
                                        numSides: num,
                                        coords: null,
                                        snapTo: "grid" // reset the snap for
                                        // UNLIMITED, which only
                                        // supports "grid"
                                    });
                                    _this.props.onChange({ graph: graph });
                                } },
                            _.map(_.range(3, 13), function (n) {
                                return React.createElement(
                                    "option",
                                    { value: n },
                                    n,
                                    " \u908A"
                                );
                            }),
                            React.createElement(
                                "option",
                                { value: UNLIMITED },
                                "\u7121\u9650\u5236"
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            " \u5C0D\u9F4A",
                            ' ',
                            React.createElement(
                                "select",
                                {
                                    key: "polygon-snap",
                                    value: this.props.graph.snapTo,
                                    onChange: function onChange(e) {
                                        var graph = _.extend({}, _this.props.graph, {
                                            snapTo: e.target.value,
                                            coords: null
                                        });
                                        _this.props.onChange({ graph: graph });
                                    } },
                                React.createElement(
                                    "option",
                                    { value: "grid" },
                                    "\u7DB2\u683C"
                                ),
                                this.props.graph.numSides !== UNLIMITED && [React.createElement(
                                    "option",
                                    { value: "interior angles" },
                                    ' ',
                                    "\u5167\u89D2",
                                    ' '
                                ), React.createElement(
                                    "option",
                                    { value: "side measures" },
                                    ' ',
                                    "\u908A\u9577",
                                    ' '
                                )]
                            )
                        ),
                        React.createElement(
                            InfoTip,
                            null,
                            React.createElement(
                                "p",
                                null,
                                "\u6B64\u9078\u9805\u662F\u7528\u4F86\u6C7A\u5B9A\u7B54\u6848\u7684\u7B26\u5408\u60C5\u6CC1\uFF0C\"\u5C0D\u9F4A\u7DB2\u683C\"\u70BA\u9802\u9EDE\u4F4D\u7F6E\u9700\u7B26\u5408\u7B54\u6848\u8981\u6C42\uFF0C \"\u5C0D\u9F4A\u5167\u89D2\"\u70BA\u5167\u89D2\u9700\u7B26\u5408\u7B54\u6848\u8981\u6C42\uFF0C\"\u5C0D\u9F4A\u908A\u9577\"\u70BA\u5404\u908A\u9700\u7B26\u5408\u7B54\u6848\u8981\u6C42\u3002"
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            "\u986F\u793A\u89D2\u5EA6\u5EA6\u6578:",
                            ' ',
                            React.createElement("input", { type: "checkbox",
                                checked: this.props.graph.showAngles,
                                onChange: this.toggleShowAngles })
                        ),
                        React.createElement(
                            InfoTip,
                            null,
                            React.createElement(
                                "p",
                                null,
                                "\u986F\u793A\u51FA\u5404\u5167\u89D2\u7684\u89D2\u5EA6"
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            "\u986F\u793A\u908A\u9577\u9577\u5EA6:",
                            ' ',
                            React.createElement("input", { type: "checkbox",
                                checked: this.props.graph.showSides,
                                onChange: this.toggleShowSides })
                        ),
                        React.createElement(
                            InfoTip,
                            null,
                            React.createElement(
                                "p",
                                null,
                                "\u986F\u793A\u51FA\u5404\u908A\u7684\u9577\u5EA6"
                            )
                        )
                    )
                );
            } else if (this.props.graph.type === "segment") {
                extraOptions = React.createElement(
                    "select",
                    {
                        key: "segment-select",
                        value: this.props.graph.numSegments || 1,
                        onChange: function onChange(e) {
                            var num = +e.target.value;
                            _this.props.onChange({
                                graph: {
                                    type: "segment",
                                    numSegments: num,
                                    coords: null
                                }
                            });
                        } },
                    _.map(_.range(1, 7), function (n) {
                        return React.createElement(
                            "option",
                            { value: n },
                            n,
                            " \u7DDA\u6BB5"
                        );
                    })
                );
            } else if (this.props.graph.type === "angle") {
                var allowReflexAngles = defaultVal(this.props.graph.allowReflexAngles, true);
                extraOptions = React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            "\u986F\u793A\u89D2\u5EA6\u503C:",
                            ' ',
                            React.createElement("input", { type: "checkbox",
                                checked: this.props.graph.showAngles,
                                onChange: this.toggleShowAngles })
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            "\u5141\u8A31\u53CD\u89D2:",
                            ' ',
                            React.createElement("input", { type: "checkbox",
                                checked: allowReflexAngles,
                                onChange: function onChange(newVal) {
                                    _this.props.onChange({
                                        graph: _.extend({}, _this.props.graph, {
                                            allowReflexAngles: !allowReflexAngles,
                                            coords: null
                                        })
                                    });
                                } })
                        ),
                        React.createElement(
                            InfoTip,
                            null,
                            React.createElement(
                                "p",
                                null,
                                "\u53CD\u89D2\u662F\u6307\u5927\u65BC 180 \u5EA6\u7684\u89D2\u5EA6\u3002"
                            ),
                            React.createElement(
                                "p",
                                null,
                                "(\u9810\u8A2D\u70BA\u5141\u8A31)"
                            )
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            "\u7B26\u5408",
                            ' ',
                            React.createElement(NumberInput, {
                                key: "degree-snap",
                                placeholder: 1,
                                value: this.props.graph.snapDegrees,
                                onChange: function onChange(newVal) {
                                    _this.props.onChange({
                                        graph: _.extend({}, _this.props.graph, {
                                            snapDegrees: Math.abs(newVal),
                                            coords: null
                                        })
                                    });
                                } }),
                            ' ',
                            "\u5EA6",
                            ' '
                        )
                    ),
                    React.createElement(
                        "div",
                        null,
                        React.createElement(
                            "label",
                            null,
                            ' ',
                            "\u504F\u79FB",
                            ' ',
                            React.createElement(NumberInput, {
                                key: "angle-offset",
                                placeholder: 0,
                                value: this.props.graph.angleOffsetDeg,
                                onChange: function onChange(newVal) {
                                    _this.props.onChange({
                                        graph: _.extend({}, _this.props.graph, {
                                            angleOffsetDeg: newVal,
                                            coords: null
                                        })
                                    });
                                } }),
                            ' ',
                            "\u5EA6",
                            ' '
                        )
                    )
                );
            }
        }

        var box = this.props.box;

        var image = this.props.backgroundImage;
        if (image.url) {
            var preScale = box[0] / defaultBoxSize;
            var scale = image.scale * preScale;
            var style = {
                bottom: preScale * image.bottom + "px",
                left: preScale * image.left + "px",
                width: scale * image.width + "px",
                height: scale * image.height + "px"
            };
            image = React.createElement("img", { style: style, src: image.url });
        } else {
            image = null;
        }

        var instructions;
        if (this.isClickToAddPoints() && this.state.shouldShowInstructions) {
            if (this.props.graph.type === "point") {
                instructions = $._("Click to add points");
            } else if (this.props.graph.type === "polygon") {
                instructions = $._("Click to add vertices");
            }
        } else {
            instructions = undefined;
        }

        var onMouseDown = this.isClickToAddPoints() ? this.handleAddPointsMouseDown : null;

        return React.createElement(
            "div",
            { className: "perseus-widget " + "perseus-widget-interactive-graph",
                style: {
                    width: box[0],
                    height: this.props.flexibleType ? "auto" : box[1]
                } },
            React.createElement(Graph, {
                instructions: instructions,
                ref: "graph",
                box: this.props.box,
                labels: this.props.labels,
                range: this.props.range,
                step: this.props.step,
                gridStep: this.props.gridStep,
                snapStep: this.props.snapStep,
                markings: this.props.markings,
                backgroundImage: this.props.backgroundImage,
                showProtractor: this.props.showProtractor,
                showRuler: this.props.showRuler,
                rulerLabel: this.props.rulerLabel,
                rulerTicks: this.props.rulerTicks,
                onMouseDown: onMouseDown,
                onGraphieUpdated: this.setGraphie }),
            typeSelect,
            extraOptions
        );
    },

    componentDidMount: function componentDidMount() {
        this.setGraphie(this.refs.graph.graphie());
    },

    setGraphie: function setGraphie(newGraphie) {
        this.graphie = newGraphie;
        this.setupGraphie();
    },

    handleAddPointsMouseDown: function handleAddPointsMouseDown(coord) {
        // This function should only be called when this.isClickToAddPoints()
        // is true
        if (!this.isClickToAddPoints()) {
            throw new Error("handleAddPointsClick should not be registered" + "when isClickToAddPoints() is false");
        }
        if (!this.isCoordInTrash(coord)) {
            var point;
            if (this.props.graph.type === "point") {
                point = this.createPointForPointsType(coord, this.points.length);
                if (!point.constrain()) {
                    point.remove();
                    return;
                }
                this.points.push(point);

                // interactive2 allows us to grab the point
                var idx = this.points.length - 1;
                this.points[idx].grab(coord);

                this.updateCoordsFromPoints();
            } else if (this.props.graph.type === "polygon") {
                if (this.polygon.closed) {
                    return;
                }
                point = this.createPointForPolygonType(coord, this.points.length);
                this.points.push(point);

                var idx = this.points.length - 1;
                this.points[idx].grab();

                // We don't call updateCoordsFromPoints for
                // polygons, since the polygon won't be
                // closed yet.
                this.updatePolygon();
            }

            this.setState({
                shouldShowInstructions: false
            });
        }
    },

    resetGraphie: function resetGraphie() {
        this.shouldResetGraphie = false;
        this.refs.graph.reset();
    },

    setupGraphie: function setupGraphie() {
        this.setTrashCanVisibility(0);
        if (this.isClickToAddPoints()) {
            this.setTrashCanVisibility(0.5);
        }

        var type = this.props.graph.type;
        this["add" + capitalize(type) + "Controls"]();
    },

    setTrashCanVisibility: function setTrashCanVisibility(opacity) {
        var graphie = this.graphie;

        if (knumber.equal(opacity, 0)) {
            if (this.trashCan) {
                this.trashCan.remove();
                this.trashCan = null;
            }
        } else {
            if (!this.trashCan) {
                this.trashCan = graphie.raphael.image(TRASH_ICON_URI, graphie.xpixels - 40, graphie.ypixels - 40, 40, 40);
            }
            // TODO(jack): svg opacity is broken in chrome 34.
            // Uncomment this once chrome 35 is out.
            //this.trashCan.attr({
            //    opacity: opacity
            //});
        }
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (this.isClickToAddPoints() !== this.isClickToAddPoints(nextProps)) {
            this.shouldResetGraphie = true;
            this.setState({
                shouldShowInstructions: this._getShouldShowInstructions(nextProps)
            });
        }
    },

    isClickToAddPoints: function isClickToAddPoints(props) {
        props = props || this.props;
        return props.graph.type === "point" && props.graph.numPoints === UNLIMITED || props.graph.type === "polygon" && props.graph.numSides === UNLIMITED;
    },

    addLine: function addLine(type) {
        var self = this;
        var graphie = self.graphie;
        var coords = InteractiveGraph.getLineCoords(self.props.graph, self.props);

        var points = self.points = _.map(coords, function (coord) {
            return Interactive2.addMovablePoint(graphie, {
                coord: coord,
                constraints: [Interactive2.MovablePoint.constraints.bound(), Interactive2.MovablePoint.constraints.snap()],
                onMove: function onMove() {
                    var graph = _.extend({}, self.props.graph, {
                        coords: _.invoke(points, "coord")
                    });
                    self.props.onChange({ graph: graph });
                },
                normalStyle: {
                    stroke: KhanUtil.INTERACTIVE,
                    fill: KhanUtil.INTERACTIVE
                }
            });
        });

        var lineConfig = {
            points: points,
            static: true
        };

        if (type === "line") {
            lineConfig.extendLine = true;
        } else if (type === "ray") {
            lineConfig.extendRay = true;
        }

        var line = self.line = Interactive2.addMovableLine(graphie, lineConfig);

        // A and B can't be in the same place
        points[0].listen("constraints", "isLine", function (coord) {
            return !kpoint.equal(coord, points[1].coord());
        });
        points[1].listen("constraints", "isLine", function (coord) {
            return !kpoint.equal(coord, points[0].coord());
        });
    },

    removeLine: function removeLine() {
        _.invoke(this.points, "remove");
        this.line.remove();
    },

    addLinearControls: function addLinearControls() {
        this.addLine("line");
    },

    removeLinearControls: function removeLinearControls() {
        this.removeLine();
    },

    addQuadraticControls: function addQuadraticControls() {
        var _this2 = this;

        var graphie = this.graphie;
        var coords = this.props.graph.coords;
        if (!coords) {
            coords = InteractiveGraph.defaultQuadraticCoords(this.props);
        }

        var pointA = this.pointA = graphie.addMovablePoint({
            coord: coords[0],
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            normalStyle: {
                stroke: KhanUtil.INTERACTIVE,
                fill: KhanUtil.INTERACTIVE
            }
        });

        var pointB = this.pointB = graphie.addMovablePoint({
            coord: coords[1],
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            normalStyle: {
                stroke: KhanUtil.INTERACTIVE,
                fill: KhanUtil.INTERACTIVE
            }
        });

        var pointC = this.pointC = graphie.addMovablePoint({
            coord: coords[2],
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            normalStyle: {
                stroke: KhanUtil.INTERACTIVE,
                fill: KhanUtil.INTERACTIVE
            }
        });

        // A, B, and C can't be in the same place
        pointA.onMove = function (x, y) {
            return x !== pointB.coord[0] && x !== pointC.coord[0];
        };
        pointB.onMove = function (x, y) {
            return x !== pointA.coord[0] && x !== pointC.coord[0];
        };
        pointC.onMove = function (x, y) {
            return x !== pointA.coord[0] && x !== pointB.coord[0];
        };

        this.updateQuadratic();

        $([pointA, pointB, pointC]).on("move", function () {
            var graph = _.extend({}, _this2.props.graph, {
                coords: [pointA.coord, pointB.coord, pointC.coord]
            });
            _this2.props.onChange({ graph: graph });
            _this2.updateQuadratic();
        });
    },

    updateQuadratic: function updateQuadratic() {
        if (this.parabola) {
            this.parabola.remove();
        }

        var coeffs = InteractiveGraph.getCurrentQuadraticCoefficients(this.props);
        if (!coeffs) {
            return;
        }

        var a = coeffs[0],
            b = coeffs[1],
            c = coeffs[2];
        this.parabola = this.graphie.plot(function (x) {
            return (a * x + b) * x + c;
        }, this.props.range[0]).attr({
            stroke: KhanUtil.INTERACTIVE
        });
        this.parabola.toBack();
    },

    removeQuadraticControls: function removeQuadraticControls() {
        this.pointA.remove();
        this.pointB.remove();
        this.pointC.remove();
        if (this.parabola) {
            this.parabola.remove();
        }
    },

    addSinusoidControls: function addSinusoidControls() {
        var _this3 = this;

        var graphie = this.graphie;
        var coords = this.props.graph.coords;
        if (!coords) {
            coords = InteractiveGraph.defaultSinusoidCoords(this.props);
        }

        var pointA = this.pointA = Interactive2.addMovablePoint(graphie, {
            coord: coords[0],
            constraints: [Interactive2.MovablePoint.constraints.bound(), Interactive2.MovablePoint.constraints.snap(), function (coord) {
                return !pointA || coord[0] !== pointB.coord()[0];
            }],
            onMove: function onMove() {
                var graph = _.extend({}, _this3.props.graph, {
                    coords: [pointA.coord(), pointB.coord()]
                });
                _this3.props.onChange({ graph: graph });
                _this3.updateSinusoid();
            },
            normalStyle: {
                stroke: KhanUtil.BLUE,
                fill: KhanUtil.BLUE
            }
        });

        var pointB = this.pointB = Interactive2.addMovablePoint(graphie, {
            coord: coords[1],
            constraints: [Interactive2.MovablePoint.constraints.bound(), Interactive2.MovablePoint.constraints.snap(), function (coord) {
                return !pointA || coord[0] !== pointA.coord()[0];
            }],
            onMove: function onMove() {
                var graph = _.extend({}, _this3.props.graph, {
                    coords: [pointA.coord(), pointB.coord()]
                });
                _this3.props.onChange({ graph: graph });
                _this3.updateSinusoid();
            },
            normalStyle: {
                stroke: KhanUtil.BLUE,
                fill: KhanUtil.BLUE
            }
        });

        this.updateSinusoid();
    },

    updateSinusoid: function updateSinusoid() {
        if (this.sinusoid) {
            this.sinusoid.remove();
        }

        var coeffs = InteractiveGraph.getCurrentSinusoidCoefficients(this.props);
        if (!coeffs) {
            return;
        }

        var a = coeffs[0],
            b = coeffs[1],
            c = coeffs[2],
            d = coeffs[3];
        this.sinusoid = this.graphie.plot(function (x) {
            return a * Math.sin(b * x - c) + d;
        }, this.props.range[0]).attr({
            stroke: KhanUtil.BLUE
        });
        this.sinusoid.toBack();
    },

    removeSinusoidControls: function removeSinusoidControls() {
        this.pointA.remove();
        this.pointB.remove();
        if (this.sinusoid) {
            this.sinusoid.remove();
        }
    },

    addCircleControls: function addCircleControls() {
        var _this4 = this;

        var graphie = this.graphie;
        var minSnap = _.min(graphie.snap);

        var circle = this.circle = graphie.addCircleGraph({
            center: this.props.graph.center || [0, 0],
            radius: this.props.graph.radius || _.min(this.props.step),
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            minRadius: minSnap * 2,
            snapRadius: minSnap
        });

        $(circle).on("move", function () {
            var graph = _.extend({}, _this4.props.graph, {
                center: circle.center,
                radius: circle.radius
            });
            _this4.props.onChange({ graph: graph });
        });
    },

    removeCircleControls: function removeCircleControls() {
        this.circle.remove();
    },

    addLinearSystemControls: function addLinearSystemControls() {
        var _this5 = this;

        var graphie = this.graphie;
        var coords = InteractiveGraph.getLinearSystemCoords(this.props.graph, this.props);

        var segmentColors = [KhanUtil.INTERACTIVE, KhanUtil.GREEN];
        var points = this.points = _.map(coords, function (segmentCoords, segmentIndex) {
            var segmentPoints = _.map(segmentCoords, function (coord, i) {
                return Interactive2.addMovablePoint(graphie, {
                    coord: coord,
                    constraints: [Interactive2.MovablePoint.constraints.bound(), Interactive2.MovablePoint.constraints.snap(), function (coord) {
                        if (!segmentPoints) {
                            // points hasn't been defined yet because
                            // we're still creating them
                            return;
                        }
                        return !kpoint.equal(coord, segmentPoints[1 - i].coord());
                    }],
                    onMove: function onMove() {
                        var graph = _.extend({}, _this5.props.graph, {
                            coords: _.map(_this5.points, function (segment) {
                                return _.invoke(segment, "coord");
                            })
                        });
                        _this5.props.onChange({ graph: graph });
                    },
                    normalStyle: {
                        stroke: segmentColors[segmentIndex],
                        fill: segmentColors[segmentIndex]
                    }
                });
            });
            return segmentPoints;
        });

        var lines = this.lines = _.map(points, function (segmentPoints, segmentIndex) {
            return Interactive2.addMovableLine(graphie, {
                points: segmentPoints,
                static: true,
                extendLine: true,
                normalStyle: {
                    stroke: segmentColors[segmentIndex]
                }
            });
        });
    },

    removeLinearSystemControls: function removeLinearSystemControls() {
        _.invoke(this.lines, "remove");
        _.map(this.points, function (segment) {
            return _.invoke(segment, "remove");
        });
    },

    isCoordInTrash: function isCoordInTrash(coord) {
        var graphie = this.graphie;
        var screenPoint = graphie.scalePoint(coord);
        return screenPoint[0] >= graphie.xpixels - 40 && screenPoint[1] >= graphie.ypixels - 40;
    },

    createPointForPointsType: function createPointForPointsType(coord, i) {
        var self = this;
        var graphie = self.graphie;
        var point = Interactive2.addMovablePoint(graphie, {
            coord: coord,
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            constraints: [Interactive2.MovablePoint.constraints.bound(), Interactive2.MovablePoint.constraints.snap(), function (coord) {
                // TODO(jack): There ought to be a
                // MovablePoint.constraints.avoid
                // default that lets you do things like this
                return _.all(self.points, function (pt) {
                    return point === pt || !kpoint.equal(coord, pt.coord());
                });
            }],
            onMoveStart: function onMoveStart() {
                if (self.isClickToAddPoints()) {
                    self.setTrashCanVisibility(1);
                }
            },
            onMove: self.updateCoordsFromPoints,
            onMoveEnd: function onMoveEnd(coord) {
                if (self.isClickToAddPoints()) {
                    if (self.isCoordInTrash(coord)) {
                        // remove this point from points
                        self.points = _.filter(self.points, function (pt) {
                            return pt !== point;
                        });
                        // update the correct answer box
                        self.updateCoordsFromPoints();

                        // remove this movablePoint from graphie.
                        // we wait to do this until we're not inside of
                        // said point's onMoveEnd method so its state is
                        // consistent throughout this method call
                        setTimeout(point.remove.bind(point), 0);
                    }
                    // In case we mouseup'd off the graphie and that
                    // stopped the move (in which case, we might not
                    // be in isCoordInTrash()
                    self.setTrashCanVisibility(0.5);
                }
            },
            normalStyle: {
                stroke: KhanUtil.INTERACTIVE,
                fill: KhanUtil.INTERACTIVE
            }
        });

        return point;
    },

    removePoint: function removePoint(point) {
        var index = null;
        this.points = _.filter(this.points, function (pt, i) {
            if (pt === point) {
                index = i;
                return false;
            } else {
                return true;
            }
        });
        return index;
    },

    createPointForPolygonType: function createPointForPolygonType(coord, i) {
        var _this6 = this;

        var self = this;
        var graphie = this.graphie;

        // TODO(alex): check against "grid" instead, use constants
        var snapToGrid = !_.contains(["angles", "sides"], this.props.graph.snapTo);

        var point = graphie.addMovablePoint(_.extend({
            coord: coord,
            normalStyle: {
                stroke: KhanUtil.INTERACTIVE,
                fill: KhanUtil.INTERACTIVE
            }
        }, snapToGrid ? {
            snapX: graphie.snap[0],
            snapY: graphie.snap[1]
        } : {}));

        // Index relative to current point -> absolute index
        // NOTE: This does not work when isClickToAddPoints() == true,
        // as `i` can be changed by dragging a point to the trash
        // Currently this function is only called when !isClickToAddPoints()
        function rel(j) {
            return (i + j + self.points.length) % self.points.length;
        }

        point.hasMoved = false;

        point.onMove = function (x, y) {
            var coords = _.pluck(_this6.points, "coord");
            coords[i] = [x, y];
            if (!kpoint.equal([x, y], point.coord)) {
                point.hasMoved = true;
            }

            // Check for invalid positioning, but only if we aren't adding
            // points one click at a time, since those added points could
            // have already violated these constraints
            if (!self.isClickToAddPoints()) {
                // Polygons can't have consecutive collinear points
                if (collinear(coords[rel(-2)], coords[rel(-1)], coords[i]) || collinear(coords[rel(-1)], coords[i], coords[rel(1)]) || collinear(coords[i], coords[rel(1)], coords[rel(2)])) {
                    return false;
                }

                var segments = _.zip(coords, rotate(coords));

                if (self.points.length > 3) {
                    // Constrain to simple (non self-intersecting) polygon by
                    // testing whether adjacent segments intersect any others
                    for (var j = -1; j <= 0; j++) {
                        var segment = segments[rel(j)];
                        var others = _.without(segments, segment, segments[rel(j - 1)], segments[rel(j + 1)]);

                        for (var k = 0; k < others.length; k++) {
                            var other = others[k];
                            if (intersects(segment, other)) {
                                return false;
                            }
                        }
                    }
                }
            }

            if (_this6.props.graph.snapTo === "angles" && self.points.length > 2) {
                // Snap to whole degree interior angles

                var angles = _.map(angleMeasures(coords), function (rad) {
                    return rad * 180 / Math.PI;
                });

                _.each([-1, 1], function (j) {
                    angles[rel(j)] = Math.round(angles[rel(j)]);
                });

                var getAngle = function getAngle(a, vertex, b) {
                    var angle = KhanUtil.findAngle(coords[rel(a)], coords[rel(b)], coords[rel(vertex)]);
                    return (angle + 360) % 360;
                };

                var innerAngles = [angles[rel(-1)] - getAngle(-2, -1, 1), angles[rel(1)] - getAngle(-1, 1, 2)];
                innerAngles[2] = 180 - (innerAngles[0] + innerAngles[1]);

                // Avoid degenerate triangles
                if (_.any(innerAngles, function (angle) {
                    return leq(angle, 1);
                })) {
                    return false;
                }

                var knownSide = magnitude(vector(coords[rel(-1)], coords[rel(1)]));

                var onLeft = sign(ccw(coords[rel(-1)], coords[rel(1)], coords[i])) === 1;

                // Solve for side by using the law of sines
                var side = Math.sin(innerAngles[1] * Math.PI / 180) / Math.sin(innerAngles[2] * Math.PI / 180) * knownSide;

                var outerAngle = KhanUtil.findAngle(coords[rel(1)], coords[rel(-1)]);

                var offset = _this6.graphie.polar(side, outerAngle + (onLeft ? 1 : -1) * innerAngles[0]);

                return _this6.graphie.addPoints(coords[rel(-1)], offset);
            } else if (_this6.props.graph.snapTo === "sides" && self.points.length > 1) {
                // Snap to whole unit side measures

                var sides = _.map([[coords[rel(-1)], coords[i]], [coords[i], coords[rel(1)]], [coords[rel(-1)], coords[rel(1)]]], function (coords) {
                    return magnitude(vector.apply(null, coords));
                });

                _.each([0, 1], function (j) {
                    sides[j] = Math.round(sides[j]);
                });

                // Avoid degenerate triangles
                if (leq(sides[1] + sides[2], sides[0]) || leq(sides[0] + sides[2], sides[1]) || leq(sides[0] + sides[1], sides[2])) {
                    return false;
                }

                // Solve for angle by using the law of cosines
                var innerAngle = lawOfCosines(sides[0], sides[2], sides[1]);

                var outerAngle = KhanUtil.findAngle(coords[rel(1)], coords[rel(-1)]);

                var onLeft = sign(ccw(coords[rel(-1)], coords[rel(1)], coords[i])) === 1;

                var offset = _this6.graphie.polar(sides[0], outerAngle + (onLeft ? 1 : -1) * innerAngle);

                return _this6.graphie.addPoints(coords[rel(-1)], offset);
            } else {
                // Snap to grid (already done)
                return true;
            }
        };

        if (self.isClickToAddPoints()) {
            point.onMoveEnd = function (x, y) {
                if (self.isCoordInTrash([x, y])) {
                    // remove this point from points
                    var index = self.removePoint(point);
                    if (self.polygon.closed) {
                        self.points = rotate(self.points, index);
                        self.polygon.closed = false;
                    }
                    self.polygon.points = self.points;
                    self.updatePolygon();
                    // the polygon is now unclosed, so we need to
                    // remove any points props
                    self.clearCoords();

                    // remove this movablePoint from graphie.
                    // we wait to do this until we're not inside of
                    // said point's onMoveEnd method so its state is
                    // consistent throughout this method call
                    setTimeout(point.remove.bind(point), 0);
                } else if (self.points.length > 1 && (point === self.points[0] && kpoint.equal([x, y], _.last(self.points).coord) || point === _.last(self.points) && kpoint.equal([x, y], self.points[0].coord))) {
                    // Join endpoints
                    var pointToRemove = self.points.pop();
                    if (self.points.length > 2) {
                        self.polygon.closed = true;
                        self.updateCoordsFromPoints();
                    } else {
                        self.polygon.closed = false;
                        self.clearCoords();
                    }
                    self.updatePolygon();
                    // remove this movablePoint from graphie.
                    // we wait to do this until we're not inside of
                    // said point's onMoveEnd method so its state is
                    // consistent throughout this method call
                    setTimeout(pointToRemove.remove.bind(pointToRemove), 0);
                } else {
                    var shouldRemove = _.any(self.points, function (pt) {
                        return pt !== point && kpoint.equal(pt.coord, [x, y]);
                    });
                    if (shouldRemove) {
                        self.removePoint(point);
                        self.polygon.points = self.points;
                        if (self.points.length < 3) {
                            self.polygon.closed = false;
                            self.clearCoords();
                        } else if (self.polygon.closed) {
                            self.updateCoordsFromPoints();
                        }
                        self.updatePolygon();
                        // remove this movablePoint from graphie.
                        // we wait to do this until we're not inside of
                        // said point's onMoveEnd method so its state is
                        // consistent throughout this method call
                        setTimeout(point.remove.bind(point), 0);
                    }
                }
                // In case we mouseup'd off the graphie and that
                // stopped the move
                self.setTrashCanVisibility(0.5);
                return true;
            };
        }

        point.isTouched = false;
        $(point.mouseTarget[0]).on("vmousedown", function () {
            if (self.isClickToAddPoints()) {
                self.setTrashCanVisibility(1);
            }
            point.isTouched = true;
        });

        $(point.mouseTarget[0]).on("vmouseup", function () {
            if (self.isClickToAddPoints()) {
                self.setTrashCanVisibility(0.5);
            }
            // If this was
            //  * a click on the first or last point
            //  * and not a drag,
            //  * and our polygon is not closed,
            //  * and we can close it (we need at least 3 points),
            // then close it
            if ((point === _this6.points[0] || point === _.last(_this6.points)) && point.isTouched && !point.hasMoved && !_this6.polygon.closed && _this6.points.length > 2) {
                _this6.polygon.closed = true;
                _this6.updatePolygon();
                // We finally have a closed polygon, so save our
                // points to props
                _this6.updateCoordsFromPoints();
            }
            point.isTouched = false;
            point.hasMoved = false;
        });

        $(point).on("move", function () {
            _this6.polygon.transform();
            if (_this6.polygon.closed) {
                _this6.updateCoordsFromPoints();
            }
        });

        return point;
    },

    updateCoordsFromPoints: function updateCoordsFromPoints() {
        var graph = _.extend({}, this.props.graph, {
            // Handle old movable points with .coord, or
            // Interactive2.MovablePoint's with .coord()
            coords: _.map(this.points, function (point) {
                return _.result(point, "coord");
            })
        });
        this.props.onChange({ graph: graph });
    },

    clearCoords: function clearCoords() {
        var graph = _.extend({}, this.props.graph, {
            coords: null
        });
        this.props.onChange({ graph: graph });
    },

    addPointControls: function addPointControls() {
        var coords = InteractiveGraph.getPointCoords(this.props.graph, this.props);
        // Clear out our old points so that newly added points don't
        // "collide" with them and reposition when being added
        // Without this, when added, each point checks whether it is on top
        // of a point in this.points, which (a) shouldn't matter since
        // we're clearing out this.points anyways, and (b) can cause problems
        // if each of this.points is a MovablePoint instead of an
        // Interactive2.MovablePoint, since one has a .coord and the other
        // has .coord()
        // TODO(jack): Figure out a better way to do this
        this.points = [];
        this.points = _.map(coords, this.createPointForPointsType, this);
    },

    removePointControls: function removePointControls() {
        _.invoke(this.points, "remove");
    },

    addSegmentControls: function addSegmentControls() {
        var self = this;
        var graphie = this.graphie;

        var coords = InteractiveGraph.getSegmentCoords(this.props.graph, this.props);

        this.points = [];
        this.lines = _.map(coords, function (segment, i) {
            var updateCoordProps = function updateCoordProps() {
                var graph = _.extend({}, self.props.graph, {
                    coords: _.invoke(self.lines, "coords")
                });
                self.props.onChange({ graph: graph });
            };

            var points = _.map(segment, function (coord, i) {
                return Interactive2.addMovablePoint(graphie, {
                    coord: coord,
                    normalStyle: {
                        stroke: KhanUtil.INTERACTIVE,
                        fill: KhanUtil.INTERACTIVE
                    },
                    constraints: [Interactive2.MovablePoint.constraints.bound(), Interactive2.MovablePoint.constraints.snap(), function (coord) {
                        if (!points) {
                            // points hasn't been defined yet because
                            // we're still creating them
                            return;
                        }
                        return !kpoint.equal(coord, points[1 - i].coord());
                    }],
                    onMove: updateCoordProps
                });
            });

            self.points = self.points.concat(points);
            var line = Interactive2.addMovableLine(graphie, {
                points: points,
                static: false,
                updatePoints: true,
                constraints: [Interactive2.MovableLine.constraints.bound(), Interactive2.MovableLine.constraints.snap()],
                onMove: updateCoordProps,
                normalStyle: {
                    stroke: KhanUtil.INTERACTIVE
                },
                highlightStyle: {
                    stroke: KhanUtil.INTERACTING
                }
            });
            _.invoke(points, "toFront");

            return line;
        }, this);
    },

    removeSegmentControls: function removeSegmentControls() {
        _.invoke(this.points, "remove");
        _.invoke(this.lines, "remove");
    },

    addRayControls: function addRayControls() {
        this.addLine("ray");
    },

    removeRayControls: function removeRayControls() {
        this.removeLine();
    },

    addPolygonControls: function addPolygonControls() {
        this.polygon = null;
        var coords = InteractiveGraph.getPolygonCoords(this.props.graph, this.props);
        this.points = _.map(coords, this.createPointForPolygonType);
        this.updatePolygon();
    },

    updatePolygon: function updatePolygon() {
        var _this7 = this;

        var closed;
        if (this.polygon) {
            closed = this.polygon.closed;
        } else if (this.points.length >= 3) {
            closed = true;
        } else {
            // There will only be fewer than 3 points in click-to-add-vertices
            // mode, so we don't need to explicitly check for that here.
            closed = false;
        }

        if (this.polygon) {
            this.polygon.remove();
        }

        var graphie = this.graphie;
        var n = this.points.length;

        // TODO(alex): check against "grid" instead, use constants
        var snapToGrid = !_.contains(["angles", "sides"], this.props.graph.snapTo);

        var angleLabels = _.times(n, function (i) {
            if (!this.props.graph.showAngles || !closed && (i === 0 || i === n - 1)) {
                return "";
            } else if (this.props.graph.snapTo === "angles") {
                return "$deg0";
            } else {
                return "$deg1";
            }
        }, this);

        var showRightAngleMarkers = _.times(n, function (i) {
            return closed || i !== 0 && i !== n - 1;
        }, this);

        var numArcs = _.times(n, function (i) {
            if (this.props.graph.showAngles && (closed || i !== 0 && i !== n - 1)) {
                return 1;
            } else {
                return 0;
            }
        }, this);

        var sideLabels = _.times(n, function (i) {
            if (!this.props.graph.showSides || !closed && i === n - 1) {
                return "";
            } else if (this.props.graph.snapTo === "sides") {
                return "$len0";
            } else {
                return "$len1";
            }
        }, this);

        this.polygon = graphie.addMovablePolygon(_.extend({
            closed: closed,
            points: this.points,
            angleLabels: angleLabels,
            showRightAngleMarkers: showRightAngleMarkers,
            numArcs: numArcs,
            sideLabels: sideLabels,
            updateOnPointMove: false
        }, snapToGrid ? {
            snapX: graphie.snap[0],
            snapY: graphie.snap[1]
        } : {}));

        $(this.polygon).on("move", function () {
            if (_this7.polygon.closed) {
                _this7.updateCoordsFromPoints();
            }
        });
    },

    removePolygonControls: function removePolygonControls() {
        _.invoke(this.points, "remove");
        this.polygon.remove();
    },

    addAngleControls: function addAngleControls() {
        var _this8 = this;

        var graphie = this.graphie;

        var coords = InteractiveGraph.getAngleCoords(this.props.graph, this.props);

        // The vertex snaps to the grid, but the rays don't...
        this.points = _.map(coords, function (coord, i) {
            return graphie.addMovablePoint(_.extend({
                coord: coord,
                normalStyle: {
                    stroke: KhanUtil.INTERACTIVE,
                    fill: KhanUtil.INTERACTIVE
                }
            }, i === 1 ? {
                snapX: graphie.snap[0],
                snapY: graphie.snap[1]
            } : {}));
        });

        // ...they snap to whole-degree angles from the vertex.
        this.angle = graphie.addMovableAngle({
            points: this.points,
            snapDegrees: this.props.graph.snapDegrees || 1,
            snapOffsetDeg: this.props.graph.angleOffsetDeg || 0,
            angleLabel: this.props.graph.showAngles ? "$deg0" : "",
            pushOut: 2,
            allowReflex: defaultVal(this.props.graph.allowReflexAngles, true)
        });

        $(this.angle).on("move", function () {
            var graph = _.extend({}, _this8.props.graph, {
                coords: _this8.angle.getClockwiseCoords()
            });
            _this8.props.onChange({ graph: graph });
        });
    },

    removeAngleControls: function removeAngleControls() {
        _.invoke(this.points, "remove");
        this.angle.remove();
    },

    toggleShowAngles: function toggleShowAngles() {
        var graph = _.extend({}, this.props.graph, {
            showAngles: !this.props.graph.showAngles
        });
        this.props.onChange({ graph: graph });
    },

    toggleShowSides: function toggleShowSides() {
        var graph = _.extend({}, this.props.graph, {
            showSides: !this.props.graph.showSides
        });
        this.props.onChange({ graph: graph });
    },

    toJSON: function toJSON() {
        return this.props.graph;
    },

    simpleValidate: function simpleValidate(rubric) {
        return InteractiveGraph.validate(this.toJSON(), rubric, this);
    },

    focus: $.noop,

    statics: {
        displayMode: "block"
    }
});

_.extend(InteractiveGraph, {
    getQuadraticCoefficients: function getQuadraticCoefficients(coords) {
        var p1 = coords[0];
        var p2 = coords[1];
        var p3 = coords[2];

        var denom = (p1[0] - p2[0]) * (p1[0] - p3[0]) * (p2[0] - p3[0]);
        if (denom === 0) {
            return;
        }
        var a = (p3[0] * (p2[1] - p1[1]) + p2[0] * (p1[1] - p3[1]) + p1[0] * (p3[1] - p2[1])) / denom;
        var b = (p3[0] * p3[0] * (p1[1] - p2[1]) + p2[0] * p2[0] * (p3[1] - p1[1]) + p1[0] * p1[0] * (p2[1] - p3[1])) / denom;
        var c = (p2[0] * p3[0] * (p2[0] - p3[0]) * p1[1] + p3[0] * p1[0] * (p3[0] - p1[0]) * p2[1] + p1[0] * p2[0] * (p1[0] - p2[0]) * p3[1]) / denom;
        return [a, b, c];
    },

    getSinusoidCoefficients: function getSinusoidCoefficients(coords) {
        // It's assumed that p1 is the root and p2 is the first peak
        var p1 = coords[0];
        var p2 = coords[1];

        // Resulting coefficients are canonical for this sine curve
        var amplitude = p2[1] - p1[1];
        var angularFrequency = Math.PI / (2 * (p2[0] - p1[0]));
        var phase = p1[0] * angularFrequency;
        var verticalOffset = p1[1];

        return [amplitude, angularFrequency, phase, verticalOffset];
    },

    /**
     * @param {object} graph Like props.graph or props.correct
     * @param {object} props of an InteractiveGraph instance
     */
    getLineCoords: function getLineCoords(graph, props) {
        return graph.coords || InteractiveGraph.pointsFromNormalized(props, [[0.25, 0.75], [0.75, 0.75]]);
    },

    /**
     * @param {object} graph Like props.graph or props.correct
     * @param {object} props of an InteractiveGraph instance
     */
    getPointCoords: function getPointCoords(graph, props) {
        var numPoints = graph.numPoints || 1;
        var coords = graph.coords;

        if (coords) {
            return coords;
        } else {
            switch (numPoints) {
                case 1:
                    // Back in the day, one point's coords were in graph.coord
                    coords = [graph.coord || [0, 0]];
                    break;
                case 2:
                    coords = [[-5, 0], [5, 0]];
                    break;
                case 3:
                    coords = [[-5, 0], [0, 0], [5, 0]];
                    break;
                case 4:
                    coords = [[-6, 0], [-2, 0], [2, 0], [6, 0]];
                    break;
                case 5:
                    coords = [[-6, 0], [-3, 0], [0, 0], [3, 0], [6, 0]];
                    break;
                case 6:
                    coords = [[-5, 0], [-3, 0], [-1, 0], [1, 0], [3, 0], [5, 0]];
                    break;
                case UNLIMITED:
                    coords = [];
                    break;
            }
            // Transform coords from their -10 to 10 space to 0 to 1
            // because of the old graph.coord, and also it's easier.
            var range = [[-10, 10], [-10, 10]];
            coords = InteractiveGraph.normalizeCoords(coords, range);

            var coords = InteractiveGraph.pointsFromNormalized(props, coords);
            return coords;
        }
    },

    /**
     * @param {object} graph Like props.graph or props.correct
     * @param {object} props of an InteractiveGraph instance
     */
    getLinearSystemCoords: function getLinearSystemCoords(graph, props) {
        return graph.coords || _.map([[[0.25, 0.75], [0.75, 0.75]], [[0.25, 0.25], [0.75, 0.25]]], function (coords) {
            return InteractiveGraph.pointsFromNormalized(props, coords);
        });
    },

    /**
     * @param {object} graph Like props.graph or props.correct
     * @param {object} props of an InteractiveGraph instance
     */
    getPolygonCoords: function getPolygonCoords(graph, props) {
        var coords = graph.coords;
        if (coords) {
            return coords;
        }

        var n = graph.numSides || 3;

        if (n === UNLIMITED) {
            coords = [];
        } else {
            var angle = 2 * Math.PI / n;
            var offset = (1 / n - 1 / 2) * Math.PI;

            // TODO(alex): Generalize this to more than just triangles so that
            // all polygons have whole number side lengths if snapping to sides
            var radius = graph.snapTo === "sides" ? Math.sqrt(3) / 3 * 7 : 4;

            // Generate coords of a regular polygon with n sides
            coords = _.times(n, function (i) {
                return [radius * Math.cos(i * angle + offset), radius * Math.sin(i * angle + offset)];
            });
        }

        var range = [[-10, 10], [-10, 10]];
        coords = InteractiveGraph.normalizeCoords(coords, range);

        var snapToGrid = !_.contains(["angles", "sides"], graph.snapTo);
        coords = InteractiveGraph.pointsFromNormalized(props, coords,
        /* noSnap */!snapToGrid);

        return coords;
    },

    /**
     * @param {object} graph Like props.graph or props.correct
     * @param {object} props of an InteractiveGraph instance
     */
    getSegmentCoords: function getSegmentCoords(graph, props) {
        var coords = graph.coords;
        if (coords) {
            return coords;
        }

        var n = graph.numSegments || 1;
        var ys = {
            1: [5],
            2: [5, -5],
            3: [5, 0, -5],
            4: [6, 2, -2, -6],
            5: [6, 3, 0, -3, -6],
            6: [5, 3, 1, -1, -3, -5]
        }[n];
        var range = [[-10, 10], [-10, 10]];

        return _.map(ys, function (y) {
            var segment = [[-5, y], [5, y]];
            segment = InteractiveGraph.normalizeCoords(segment, range);
            segment = InteractiveGraph.pointsFromNormalized(props, segment);
            return segment;
        });
    },

    /**
     * @param {object} graph Like props.graph or props.correct
     * @param {object} props of an InteractiveGraph instance
     */
    getAngleCoords: function getAngleCoords(graph, props) {
        var coords = graph.coords;
        if (coords) {
            return coords;
        }

        var snap = graph.snapDegrees || 1;
        var angle = snap;
        while (angle < 20) {
            angle += snap;
        }
        angle = angle * Math.PI / 180;
        var offset = (graph.angleOffsetDeg || 0) * Math.PI / 180;

        coords = InteractiveGraph.pointsFromNormalized(props, [[0.85, 0.50], [0.5, 0.50]]);

        var radius = magnitude(vector.apply(null, coords));

        // Adjust the lower point by angleOffsetDeg degrees
        coords[0] = [coords[1][0] + radius * Math.cos(offset), coords[1][1] + radius * Math.sin(offset)];
        // Position the upper point angle radians from the
        // lower point
        coords[2] = [coords[1][0] + radius * Math.cos(angle + offset), coords[1][1] + radius * Math.sin(angle + offset)];

        return coords;
    },

    normalizeCoords: function normalizeCoords(coordsList, range) {
        return _.map(coordsList, function (coords) {
            return _.map(coords, function (coord, i) {
                var extent = range[i][1] - range[i][0];
                return (coord + range[i][1]) / extent;
            });
        });
    },

    getEquationString: function getEquationString(props) {
        var type = props.graph.type;
        var funcName = "get" + capitalize(type) + "EquationString";
        return InteractiveGraph[funcName](props);
    },

    pointsFromNormalized: function pointsFromNormalized(props, coordsList, noSnap) {
        return _.map(coordsList, function (coords) {
            return _.map(coords, function (coord, i) {
                var range = props.range[i];
                if (noSnap) {
                    return range[0] + (range[1] - range[0]) * coord;
                } else {
                    var step = props.step[i];
                    var nSteps = numSteps(range, step);
                    var tick = Math.round(coord * nSteps);
                    return range[0] + step * tick;
                }
            });
        });
    },

    getLinearEquationString: function getLinearEquationString(props) {
        var coords = InteractiveGraph.getLineCoords(props.graph, props);
        if (eq(coords[0][0], coords[1][0])) {
            return "x = " + coords[0][0].toFixed(3);
        } else {
            var m = (coords[1][1] - coords[0][1]) / (coords[1][0] - coords[0][0]);
            var b = coords[0][1] - m * coords[0][0];
            if (eq(m, 0)) {
                return "y = " + b.toFixed(3);
            } else {
                return "y = " + m.toFixed(3) + "x + " + b.toFixed(3);
            }
        }
    },

    getCurrentQuadraticCoefficients: function getCurrentQuadraticCoefficients(props) {
        // TODO(alpert): Don't duplicate
        var coords = props.graph.coords || InteractiveGraph.defaultQuadraticCoords(props);
        return InteractiveGraph.getQuadraticCoefficients(coords);
    },

    defaultQuadraticCoords: function defaultQuadraticCoords(props) {
        var coords = [[0.25, 0.75], [0.5, 0.25], [0.75, 0.75]];
        return InteractiveGraph.pointsFromNormalized(props, coords);
    },

    getQuadraticEquationString: function getQuadraticEquationString(props) {
        var coeffs = InteractiveGraph.getCurrentQuadraticCoefficients(props);
        return "y = " + coeffs[0].toFixed(3) + "x^2 + " + coeffs[1].toFixed(3) + "x + " + coeffs[2].toFixed(3);
    },

    getCurrentSinusoidCoefficients: function getCurrentSinusoidCoefficients(props) {
        var coords = props.graph.coords || InteractiveGraph.defaultSinusoidCoords(props);
        return InteractiveGraph.getSinusoidCoefficients(coords);
    },

    defaultSinusoidCoords: function defaultSinusoidCoords(props) {
        var coords = [[0.5, 0.5], [0.65, 0.60]];
        return InteractiveGraph.pointsFromNormalized(props, coords);
    },

    getSinusoidEquationString: function getSinusoidEquationString(props) {
        var coeffs = InteractiveGraph.getCurrentSinusoidCoefficients(props);
        return "y = " + coeffs[0].toFixed(3) + "sin(" + coeffs[1].toFixed(3) + "x - " + coeffs[2].toFixed(3) + ") + " + coeffs[3].toFixed(3);
    },

    getCircleEquationString: function getCircleEquationString(props) {
        var graph = props.graph;
        // TODO(alpert): Don't duplicate
        var center = graph.center || [0, 0];
        var radius = graph.radius || 2;
        return "center (" + center[0] + ", " + center[1] + "), radius " + radius;
    },

    getLinearSystemEquationString: function getLinearSystemEquationString(props) {
        var coords = InteractiveGraph.getLinearSystemCoords(props.graph, props);
        return "\n" + getLineEquation(coords[0][0], coords[0][1]) + "\n" + getLineEquation(coords[1][0], coords[1][1]) + "\n" + getLineIntersection(coords[0], coords[1]);
    },

    getPointEquationString: function getPointEquationString(props) {
        var coords = InteractiveGraph.getPointCoords(props.graph, props);
        return coords.map(function (coord) {
            return "(" + coord[0] + ", " + coord[1] + ")";
        }).join(", ");
    },

    getSegmentEquationString: function getSegmentEquationString(props) {
        var segments = InteractiveGraph.getSegmentCoords(props.graph, props);
        return _.map(segments, function (segment) {
            return "[" + _.map(segment, function (coord) {
                return "(" + coord.join(", ") + ")";
            }).join(" ") + "]";
        }).join(" ");
    },

    getRayEquationString: function getRayEquationString(props) {
        var coords = InteractiveGraph.getLineCoords(props.graph, props);
        var a = coords[0];
        var b = coords[1];
        var eq = InteractiveGraph.getLinearEquationString(props);

        if (a[0] > b[0]) {
            eq += " (for x <= " + a[0].toFixed(3) + ")";
        } else if (a[0] < b[0]) {
            eq += " (for x >= " + a[0].toFixed(3) + ")";
        } else if (a[1] > b[1]) {
            eq += " (for y <= " + a[1].toFixed(3) + ")";
        } else {
            eq += " (for y >= " + a[1].toFixed(3) + ")";
        }

        return eq;
    },

    getPolygonEquationString: function getPolygonEquationString(props) {
        var coords = InteractiveGraph.getPolygonCoords(props.graph, props);
        return _.map(coords, function (coord) {
            return "(" + coord.join(", ") + ")";
        }).join(" ");
    },

    getAngleEquationString: function getAngleEquationString(props) {
        var coords = InteractiveGraph.getAngleCoords(props.graph, props);
        var angle = KhanUtil.findAngle(coords[2], coords[0], coords[1]);
        return angle.toFixed(0) + "\xB0 angle" + " at (" + coords[1].join(", ") + ")";
    },

    validate: function validate(state, rubric, component) {
        // TODO(alpert): Because this.props.graph doesn't always have coords,
        // check that .coords exists here, which is always true when something
        // has moved
        if (state.type === rubric.correct.type && state.coords) {
            if (state.type === "linear") {
                var guess = state.coords;
                var correct = rubric.correct.coords;
                // If both of the guess points are on the correct line, it's
                // correct.
                if (collinear(correct[0], correct[1], guess[0]) && collinear(correct[0], correct[1], guess[1])) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "linear-system") {
                var guess = state.coords;
                var correct = rubric.correct.coords;

                if (collinear(correct[0][0], correct[0][1], guess[0][0]) && collinear(correct[0][0], correct[0][1], guess[0][1]) && collinear(correct[1][0], correct[1][1], guess[1][0]) && collinear(correct[1][0], correct[1][1], guess[1][1]) || collinear(correct[0][0], correct[0][1], guess[1][0]) && collinear(correct[0][0], correct[0][1], guess[1][1]) && collinear(correct[1][0], correct[1][1], guess[0][0]) && collinear(correct[1][0], correct[1][1], guess[0][1])) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "quadratic") {
                // If the parabola coefficients match, it's correct.
                var guessCoeffs = this.getQuadraticCoefficients(state.coords);
                var correctCoeffs = this.getQuadraticCoefficients(rubric.correct.coords);
                if (deepEq(guessCoeffs, correctCoeffs)) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "sinusoid") {
                var guessCoeffs = this.getSinusoidCoefficients(state.coords);
                var correctCoeffs = this.getSinusoidCoefficients(rubric.correct.coords);

                var canonicalGuessCoeffs = canonicalSineCoefficients(guessCoeffs);
                var canonicalCorrectCoeffs = canonicalSineCoefficients(correctCoeffs);
                // If the canonical coefficients match, it's correct.
                if (deepEq(canonicalGuessCoeffs, canonicalCorrectCoeffs)) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "circle") {
                if (deepEq(state.center, rubric.correct.center) && eq(state.radius, rubric.correct.radius)) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "point") {
                var guess = state.coords;
                var correct = InteractiveGraph.getPointCoords(rubric.correct, component);
                guess = guess.slice();
                correct = correct.slice();
                // Everything's already rounded so we shouldn't need to do an
                // eq() comparison but _.isEqual(0, -0) is false, so we'll use
                // eq() anyway. The sort should be fine because it'll stringify
                // it and -0 converted to a string is "0"
                guess.sort();
                correct.sort();
                if (deepEq(guess, correct)) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "polygon") {
                var guess = state.coords.slice();
                var correct = rubric.correct.coords.slice();

                var match;
                if (rubric.correct.match === "similar") {
                    match = similar(guess, correct, Number.POSITIVE_INFINITY);
                } else if (rubric.correct.match === "congruent") {
                    match = similar(guess, correct, knumber.DEFAULT_TOLERANCE);
                } else if (rubric.correct.match === "approx") {
                    match = similar(guess, correct, 0.1);
                } else {
                    /* exact */
                    guess.sort();
                    correct.sort();
                    match = deepEq(guess, correct);
                }

                if (match) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "segment") {
                var guess = state.coords.slice();
                var correct = rubric.correct.coords.slice();
                guess = _.invoke(guess, "sort").sort();
                correct = _.invoke(correct, "sort").sort();
                if (deepEq(guess, correct)) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "ray") {
                var guess = state.coords;
                var correct = rubric.correct.coords;
                if (deepEq(guess[0], correct[0]) && collinear(correct[0], correct[1], guess[1])) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            } else if (state.type === "angle") {
                var guess = state.coords;
                var correct = rubric.correct.coords;

                var match;
                if (rubric.correct.match === "congruent") {
                    var angles = _.map([guess, correct], function (coords) {
                        var angle = KhanUtil.findAngle(coords[2], coords[0], coords[1]);
                        return (angle + 360) % 360;
                    });
                    match = eq.apply(null, angles);
                } else {
                    /* exact */
                    match = deepEq(guess[1], correct[1]) && collinear(correct[1], correct[0], guess[0]) && collinear(correct[1], correct[2], guess[2]);
                }

                if (match) {
                    return {
                        type: "points",
                        earned: 1,
                        total: 1,
                        message: null
                    };
                }
            }
        }

        // The input wasn't correct, so check if it's a blank input or if it's
        // actually just wrong
        if (!state.coords || _.isEqual(state, rubric.graph)) {
            // We're where we started.
            return {
                type: "invalid",
                message: null
            };
        } else {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }
    }
});

var InteractiveGraphEditor = React.createClass({
    displayName: "InteractiveGraphEditor",

    className: "perseus-widget-interactive-graph",

    getDefaultProps: function getDefaultProps() {
        var range = [[-10, 10], [-10, 10]];
        var step = [1, 1];
        var gridStep = Util.getGridStep(range, step, defaultEditorBoxSize);
        var snapStep = Util.snapStepFromGridStep(gridStep);
        return {
            box: [defaultEditorBoxSize, defaultEditorBoxSize],
            labels: ["x", "y"],
            range: range,
            step: step,
            gridStep: gridStep,
            snapStep: snapStep,
            valid: true,
            backgroundImage: defaultBackgroundImage,
            markings: "graph",
            showProtractor: false,
            showRuler: false,
            rulerLabel: "",
            rulerTicks: 10,
            correct: {
                type: "linear",
                coords: null
            }
        };
    },

    mixins: [DeprecationMixin],
    deprecatedProps: deprecatedProps,

    render: function render() {
        var _this9 = this;

        var graph;
        var equationString;

        if (this.props.valid === true) {
            // TODO(jack): send these down all at once
            var graphProps = {
                ref: "graph",
                box: this.props.box,
                range: this.props.range,
                labels: this.props.labels,
                step: this.props.step,
                gridStep: this.props.gridStep,
                snapStep: this.props.snapStep,
                graph: this.props.correct,
                backgroundImage: this.props.backgroundImage,
                markings: this.props.markings,
                showProtractor: this.props.showProtractor,
                showRuler: this.props.showRuler,
                rulerLabel: this.props.rulerLabel,
                rulerTicks: this.props.rulerTicks,
                flexibleType: true,
                onChange: function onChange(newProps) {
                    var correct = _this9.props.correct;
                    if (correct.type === newProps.graph.type) {
                        correct = _.extend({}, correct, newProps.graph);
                    } else {
                        // Clear options from previous graph
                        correct = newProps.graph;
                    }
                    _this9.props.onChange({ correct: correct });
                }
            };
            graph = React.createElement(InteractiveGraph, graphProps);
            equationString = InteractiveGraph.getEquationString(graphProps);
        } else {
            graph = React.createElement(
                "div",
                null,
                this.props.valid
            );
        }

        return React.createElement(
            "div",
            { className: "perseus-widget-interactive-graph" },
            React.createElement(
                "div",
                null,
                "\u6B63\u78BA\u7B54\u6848",
                ' ',
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5C07\u6B63\u78BA\u7B54\u6848\u65BC\u4E0B\u5716\u4E2D\u7E6A\u88FD\u51FA\u4F86\uFF0C\u8ACB\u6CE8\u610F\u6240\u6709\u7684\u51FD\u6578\u5716\u6216\u8CC7\u6599\u9EDE\u9700\u8868\u793A\u51FA\u6B63\u78BA\u7684\u7B54\u6848\u3002"
                    )
                ),
                ' ',
                ": ",
                equationString
            ),
            React.createElement(GraphSettings, {
                box: this.props.box,
                range: this.props.range,
                labels: this.props.labels,
                step: this.props.step,
                gridStep: this.props.gridStep,
                snapStep: this.props.snapStep,
                valid: this.props.valid,
                backgroundImage: this.props.backgroundImage,
                markings: this.props.markings,
                showProtractor: this.props.showProtractor,
                showRuler: this.props.showRuler,
                rulerLabel: this.props.rulerLabel,
                rulerTicks: this.props.rulerTicks,
                onChange: this.props.onChange }),
            this.props.correct.type === "polygon" && React.createElement(
                "div",
                { className: "type-settings" },
                React.createElement(
                    "label",
                    null,
                    ' ',
                    "\u5B78\u751F\u7684\u7B54\u6848\u5FC5\u9808\u8981",
                    ' ',
                    React.createElement(
                        "select",
                        {
                            value: this.props.correct.match,
                            onChange: this.changeMatchType },
                        React.createElement(
                            "option",
                            { value: "exact" },
                            "\u5B8C\u5168\u7B26\u5408"
                        ),
                        React.createElement(
                            "option",
                            { value: "congruent" },
                            "\u5168\u7B49"
                        ),
                        React.createElement(
                            "option",
                            { value: "approx" },
                            "\u5927\u81F4\u4E0A\u5168\u7B49"
                        ),
                        React.createElement(
                            "option",
                            { value: "similar" },
                            "\u76F8\u4F3C"
                        )
                    )
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "ul",
                        null,
                        React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "p",
                                null,
                                React.createElement(
                                    "b",
                                    null,
                                    "\u5B8C\u5168\u7B26\u5408:"
                                ),
                                " \u5716\u5F62\u65BC\u7DB2\u683C\u4E0A\u7684\u5927\u5C0F\u3001\u65B9\u5411\u3001\u4F4D\u7F6E\u7686\u9700\u5B8C\u5168\u7B26\u5408\u7B54\u6848\u3002"
                            )
                        ),
                        React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "p",
                                null,
                                React.createElement(
                                    "b",
                                    null,
                                    "\u5168\u7B49:"
                                ),
                                " \u5716\u5F62\u7684\u5927\u5C0F\u548C\u5F62\u72C0\u9700\u8207\u7B54\u6848\u7B26\u5408\uFF0C\u4F46\u5716\u5F62\u65BC\u7DB2\u683C\u4E0A\u7684\u4F4D\u7F6E\u4E26\u7121\u9650\u5236\u3002"
                            )
                        ),
                        React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "p",
                                null,
                                React.createElement(
                                    "b",
                                    null,
                                    "\u5927\u81F4\u4E0A\u5168\u7B49:"
                                ),
                                " \u5716\u5F62\u9700\u8207\u7B54\u6848\u975E\u5E38\u76F8\u4F3C\uFF0C\u5716\u5F62\u7684\u5927\u5C0F\u548C\u5F62\u72C0\u8207\u7B54\u6848\u53EF\u8AA4\u5DEE\u65BC 0.1 \u500B \u7DB2\u683C\u55AE\u4F4D\uFF0C\u4E14\u5716\u5F62\u65BC\u7DB2\u683C\u4E0A\u7684\u4F4D\u7F6E\u4E26\u7121\u9650\u5236\u3002",
                                React.createElement(
                                    "em",
                                    null,
                                    "(\u53EF\u4F7F\u7528\u6B64\u7B54\u6848\u65BC\u5C0D\u9F4A\u89D2\u5EA6\u7684\u9078\u9805)"
                                )
                            )
                        ),
                        React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "p",
                                null,
                                React.createElement(
                                    "b",
                                    null,
                                    "\u76F8\u4F3C:"
                                ),
                                " \u5716\u5F62\u7684\u5167\u89D2\u3001\u908A\u9577\u8207\u7B54\u6848\u5927\u81F4\u76F8\u4F3C\uFF0C\u6216\u662F\u5716\u5F62\u5927\u90E8\u4EFD\u908A\u7684\u6027\u8CEA\u7B26\u5408\u7B54\u6848\uFF0C\u4E14 \u5716\u5F62\u65BC\u7DB2\u683C\u4E0A\u7684\u4F4D\u7F6E\u4E26\u7121\u9650\u5236\u3002"
                            )
                        )
                    )
                )
            ),
            this.props.correct.type === "angle" && React.createElement(
                "div",
                { className: "type-settings" },
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "label",
                        null,
                        ' ',
                        "\u5B78\u751F\u7684\u7B54\u6848\u5FC5\u9808\u8981",
                        ' ',
                        React.createElement(
                            "select",
                            {
                                value: this.props.correct.match,
                                onChange: this.changeMatchType },
                            React.createElement(
                                "option",
                                { value: "exact" },
                                "\u5B8C\u5168\u7B26\u5408"
                            ),
                            React.createElement(
                                "option",
                                { value: "congruent" },
                                "\u5168\u7B49"
                            )
                        )
                    ),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\"\u5B8C\u5168\u7B26\u5408\"\u662F\u6307\u5716\u5F62\u65BC\u7DB2\u683C\u4E0A\u7684\u65B9\u5411\u3001\u4F4D\u7F6E\u7686\u9700\u5B8C\u5168\u7B26\u5408\u7B54\u6848\uFF1B \"\u5168\u7B49\"\u50C5\u8981\u6C42\u89D2\u5EA6\u90E8\u4EFD\u76F8\u540C\u5373\u53EF\u3002"
                        )
                    )
                )
            ),
            graph
        );
    },

    changeMatchType: function changeMatchType(e) {
        var correct = _.extend({}, this.props.correct, {
            match: e.target.value
        });
        this.props.onChange({ correct: correct });
    },

    toJSON: function toJSON() {
        var json = _.pick(this.props, "step", "backgroundImage", "markings", "labels", "showProtractor", "showRuler", "rulerLabel", "rulerTicks", "range", "gridStep", "snapStep");

        var graph = this.refs.graph;
        if (graph) {
            var correct = graph && graph.toJSON();
            _.extend(json, {
                // TODO(alpert): Allow specifying flexibleType (whether the
                // graph type should be a choice or not)
                graph: { type: correct.type },
                correct: correct
            });

            _.each(["allowReflexAngles", "angleOffsetDeg", "numPoints", "numSides", "numSegments", "showAngles", "showSides", "snapTo", "snapDegrees"], function (key) {
                if (_.has(correct, key)) {
                    json.graph[key] = correct[key];
                }
            });
        }
        return json;
    }
});

module.exports = {
    name: "interactive-graph",
    displayName: "Interactive graph/互動式座標圖",
    widget: InteractiveGraph,
    editor: InteractiveGraphEditor,
    hidden: false
};

},{"../components/graph-settings.jsx":253,"../components/graph.jsx":254,"../components/number-input.jsx":261,"../interactive2.js":280,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68}],317:[function(require,module,exports){
"use strict";

var React = require("react");
var ReactDOM = require("react-dom");
var _ = require("underscore");

var InfoTip = require("react-components/js/info-tip.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var Util = require("../util.js");

function eq(x, y) {
    return Math.abs(x - y) < 1e-9;
}

var reverseRel = {
    ge: "le",
    gt: "lt",
    le: "ge",
    lt: "gt"
};

var toggleStrictRel = {
    ge: "gt",
    gt: "ge",
    le: "lt",
    lt: "le"
};

function formatImproper(n, d) {
    if (d === 1) {
        return "" + n;
    } else {
        return n + "/" + d;
    }
}

function formatMixed(n, d) {
    if (n < 0) {
        return "-" + formatMixed(-n, d);
    }
    var w = Math.floor(n / d);
    if (w === 0) {
        return formatImproper(n, d);
    } else if (n - w * d === 0) {
        return "" + w;
    } else {
        return w + "\\:" + formatImproper(n - w * d, d);
    }
}

var InteractiveNumberLine = React.createClass({
    displayName: "InteractiveNumberLine",

    getDefaultProps: function getDefaultProps() {
        return {
            labelStyle: "decimal",
            labelTicks: false,
            isInequality: false,
            pointX: 0,
            rel: "ge"
        };
    },

    isValid: function isValid() {
        return this.props.range[0] < this.props.range[1] && 0 < this.props.tickStep && 0 < this.props.snapDivisions;
    },

    render: function render() {
        var inequalityControls;
        if (this.props.isInequality) {
            inequalityControls = React.createElement(
                "div",
                null,
                React.createElement("input", { type: "button", value: "\u63DB\u65B9\u5411",
                    onClick: this.handleReverse }),
                React.createElement("input", { type: "button",
                    value: this.props.rel === "le" || this.props.rel === "ge" ? "改為空心圓" : "改為實心圓",
                    onClick: this.handleToggleStrict })
            );
        }

        var valid = this.isValid();
        return React.createElement(
            "div",
            { className: "perseus-widget " + "perseus-widget-interactive-number-line" },
            React.createElement("div", { style: { display: valid ? "" : "none" },
                className: "graphie above-scratchpad", ref: "graphieDiv" }),
            React.createElement(
                "div",
                { style: { display: valid ? "none" : "" } },
                ' ',
                "invalid number line configuration",
                ' '
            ),
            inequalityControls
        );
    },

    handleReverse: function handleReverse() {
        this.props.onChange({ rel: reverseRel[this.props.rel] });
    },

    handleToggleStrict: function handleToggleStrict() {
        this.props.onChange({ rel: toggleStrictRel[this.props.rel] });
    },

    componentDidMount: function componentDidMount() {
        this.addGraphie();
    },

    componentDidUpdate: function componentDidUpdate() {
        // Use jQuery to remove so event handlers don't leak
        var node = ReactDOM.findDOMNode(this.refs.graphieDiv);
        $(node).children().remove();

        this.addGraphie();
    },

    _label: function _label(value) {
        var graphie = this.graphie;
        var labelStyle = this.props.labelStyle;

        // TODO(jack): Find out if any exercises have "decimal ticks" set,
        // and if so, re-save them and remove this check.
        if (labelStyle === "decimal" || labelStyle === "decimal ticks") {
            graphie.label([value, -0.53], value, "center");
        } else if (labelStyle === "improper") {
            var frac = KhanUtil.toFraction(value);
            graphie.label([value, -0.53], formatImproper(frac[0], frac[1]), "center");
        } else if (labelStyle === "mixed") {
            var frac = KhanUtil.toFraction(value);
            graphie.label([value, -0.53], formatMixed(frac[0], frac[1]), "center");
        }
    },

    addGraphie: function addGraphie() {
        var _this = this;

        var self = this;
        var graphie = this.graphie = KhanUtil.createGraphie(ReactDOM.findDOMNode(this.refs.graphieDiv));
        // Ensure a sane configuration to avoid infinite loops
        if (!this.isValid()) {
            return;
        }

        var range = this.props.range;
        var tickStep = this.props.tickStep;
        var scale = 400 / (range[1] - range[0]);

        graphie.init({
            range: [[range[0] - 30 / scale, range[1] + 30 / scale], [-1, 1]],
            scale: [scale, 40]
        });
        graphie.addMouseLayer({
            allowScratchpad: true
        });

        // Line

        graphie.line([range[0] - 25 / scale, 0], [range[1] + 25 / scale, 0], {
            arrows: "->"
        });
        graphie.line([range[1] + 25 / scale, 0], [range[0] - 25 / scale, 0], {
            arrows: "->"
        });

        // Ticks
        var labelStyle = this.props.labelStyle;
        for (var x = Math.ceil(range[0] / tickStep) * tickStep; x <= range[1]; x += tickStep) {
            graphie.line([x, -0.2], [x, 0.2]);

            // TODO(jack): Find out if any exercises have "decimal ticks" set,
            // and if so, re-save them and remove this check.
            if (this.props.labelTicks || labelStyle === "decimal ticks") {
                this._label(x);
            }
        }

        graphie.style({
            stroke: KhanUtil.INTERACTIVE,
            strokeWidth: 3.5
        }, function () {
            graphie.line([range[0], -0.2], [range[0], 0.2]);
            graphie.line([range[1], -0.2], [range[1], 0.2]);
            if (range[0] < 0 && 0 < range[1]) {
                graphie.line([0, -0.2], [0, 0.2]);
            }
        });

        graphie.style({ color: KhanUtil.INTERACTIVE }, function () {
            self._label(range[0]);
            self._label(range[1]);
            if (range[0] < 0 && 0 < range[1] && !self.props.labelTicks) {
                graphie.label([0, -0.53], "0", "center");
            }
        });

        // Point

        var isInequality = this.props.isInequality;
        var rel = this.props.rel;

        var pointSize;
        var pointStyle;
        var highlightStyle;
        if (isInequality && (rel === "lt" || rel === "gt")) {
            pointSize = 5;
            pointStyle = {
                stroke: KhanUtil.INTERACTING,
                fill: KhanUtil._BACKGROUND,
                "stroke-width": 3
            };
            highlightStyle = {
                stroke: KhanUtil.INTERACTING,
                fill: KhanUtil._BACKGROUND,
                "stroke-width": 4
            };
        } else {
            pointSize = 4;
            pointStyle = highlightStyle = {
                stroke: KhanUtil.INTERACTING,
                fill: KhanUtil.INTERACTING
            };
        }

        var x = Math.min(Math.max(range[0], this.props.pointX), range[1]);
        var point = this.point = graphie.addMovablePoint({
            pointSize: pointSize,
            coord: [x, 0],
            snapX: this.props.tickStep / this.props.snapDivisions,
            constraints: {
                constrainY: true
            },
            normalStyle: pointStyle,
            highlightStyle: highlightStyle
        });
        point.onMove = function (x, y) {
            x = Math.min(Math.max(range[0], x), range[1]);
            updateInequality(x, y);
            return [x, y];
        };
        point.onMoveEnd = function (x, y) {
            _this.props.onChange({ pointX: x });
        };

        // Inequality line

        var inequalityLine;
        updateInequality(x, 0);

        function updateInequality(px, py) {
            if (inequalityLine) {
                inequalityLine.remove();
                inequalityLine = null;
            }
            if (isInequality) {
                var end;
                if (rel === "ge" || rel === "gt") {
                    end = [range[1] + 26 / scale, 0];
                } else {
                    end = [range[0] - 26 / scale, 0];
                }
                inequalityLine = graphie.line([px, py], end, {
                    arrows: "->",
                    stroke: KhanUtil.INTERACTIVE,
                    strokeWidth: 3.5
                });
                point.toFront();
            }
        }
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        if (answerData === undefined) {
            answerData = this.getDefaultProps();
        }
        if (answerData.rel === "eq") {
            answerData.rel = "ge";
            answerData.isInequality = false;
        }
        this.props.onChange(answerData);
    },

    toJSON: function toJSON() {
        return {
            pointX: this.props.pointX,
            rel: this.props.isInequality ? this.props.rel : "eq"
        };
    },

    simpleValidate: function simpleValidate(rubric) {
        return InteractiveNumberLine.validate(this.toJSON(), rubric);
    },

    focus: $.noop,

    statics: {
        displayMode: "block"
    }
});

_.extend(InteractiveNumberLine, {
    validate: function validate(state, rubric) {
        var range = rubric.range;
        var start = Math.min(Math.max(range[0], 0), range[1]);
        var startRel = rubric.isInequality ? "ge" : "eq";
        var correctRel = rubric.correctRel || "eq";

        if (eq(state.pointX, rubric.correctX || 0) && correctRel === state.rel) {
            return {
                type: "points",
                earned: 1,
                total: 1,
                message: null
            };
        } else if (state.pointX === start && state.rel === startRel) {
            // We're where we started.
            return {
                type: "invalid",
                message: null
            };
        } else {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }
    }
});

var InteractiveNumberLineEditor = React.createClass({
    displayName: "InteractiveNumberLineEditor",

    getDefaultProps: function getDefaultProps() {
        return {
            range: [0, 10],
            labelStyle: "decimal",
            labelTicks: false,
            tickStep: 1,
            snapDivisions: 4,
            correctRel: "eq",
            correctX: 0
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "label",
                null,
                ' ',
                "\u6700\u5C0F x: ",
                React.createElement("input", { defaultValue: '' + this.props.range[0],
                    onBlur: this.onRangeBlur.bind(this, 0) })
            ),
            React.createElement("br", null),
            React.createElement(
                "label",
                null,
                ' ',
                "\u6700\u5927 x: ",
                React.createElement("input", { defaultValue: '' + this.props.range[1],
                    onBlur: this.onRangeBlur.bind(this, 1) })
            ),
            React.createElement(
                InfoTip,
                null,
                React.createElement(
                    "p",
                    null,
                    "\u5229\u7528\u4E0B\u65B9\u7684\u300C\u6A19\u7C64\u683C\u5F0F\u300D\u4F86\u6539\u8B8A\u6700\u5927\u8207\u6700\u5C0F x \u7684\u6A19\u7C64\u986F\u793A\u683C\u5F0F\u3002"
                )
            ),
            React.createElement("br", null),
            React.createElement(
                "span",
                null,
                ' ',
                "\u6B63\u78BA\u7B54\u6848:",
                ' ',
                React.createElement(
                    "select",
                    { value: this.props.correctRel,
                        onChange: this.onChange.bind(this, "correctRel") },
                    React.createElement(
                        "optgroup",
                        { label: "\u7B49\u5F0F" },
                        React.createElement(
                            "option",
                            { value: "eq" },
                            "x ="
                        )
                    ),
                    React.createElement(
                        "optgroup",
                        { label: "\u4E0D\u7B49\u5F0F" },
                        React.createElement(
                            "option",
                            { value: "lt" },
                            "x <"
                        ),
                        React.createElement(
                            "option",
                            { value: "gt" },
                            "x >"
                        ),
                        React.createElement(
                            "option",
                            { value: "le" },
                            "x \u2264"
                        ),
                        React.createElement(
                            "option",
                            { value: "ge" },
                            "x \u2265"
                        )
                    )
                ),
                React.createElement("input", { defaultValue: '' + this.props.correctX,
                    onBlur: this.onNumBlur.bind(this, "correctX") })
            ),
            React.createElement("br", null),
            React.createElement("br", null),
            React.createElement(
                "label",
                null,
                ' ',
                "\u6A19\u7C64\u683C\u5F0F:",
                ' ',
                React.createElement(
                    "select",
                    { value: this.props.labelStyle,
                        onChange: this.onChange.bind(this, "labelStyle") },
                    React.createElement(
                        "option",
                        { value: "decimal" },
                        "\u5C0F\u6578"
                    ),
                    React.createElement(
                        "option",
                        { value: "improper" },
                        "\u5047\u5206\u6578"
                    ),
                    React.createElement(
                        "option",
                        { value: "mixed" },
                        "\u5E36\u5206\u6578"
                    )
                ),
                React.createElement(PropCheckBox, {
                    label: "\u986F\u793A\u523B\u5EA6\u4EE3\u8868\u7684\u6578\u5B57",
                    labelTicks: this.props.labelTicks,
                    onChange: this.props.onChange })
            ),
            React.createElement("br", null),
            React.createElement(
                "label",
                null,
                ' ',
                "\u6BCF\u4E00\u523B\u5EA6\u4E4B\u9593\u8DDD\u96E2: ",
                React.createElement("input", { defaultValue: '' + this.props.tickStep,
                    onBlur: this.onNumBlur.bind(this, "tickStep") })
            ),
            React.createElement(
                InfoTip,
                null,
                React.createElement(
                    "p",
                    null,
                    "\u6BCF\u4E00\u500B\u523B\u5EA6\u90FD\u6703\u6A19\u4E0A\u523B\u5EA6\u7DDA\u3002"
                )
            ),
            React.createElement("br", null),
            React.createElement(
                "label",
                null,
                ' ',
                "\u523B\u5EA6\u4E4B\u9593\u7684\u5206\u5272\u6578\u91CF:",
                ' ',
                React.createElement("input", { defaultValue: '' + this.props.snapDivisions,
                    onBlur: this.onNumBlur.bind(this, "snapDivisions") })
            ),
            React.createElement(
                InfoTip,
                null,
                React.createElement(
                    "p",
                    null,
                    "\u78BA\u4FDD\u5206\u5272\u6578\u91CF\u8DB3\u5920\u8B93\u4F7F\u7528\u8005\u56DE\u7B54\u554F\u984C\uFF0C\u5373\u7B54\u6848\u6703\u843D\u5728\u67D0\u5206\u5272\u7684\u4F4D\u7F6E\u3002"
                )
            )
        );
    },

    onRangeBlur: function onRangeBlur(i, e) {
        var x = Util.firstNumericalParse(e.target.value) || 0;
        e.target.value = x;

        var range = this.props.range.slice();
        range[i] = x;
        this.props.onChange({ range: range });
    },

    onChange: function onChange(key, e) {
        var opts = {};
        opts[key] = e.target.value;
        this.props.onChange(opts);
    },

    onNumBlur: function onNumBlur(key, e) {
        var x = Util.firstNumericalParse(e.target.value) || 0;
        e.target.value = x;

        var opts = {};
        opts[key] = x;
        this.props.onChange(opts);
    },

    toJSON: function toJSON() {
        return {
            range: this.props.range,
            labelStyle: this.props.labelStyle,
            labelTicks: this.props.labelTicks,
            tickStep: this.props.tickStep,
            snapDivisions: this.props.snapDivisions,
            correctRel: this.props.correctRel,
            isInequality: this.props.correctRel !== "eq",
            correctX: this.props.correctX
        };
    }
});

module.exports = {
    name: "interactive-number-line",
    displayName: "Interactive-number-line/互動式數線",
    hidden: false,
    widget: InteractiveNumberLine,
    editor: InteractiveNumberLineEditor
};

},{"../components/prop-check-box.jsx":262,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95,"underscore":248}],318:[function(require,module,exports){
"use strict";

var React = require('react');
var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var NumberInput = require("../components/number-input.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");

var MAX_SIZE = 8;

// Styling
var CELL_PADDING = 5;

var TABLE_STYLE = {
    display: "table",
    tableLayout: "fixed"
};

var ROW_STYLE = {
    display: "table-row"
};

var CELL_STYLE = {
    display: "table-cell",
    padding: CELL_PADDING
};

var BASE_TILE_STYLE = {
    borderRadius: 10,
    cursor: "pointer"
};

var MOVE_COUNT_STYLE = {
    padding: CELL_PADDING,
    display: "inline-block"
};

var RESET_BUTTON_STYLE = {
    "float": "right",
    paddingRight: CELL_PADDING
};

var MAIN_TILE_SIZE = 50;

var mapCells = function mapCells(cells, func) {
    return _.map(cells, function (row, y) {
        return _.map(row, function (value, x) {
            return func(value, y, x);
        });
    });
};

var genCells = function genCells(height, width, func) {
    return _.times(height, function (y) {
        return _.times(width, function (x) {
            return func(y, x);
        });
    });
};

var PATTERNS = {
    plus: function plus() {
        return [[false, true, false], [true, true, true], [false, true, false]];
    },
    x: function x() {
        return [[true, false, true], [false, true, false], [true, false, true]];
    },
    "plus/x": function plusX(iter) {
        return iter % 2 ? PATTERNS.x() : PATTERNS.plus();
    }
};

/**
 * Clamps value to an integer in the range [min, max]
 */
var clampToInt = function clampToInt(value, min, max) {
    value = Math.floor(value);
    value = Math.max(value, min);
    value = Math.min(value, max);
    return value;
};

// A single glowy cell
var Tile = React.createClass({
    displayName: "Tile",

    propTypes: {
        value: React.PropTypes.bool.isRequired,
        size: React.PropTypes.number.isRequired
    },

    render: function render() {
        var color = this.props.value ? "#55dd55" : "#115511";
        var style = _.extend({}, BASE_TILE_STYLE, {
            width: this.props.size,
            height: this.props.size,
            backgroundColor: color
        });
        return React.createElement("div", {
            style: style,
            onClick: this._flip });
    },

    _flip: function _flip() {
        this.props.onChange(!this.props.value);
    }
});

// A grid of glowy cells
var TileGrid = React.createClass({
    displayName: "TileGrid",

    propTypes: {
        cells: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.bool)).isRequired,
        size: React.PropTypes.number.isRequired
    },

    render: function render() {
        var _this = this;

        return React.createElement(
            "div",
            { style: TABLE_STYLE, className: "no-select" },
            _.map(this.props.cells, function (row, y) {
                return React.createElement(
                    "div",
                    { key: y, style: ROW_STYLE },
                    _.map(row, function (cell, x) {
                        return React.createElement(
                            "div",
                            { key: x, style: CELL_STYLE },
                            React.createElement(Tile, {
                                value: cell,
                                size: _this.props.size,
                                onChange: _.partial(_this.props.onChange, y, x)
                            })
                        );
                    })
                );
            })
        );
    }
});

// Returns a copy of the tiles, with tiles flipped according to
// whether or not their y, x position satisfies the predicate
var flipTilesPredicate = function flipTilesPredicate(oldCells, predicate) {
    return _.map(oldCells, function (row, y) {
        return _.map(row, function (cell, x) {
            return predicate(y, x) ? !cell : cell;
        });
    });
};

var flipTilesPattern = function flipTilesPattern(oldCells, tileY, tileX, pattern) {
    return flipTilesPredicate(oldCells, function (y, x) {
        var offsetY = y - tileY;
        var offsetX = x - tileX;
        if (Math.abs(offsetY) <= 1 && Math.abs(offsetX) <= 1) {
            return pattern[offsetY + 1][offsetX + 1];
        } else {
            return false;
        }
    });
};

// The lights puzzle widget
var LightsPuzzle = React.createClass({
    displayName: "LightsPuzzle",

    mixins: [Changeable, JsonifyProps],

    propTypes: {
        cells: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.bool)),
        startCells: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.bool)),
        flipPattern: React.PropTypes.string.isRequired,
        moveCount: React.PropTypes.number.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            cells: [[false, false, false], [false, false, false], [false, false, false]],
            startCells: [[false, false, false], [false, false, false], [false, false, false]],
            flipPattern: "plus",
            moveCount: 0
        };
    },

    render: function render() {
        var width = this._width();
        var tileSize = MAIN_TILE_SIZE;
        var pxWidth = width * (tileSize + 2 * CELL_PADDING);
        return React.createElement(
            "div",
            null,
            React.createElement(TileGrid, {
                cells: this.props.cells,
                size: tileSize,
                onChange: this._flipTile }),
            React.createElement(
                "div",
                { style: { width: pxWidth } },
                React.createElement(
                    "div",
                    { style: MOVE_COUNT_STYLE },
                    "\u79FB\u52D5\u6B21\u6578: ",
                    this.props.moveCount
                ),
                React.createElement(
                    "div",
                    { style: RESET_BUTTON_STYLE },
                    React.createElement("input", {
                        type: "button",
                        value: "\u91CD\u7F6E",
                        onClick: this._reset,
                        className: "simple-button" })
                )
            ),
            React.createElement("div", { className: "clearfix" })
        );
    },

    _width: function _width() {
        if (this.props.cells.length !== 0) {
            return this.props.cells[0].length;
        } else {
            return 0; // default to 0
        }
    },

    componentDidMount: function componentDidMount() {
        this._initNextPatterns();
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        if (prevProps.flipPattern !== this.props.flipPattern) {
            this._initNextPatterns();
        }
    },

    _initNextPatterns: function _initNextPatterns() {
        this._currPattern = PATTERNS[this.props.flipPattern](0);
        this._nextPattern = PATTERNS[this.props.flipPattern](1);
        this._patternIndex = 2;
    },

    _shiftPatterns: function _shiftPatterns() {
        this._currPattern = this._nextPattern;
        this._nextPattern = PATTERNS[this.props.flipPattern](this._patternIndex);
        this._patternIndex++;
    },

    _flipTile: function _flipTile(tileY, tileX) {
        var newCells = flipTilesPattern(this.props.cells, tileY, tileX, this._currPattern);
        this._shiftPatterns();

        this.change({
            cells: newCells,
            moveCount: this.props.moveCount + 1
        });
    },

    _reset: function _reset() {
        this.change({
            cells: this.props.startCells,
            moveCount: 0
        });
    },

    simpleValidate: function simpleValidate(rubric) {
        return validate(rubric, this.toJSON());
    },

    statics: {
        displayMode: "block"
    }
});

// The widget editor
var LightsPuzzleEditor = React.createClass({
    displayName: "LightsPuzzleEditor",

    mixins: [Changeable, JsonifyProps],

    propTypes: {
        startCells: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.bool)),
        flipPattern: React.PropTypes.string.isRequired,
        gradeIncompleteAsWrong: React.PropTypes.bool.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            startCells: [[false, false, false], [false, false, false], [false, false, false]],
            flipPattern: "plus",
            gradeIncompleteAsWrong: false
        };
    },

    _height: function _height() {
        return this.props.startCells.length;
    },

    _width: function _width() {
        if (this.props.startCells.length !== 0) {
            return this.props.startCells[0].length;
        } else {
            return 0; // default to 0
        }
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                "\u5BEC\u5EA6:",
                React.createElement(NumberInput, {
                    value: this._width(),
                    placeholder: 5,
                    onChange: this._changeWidth }),
                ", ",
                "\u9AD8\u5EA6:",
                React.createElement(NumberInput, {
                    value: this._height(),
                    placeholder: 5,
                    onChange: this._changeHeight })
            ),
            React.createElement(
                "div",
                null,
                "\u7FFB\u8F49\u5716\u6A23:",
                React.createElement(
                    "select",
                    {
                        value: this.props.flipPattern,
                        onChange: this._handlePatternChange },
                    _.map(_.keys(PATTERNS), function (pattern) {
                        return React.createElement(
                            "option",
                            { value: pattern },
                            pattern
                        );
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                "\u5C07\u672A\u5B8C\u6210\u7684\u8B0E\u984C\u8996\u70BA\u932F\u8AA4:",
                " ",
                React.createElement(PropCheckBox, {
                    gradeIncompleteAsWrong: this.props.gradeIncompleteAsWrong,
                    onChange: this.props.onChange }),
                React.createElement(
                    InfoTip,
                    null,
                    "\u9810\u8A2D\u672A\u5B8C\u6210\u7684\u8B0E\u984C\u6703\u88AB\u7576\u6210\u7A7A\u767D\u4F86\u8655\u7406\u3002"
                )
            ),
            React.createElement(
                "div",
                null,
                "\u8D77\u59CB\u5716\u6848\u8A2D\u5B9A:"
            ),
            React.createElement(
                "div",
                { style: { overflowX: "auto" } },
                React.createElement(TileGrid, {
                    cells: this.props.startCells,
                    size: 50,
                    onChange: this._switchTile })
            )
        );
    },

    _handlePatternChange: function _handlePatternChange(e) {
        this.change("flipPattern", e.target.value);
    },

    _changeWidth: function _changeWidth(newWidth) {
        newWidth = clampToInt(newWidth, 1, MAX_SIZE);
        this._truncateCells(newWidth, this._height());
    },

    _changeHeight: function _changeHeight(newHeight) {
        newHeight = clampToInt(newHeight, 1, MAX_SIZE);
        this._truncateCells(this._width(), newHeight);
    },

    _truncateCells: function _truncateCells(newWidth, newHeight) {
        var _this2 = this;

        var newCells = _.times(newHeight, function (y) {
            return _.times(newWidth, function (x) {
                // explicitly cast the result to a boolean with !!
                return !!(_this2.props.startCells[y] && _this2.props.startCells[y][x]);
            });
        });

        this.change({ startCells: newCells });
    },

    _switchTile: function _switchTile(tileY, tileX) {
        var newCells = flipTilesPredicate(this.props.startCells, function (y, x) {
            return y === tileY && x === tileX;
        });

        this.change({ startCells: newCells });
    }
});

// grading function
var validate = function validate(rubric, state) {
    var empty = _.all(state.cells, function (row, y) {
        return _.all(row, function (cell, x) {
            return cell === rubric.startCells[y][x];
        });
    });
    if (empty) {
        return {
            type: "invalid",
            message: $._("Click on the tiles to change the lights.")
        };
    }

    var correct = _.all(state.cells, function (row) {
        return _.all(row, function (cell) {
            return cell;
        });
    });

    if (correct) {
        return {
            type: "points",
            earned: 1,
            total: 1,
            message: null
        };
    } else if (rubric.gradeIncompleteAsWrong) {
        return {
            type: "points",
            earned: 0,
            total: 1,
            message: null
        };
    } else {
        return {
            type: "invalid",
            message: $._("You must turn on all of the lights to continue.")
        };
    }
};

// The function run on the editor props to create the widget props
var transformProps = function transformProps(editorProps) {
    return {
        cells: editorProps.startCells,
        startCells: editorProps.startCells,
        flipPattern: editorProps.flipPattern
    };
};

module.exports = {
    name: "lights-puzzle",
    displayName: "Lights Puzzle/點燈謎題",
    hidden: false,
    widget: LightsPuzzle,
    editor: LightsPuzzleEditor,
    transform: transformProps
};

},{"../components/number-input.jsx":261,"../components/prop-check-box.jsx":262,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246,"react-components/js/info-tip.jsx":68}],319:[function(require,module,exports){
"use strict";

var React = require('react');
var InfoTip = require("react-components/js/info-tip.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var Renderer = require("../renderer.jsx");
var Sortable = require("../components/sortable.jsx");
var TextListEditor = require("../components/text-list-editor.jsx");

var shuffle = require("../util.js").shuffle;
var seededRNG = require("../util.js").seededRNG;

var Matcher = React.createClass({
    displayName: "Matcher",

    propTypes: {
        left: React.PropTypes.array,
        right: React.PropTypes.array,
        labels: React.PropTypes.array,
        orderMatters: React.PropTypes.bool,
        padding: React.PropTypes.bool,
        problemNum: React.PropTypes.number,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            left: [],
            right: [],
            labels: ["", ""],
            orderMatters: true,
            padding: true,
            problemNum: 0,
            onChange: function onChange() {}
        };
    },

    getInitialState: function getInitialState() {
        return {
            leftHeight: 0,
            rightHeight: 0
        };
    },

    render: function render() {
        // Use the same random() function to shuffle both columns sequentially
        var rng = seededRNG(this.props.problemNum);

        var left;
        if (!this.props.orderMatters) {
            // If the order doesn't matter, don't shuffle the left column
            left = this.props.left;
        } else {
            left = shuffle(this.props.left, rng, /* ensurePermuted */true);
        }

        var right = shuffle(this.props.right, rng, /* ensurePermuted */true);

        var showLabels = _.any(this.props.labels);
        var constraints = { height: _.max([this.state.leftHeight, this.state.rightHeight]) };

        return React.createElement(
            "div",
            { className: "perseus-widget-matcher ui-helper-clearfix" },
            React.createElement(
                "div",
                { className: "column" },
                showLabels && React.createElement(
                    "div",
                    { className: "column-label" },
                    React.createElement(Renderer, { content: this.props.labels[0] || "..." })
                ),
                React.createElement(Sortable, {
                    options: left,
                    layout: "vertical",
                    padding: this.props.padding,
                    disabled: !this.props.orderMatters,
                    constraints: constraints,
                    onMeasure: this.onMeasureLeft,
                    onChange: this.props.onChange,
                    ref: "left" })
            ),
            React.createElement(
                "div",
                { className: "column" },
                showLabels && React.createElement(
                    "div",
                    { className: "column-label" },
                    React.createElement(Renderer, { content: this.props.labels[1] || "..." })
                ),
                React.createElement(Sortable, {
                    options: right,
                    layout: "vertical",
                    padding: this.props.padding,
                    constraints: constraints,
                    onMeasure: this.onMeasureRight,
                    onChange: this.props.onChange,
                    ref: "right" })
            )
        );
    },

    onMeasureLeft: function onMeasureLeft(dimensions) {
        var height = _.max(dimensions.heights);
        this.setState({ leftHeight: height });
    },

    onMeasureRight: function onMeasureRight(dimensions) {
        var height = _.max(dimensions.heights);
        this.setState({ rightHeight: height });
    },

    toJSON: function toJSON(skipValidation) {
        return {
            left: this.refs.left.getOptions(),
            right: this.refs.right.getOptions()
        };
    },

    simpleValidate: function simpleValidate(rubric) {
        return Matcher.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Matcher, {
    validate: function validate(state, rubric) {
        var correct = _.isEqual(state.left, rubric.left) && _.isEqual(state.right, rubric.right);

        return {
            type: "points",
            earned: correct ? 1 : 0,
            total: 1,
            message: null
        };
    }
});

var MatcherEditor = React.createClass({
    displayName: "MatcherEditor",

    propTypes: {
        left: React.PropTypes.array,
        right: React.PropTypes.array,
        labels: React.PropTypes.array,
        orderMatters: React.PropTypes.bool,
        padding: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            left: ["$x$", "$y$", "$z$"],
            right: ["$1$", "$2$", "$3$"],
            labels: ["test", "label"],
            orderMatters: true,
            padding: true
        };
    },

    render: function render() {
        var _this = this;

        return React.createElement(
            "div",
            { className: "perseus-matcher-editor" },
            React.createElement(
                "div",
                null,
                ' ',
                "\u6B63\u78BA\u7B54\u6848:",
                ' ',
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5728\u6B64\u8F38\u5165\u914D\u5C0D\u984C\u7D44\u7684\u6B63\u78BA\u7B54\u6848\u3002\u7576\u984C\u76EE\u986F\u793A\u6642\uFF0C\u6703\u96A8\u6A5F\u6392\u5E8F\u5361\u7247\u7684\u9806\u5E8F\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "ui-helper-clearfix" },
                React.createElement(TextListEditor, {
                    options: this.props.left,
                    onChange: function onChange(options, cb) {
                        _this.props.onChange({ left: options }, cb);
                    },
                    layout: "vertical" }),
                React.createElement(TextListEditor, {
                    options: this.props.right,
                    onChange: function onChange(options, cb) {
                        _this.props.onChange({ right: options }, cb);
                    },
                    layout: "vertical" })
            ),
            React.createElement(
                "span",
                null,
                ' ',
                "\u6A19\u7C64:",
                ' ',
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u6B64\u6B04\u4F4D\u975E\u5FC5\u586B\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement("input", { type: "text",
                    defaultValue: this.props.labels[0],
                    onChange: this.onLabelChange.bind(this, 0) }),
                React.createElement("input", { type: "text",
                    defaultValue: this.props.labels[1],
                    onChange: this.onLabelChange.bind(this, 1) })
            ),
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    label: "\u7B2C\u4E00\u6B04\u7684\u6B04\u4F4D\u9806\u5E8F\u53EF\u91CD\u65B0\u8ABF\u6574:",
                    orderMatters: this.props.orderMatters,
                    onChange: this.props.onChange }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7576\u6B64\u529F\u80FD\u958B\u555F\u6642\uFF0C\u7B2C\u4E00\u6B04\u6B04\u4F4D\u7684\u9806\u5E8F\u5FC5\u9808\u5B8C\u6210\u7B26\u5408\u3002"
                    ),
                    React.createElement(
                        "p",
                        null,
                        "\u6B64\u529F\u80FD\u9069\u5408\u4F7F\u7528\u5728\u8B49\u660E\u984C\u7684\u8AD6\u8B49\u6B65\u9A5F\u8207\u5176\u7406\u7531\u7684\u914D\u5C0D\u3002"
                    ),
                    React.createElement(
                        "p",
                        null,
                        "\u7576\u6B64\u529F\u80FD\u95DC\u9589\u6642\uFF0C\u7B2C\u4E00\u6B04\u7684\u6B04\u4F4D\u6703\u56FA\u5B9A\u4E0B\u4F86\uFF0C\u53EA\u8B93\u4F7F\u7528\u8005\u8ABF\u6574\u7B2C\u4E8C\u6B04\u6B04\u4F4D\u7684\u9806\u5E8F\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    label: "\u7559\u767D:",
                    padding: this.props.padding,
                    onChange: this.props.onChange }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5EFA\u8B70\u5728\u6587\u5B57\u6642\u52A0\u5165\u300C\u7559\u767D\u300D\uFF0C\u5716\u7247\u6A21\u5F0F\u4E0D\u8981\u52A0\u5165\u3002"
                    )
                )
            )
        );
    },

    onLabelChange: function onLabelChange(index, e) {
        var labels = _.clone(this.props.labels);
        labels[index] = e.target.value;
        this.props.onChange({ labels: labels });
    },

    toJSON: function toJSON(skipValidation) {
        if (!skipValidation) {
            if (this.props.left.length !== this.props.right.length) {
                alert("Warning: The two halves of the matcher have different" + " numbers of cards.");
            }
        }

        return _.pick(this.props, "left", "right", "labels", "orderMatters", "padding");
    }
});

module.exports = {
    name: "matcher",
    displayName: "Two column matcher/配對題",
    widget: Matcher,
    editor: MatcherEditor,
    hidden: false
};

},{"../components/prop-check-box.jsx":262,"../components/sortable.jsx":264,"../components/text-list-editor.jsx":267,"../renderer.jsx":298,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68}],320:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable comma-dangle, max-len, no-undef, no-var, object-curly-spacing, react/jsx-closing-bracket-location, react/jsx-indent-props, react/prop-types, react/sort-comp, space-before-function-paren */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

var classNames = require("classnames");
var React = require("react");
var ReactDOM = require("react-dom");
var _ = require("underscore");

var Renderer = require("../renderer.jsx");
var TextInput = require("../components/text-input.jsx");

var ApiOptions = require("../perseus-api.jsx").Options;
var KhanAnswerTypes = Khan.answerTypes;

var assert = require("../interactive2/interactive-util.js").assert;
var stringArrayOfSize = require("../util.js").stringArrayOfSize;

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var Editor = require("../editor.jsx");
var RangeInput = require("../components/range-input.jsx");

// We store three sets of dimensions for the brackets, for our three types of
// inputs, which vary in formatting: (1) the "static" inputs rendered for the
// mobile apps (that are being deprecated), (2) the normal inputs rendered on
// desktop, and (3) the keypad-based inputs newly rendered for the mobile apps
// and mobile web. The first two sets of dimensions come from `matrix.less`;
// the keypad-based input's dimensions are provided to the component itself,
// below.
var STATIC_INPUT_DIMENSIONS = {
    INPUT_MARGIN: 4,
    INPUT_HEIGHT: 38,
    INPUT_WIDTH: 82
};

var NORMAL_DIMENSIONS = {
    INPUT_MARGIN: 3,
    INPUT_HEIGHT: 30,
    INPUT_WIDTH: 40
};

/* Input handling: Maps a (row, column) pair to a unique ref used by React,
 * and extracts (row, column) pairs from input paths, used to allow outsiders
 * to focus, blur, set input values, etc. */
var getInputPath = function getInputPath(row, column) {
    return ["" + row, "" + column];
};

var getDefaultPath = function getDefaultPath() {
    return getInputPath(0, 0);
};

var getRowFromPath = function getRowFromPath(path) {
    // 'path' should be a (row, column) pair
    assert(_.isArray(path) && path.length === 2);
    return +path[0];
};

var getColumnFromPath = function getColumnFromPath(path) {
    // 'path' should be a (row, column) pair
    assert(_.isArray(path) && path.length === 2);
    return +path[1];
};

var getRefForPath = function getRefForPath(path) {
    var row = getRowFromPath(path);
    var column = getColumnFromPath(path);
    return "answer" + row + "," + column;
};

var getMatrixSize = function getMatrixSize(matrix) {
    var matrixSize = [1, 1];

    // We need to find the widest row and tallest column to get the correct
    // matrix size.
    _(matrix).each(function (matrixRow, row) {
        var rowWidth = 0;
        _(matrixRow).each(function (matrixCol, col) {
            if (matrixCol != null && matrixCol.toString().length) {
                rowWidth = col + 1;
            }
        });

        // Matrix width:
        matrixSize[1] = Math.max(matrixSize[1], rowWidth);

        // Matrix height:
        if (rowWidth > 0) {
            matrixSize[0] = Math.max(matrixSize[0], row + 1);
        }
    });
    return matrixSize;
};

var Matrix = React.createClass({
    displayName: "Matrix",

    propTypes: {
        answers: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]))),
        apiOptions: ApiOptions.propTypes,
        cursorPosition: React.PropTypes.arrayOf(React.PropTypes.number),
        matrixBoardSize: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,
        prefix: React.PropTypes.string,
        suffix: React.PropTypes.string,
        trackInteraction: React.PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            matrixBoardSize: [3, 3],
            answers: [[]],
            prefix: "",
            suffix: "",
            cursorPosition: [0, 0],
            apiOptions: ApiOptions.defaults
        };
    },

    getInitialState: function getInitialState() {
        return {
            enterTheMatrix: 0
        };
    },

    componentDidMount: function componentDidMount() {
        // Used in the `onBlur` and `onFocus` handlers
        this.cursorPosition = [0, 0];
    },

    render: function render() {
        var _this = this;

        // Set the input sizes through JS so we can control the size of the
        // brackets. (If we set them in CSS we won't know values until the
        // inputs are rendered.)
        var dimensions = NORMAL_DIMENSIONS;
        var INPUT_MARGIN = dimensions.INPUT_MARGIN,
            INPUT_HEIGHT = dimensions.INPUT_HEIGHT,
            INPUT_WIDTH = dimensions.INPUT_WIDTH;


        var matrixSize = getMatrixSize(this.props.answers);
        var maxRows = this.props.matrixBoardSize[0];
        var maxCols = this.props.matrixBoardSize[1];
        var cursorRow = this.props.cursorPosition[0];
        var cursorCol = this.props.cursorPosition[1];

        var highlightedRow = Math.max(cursorRow, matrixSize[0] - 1);
        var highlightedCol = Math.max(cursorCol, matrixSize[1] - 1);
        var bracketHeight = (highlightedRow + 1) * (INPUT_HEIGHT + 2 * INPUT_MARGIN);
        var bracketOffset = (highlightedCol + 1) * (INPUT_WIDTH + 2 * INPUT_MARGIN);

        var className = classNames({
            "perseus-matrix": true,
            "static-mode": this.props.static,
            "the-matrix": this.state.enterTheMatrix >= 5
        });

        return React.createElement(
            "div",
            { className: className },
            this.props.prefix && React.createElement(
                "div",
                { className: "matrix-prefix" },
                React.createElement(Renderer, { content: this.props.prefix })
            ),
            React.createElement(
                "div",
                { className: "matrix-input" },
                React.createElement("div", {
                    className: "matrix-bracket bracket-left",
                    style: {
                        height: bracketHeight
                    }
                }),
                React.createElement("div", {
                    className: "matrix-bracket bracket-right",
                    style: {
                        height: bracketHeight,
                        left: bracketOffset
                    }
                }),
                _(maxRows).times(function (row) {
                    var rowVals = _this.props.answers[row];
                    return React.createElement(
                        "div",
                        { className: "matrix-row", key: row },
                        _(maxCols).times(function (col) {
                            var outside = row > highlightedRow || col > highlightedCol;
                            var inputProps = {
                                className: outside ? "outside" : "inside",
                                ref: getRefForPath(getInputPath(row, col)),
                                value: rowVals ? rowVals[col] : null,
                                style: {
                                    height: INPUT_HEIGHT,
                                    width: INPUT_WIDTH,
                                    margin: INPUT_MARGIN
                                },
                                disabled: _this.props.apiOptions.readOnly,
                                onFocus: function onFocus() {
                                    // We store this locally so that we can use
                                    // the new information in the `onBlur`
                                    // handler, which happens before the props
                                    // change has time to propagate.
                                    // TODO(emily): Try to fix `MathOutput` so
                                    // it correctly sends blur events before
                                    // focus events.
                                    _this.cursorPosition = [row, col];
                                    _this.props.onChange({
                                        cursorPosition: [row, col]
                                    }, function () {
                                        // This isn't a user interaction, so
                                        // return false to signal that the
                                        // matrix shouldn't be focused
                                        return false;
                                    });
                                    _this._handleFocus(row, col);
                                },
                                onBlur: function onBlur() {
                                    if (row === _this.cursorPosition[0] && col === _this.cursorPosition[1]) {
                                        _this.props.onChange({
                                            cursorPosition: [0, 0]
                                        }, function () {
                                            // This isn't a user interaction,
                                            // so return false to signal that
                                            // the matrix shouldn't be focused
                                            return false;
                                        });
                                    }
                                    _this._handleBlur(row, col);
                                },
                                onKeyDown: function onKeyDown(e) {
                                    _this.handleKeyDown(row, col, e);
                                },
                                onChange: function onChange(value, cb) {
                                    _this.onValueChange(row, col, value, cb);
                                }
                            };

                            var MatrixInput = React.createElement(TextInput, inputProps);
                            return React.createElement(
                                "span",
                                {
                                    key: col,
                                    className: "matrix-input-field" },
                                MatrixInput
                            );
                        })
                    );
                })
            ),
            this.props.suffix && React.createElement(
                "div",
                { className: "matrix-suffix" },
                React.createElement(Renderer, { content: this.props.suffix })
            )
        );
    },

    getInputPaths: function getInputPaths() {
        var inputPaths = [];
        var maxRows = this.props.matrixBoardSize[0];
        var maxCols = this.props.matrixBoardSize[1];

        _(maxRows).times(function (row) {
            _(maxCols).times(function (col) {
                var inputPath = getInputPath(row, col);
                inputPaths.push(inputPath);
            });
        });

        return inputPaths;
    },

    getGrammarTypeForPath: function getGrammarTypeForPath(inputPath) {
        return "number";
    },

    _handleFocus: function _handleFocus(row, col) {
        this.props.onFocus(getInputPath(row, col));
    },

    _handleBlur: function _handleBlur(row, col) {
        this.props.onBlur(getInputPath(row, col));
    },

    focus: function focus() {
        this.focusInputPath(getDefaultPath());
        return true;
    },

    focusInputPath: function focusInputPath(path) {
        var inputID = getRefForPath(path);
        this.refs[inputID].focus();
    },

    blurInputPath: function blurInputPath(path) {
        if (path.length === 0) {
            path = getDefaultPath();
        }

        var inputID = getRefForPath(path);
        this.refs[inputID].blur();
    },

    getDOMNodeForPath: function getDOMNodeForPath(inputPath) {
        var inputID = getRefForPath(inputPath);
        return ReactDOM.findDOMNode(this.refs[inputID]);
    },

    setInputValue: function setInputValue(inputPath, value, callback) {
        var row = getRowFromPath(inputPath);
        var col = getColumnFromPath(inputPath);
        this.onValueChange(row, col, value, callback);
    },

    handleKeyDown: function handleKeyDown(row, col, e) {
        var maxRow = this.props.matrixBoardSize[0];
        var maxCol = this.props.matrixBoardSize[1];
        var enterTheMatrix = null;

        var curInput = this.refs[getRefForPath(getInputPath(row, col))];
        var curValueString = curInput.getStringValue();
        var cursorStartPosition = curInput.getSelectionStart();
        var cursorEndPosition = curInput.getSelectionEnd();

        var nextPath = null;
        if (e.key === "ArrowUp" && row > 0) {
            nextPath = getInputPath(row - 1, col);
        } else if (e.key === "ArrowDown" && row + 1 < maxRow) {
            nextPath = getInputPath(row + 1, col);
        } else if (e.key === "ArrowLeft" && col > 0) {
            if (cursorStartPosition === 0 && cursorEndPosition === 0) {
                // Only go to next input if we're at the *start* of the content
                nextPath = getInputPath(row, col - 1);
            }
        } else if (e.key === "ArrowRight" && col + 1 < maxCol) {
            if (cursorStartPosition === curValueString.length) {
                // Only go to next input if we're at the *end* of the content
                nextPath = getInputPath(row, col + 1);
            }
        } else if (e.key === "Enter") {
            enterTheMatrix = this.state.enterTheMatrix + 1;
        } else if (e.key === "Escape") {
            enterTheMatrix = 0;
        }

        if (nextPath) {
            // Prevent the cursor from jumping again inside the next input
            e.preventDefault();

            // Focus the input and move the cursor to the end of it.
            var input = this.refs[getRefForPath(nextPath)];

            // Multiply by 2 to ensure the cursor always ends up at the end;
            // Opera sometimes sees a carriage return as 2 characters.
            var inputValString = input.getStringValue();
            var valueLength = inputValString.length * 2;

            input.focus();
            if (e.key === "ArrowRight") {
                input.setSelectionRange(0, 0);
            } else {
                input.setSelectionRange(valueLength, valueLength);
            }
        }

        if (enterTheMatrix != null) {
            this.setState({
                enterTheMatrix: enterTheMatrix
            });
        }
    },

    onValueChange: function onValueChange(row, column, value, cb) {
        var answers = _.map(this.props.answers, _.clone);
        if (!answers[row]) {
            answers[row] = [];
        }
        answers[row][column] = value;
        this.props.onChange({
            answers: answers
        }, cb);
        this.props.trackInteraction();
    },

    getUserInput: function getUserInput() {
        return {
            answers: this.props.answers
        };
    },

    simpleValidate: function simpleValidate(rubric) {
        return Matrix.validate(this.getUserInput(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Matrix, {
    validate: function validate(state, rubric) {
        var solution = rubric.answers;
        var supplied = state.answers;
        var solutionSize = getMatrixSize(solution);
        var suppliedSize = getMatrixSize(supplied);

        var incorrectSize = solutionSize[0] !== suppliedSize[0] || solutionSize[1] !== suppliedSize[1];

        var createValidator = KhanAnswerTypes.number.createValidatorFunctional;
        var message = null;
        var hasEmptyCell = false;
        var incorrect = false;
        _(suppliedSize[0]).times(function (row) {
            _(suppliedSize[1]).times(function (col) {
                if (supplied[row][col] == null || supplied[row][col].toString().length === 0) {
                    hasEmptyCell = true;
                }
                var validator = createValidator(solution[row][col], { simplify: true });
                var result = validator(supplied[row][col]);
                if (result.message) {
                    message = result.message;
                }
                if (!result.correct) {
                    incorrect = true;
                }
            });
        });

        if (hasEmptyCell) {
            return {
                type: "invalid",
                message: i18n._("Make sure you fill in all cells in the matrix.")
            };
        }

        if (incorrectSize) {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }

        return {
            type: "points",
            earned: incorrect ? 0 : 1,
            total: 1,
            message: message
        };
    }
});

var propTransform = function propTransform(editorProps) {
    // Remove answers before passing to widget
    var blankAnswers = _(editorProps.matrixBoardSize[0]).times(function () {
        return stringArrayOfSize(editorProps.matrixBoardSize[1]);
    });
    editorProps = _.pick(editorProps, "matrixBoardSize", "prefix", "suffix");
    return _.extend(editorProps, {
        answers: blankAnswers
    });
};

var staticTransform = function staticTransform(editorProps) {
    var widgetProps = _.pick(editorProps, "matrixBoardSize", "prefix", "suffix");
    // We convert matrix cells from numbers to string to match the expected
    // input into the rendered widget.
    widgetProps.answers = _.map(editorProps.answers, function (row) {
        // Replace null values with empty string
        return _.map(row, function (cell) {
            return cell != null ? String(cell) : "";
        });
    });
    return widgetProps;
};

// Really large matrices will cause issues with question formatting, so we
// have to cap it at some point.
var MAX_BOARD_SIZE = 6;

var getMatrixSize = function getMatrixSize(matrix) {
    var matrixSize = [1, 1];

    // We need to find the widest row and tallest column to get the correct
    // matrix size.
    _(matrix).each(function (matrixRow, row) {
        var rowWidth = 0;
        _(matrixRow).each(function (matrixCol, col) {
            if (matrixCol != null && matrixCol.toString().length) {
                rowWidth = col + 1;
            }
        });

        // Matrix width:
        matrixSize[1] = Math.max(matrixSize[1], rowWidth);

        // Matrix height:
        if (rowWidth > 0) {
            matrixSize[0] = Math.max(matrixSize[0], row + 1);
        }
    });
    return matrixSize;
};

var MatrixEditor = React.createClass({
    displayName: "MatrixEditor",

    mixins: [Changeable, JsonifyProps],
    propTypes: _extends({}, Changeable.propTypes, {
        matrixBoardSize: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,
        answers: React.PropTypes.arrayOf(React.PropTypes.arrayOf(React.PropTypes.number)),
        prefix: React.PropTypes.string,
        suffix: React.PropTypes.string,
        cursorPosition: React.PropTypes.arrayOf(React.PropTypes.number)
    }),

    getDefaultProps: function getDefaultProps() {
        return {
            matrixBoardSize: [3, 3],
            answers: [[]],
            prefix: "",
            suffix: "",
            cursorPosition: [0, 0]
        };
    },

    render: function render() {
        var _this2 = this;

        var matrixProps = _.extend({
            numericInput: true,
            onBlur: function onBlur() {},
            onFocus: function onFocus() {},
            trackInteraction: function trackInteraction() {}
        }, this.props);
        return React.createElement(
            "div",
            { className: "perseus-matrix-editor" },
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                " ",
                "Max matrix size:",
                " ",
                React.createElement(RangeInput, {
                    value: this.props.matrixBoardSize,
                    onChange: this.onMatrixBoardSizeChange,
                    format: this.props.labelStyle,
                    useArrowKeys: true })
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(Matrix, matrixProps)
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                " ",
                "Matrix prefix:",
                " ",
                React.createElement(Editor, {
                    ref: "prefix",
                    apiOptions: this.props.apiOptions,
                    content: this.props.prefix,
                    widgetEnabled: false,
                    onChange: function onChange(newProps) {
                        _this2.change({ prefix: newProps.content });
                    } })
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                " ",
                "Matrix suffix:",
                " ",
                React.createElement(Editor, {
                    ref: "suffix",
                    apiOptions: this.props.apiOptions,
                    content: this.props.suffix,
                    widgetEnabled: false,
                    onChange: function onChange(newProps) {
                        _this2.change({ suffix: newProps.content });
                    } })
            )
        );
    },

    onMatrixBoardSizeChange: function onMatrixBoardSizeChange(range) {
        var _this3 = this;

        var matrixSize = getMatrixSize(this.props.answers);
        if (range[0] !== null && range[1] !== null) {
            range = [Math.round(Math.min(Math.max(range[0], 1), MAX_BOARD_SIZE)), Math.round(Math.min(Math.max(range[1], 1), MAX_BOARD_SIZE))];
            var answers = _(Math.min(range[0], matrixSize[0])).times(function (row) {
                return _(Math.min(range[1], matrixSize[1])).times(function (col) {
                    return _this3.props.answers[row][col];
                });
            });
            this.props.onChange({
                matrixBoardSize: range,
                answers: answers
            });
        }
    }
});

module.exports = {
    name: "matrix",
    displayName: "Matrix/矩陣",
    widget: Matrix,
    editor: MatrixEditor,
    version: { major: 1, minor: 0 },
    transform: propTransform,
    staticTransform: staticTransform
};

},{"../components/range-input.jsx":263,"../components/text-input.jsx":266,"../editor.jsx":275,"../interactive2/interactive-util.js":281,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../perseus-api.jsx":294,"../renderer.jsx":298,"../util.js":303,"classnames":12,"react":246,"react-dom":95,"underscore":248}],321:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");
var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var InfoTip = require("react-components/js/info-tip.jsx");
var NumberInput = require("../components/number-input.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var RangeInput = require("../components/range-input.jsx");

var defaultImage = {
    url: null,
    top: 0,
    left: 0
};

var Measurer = React.createClass({
    displayName: "Measurer",

    propTypes: {
        box: React.PropTypes.arrayOf(React.PropTypes.number),
        image: React.PropTypes.shape({
            url: React.PropTypes.string,
            top: React.PropTypes.number,
            left: React.PropTypes.number
        }),
        showProtractor: React.PropTypes.bool,
        protractorX: React.PropTypes.number,
        protractorY: React.PropTypes.number,
        showRuler: React.PropTypes.bool,
        rulerLabel: React.PropTypes.string,
        rulerTicks: React.PropTypes.number,
        rulerPixels: React.PropTypes.number,
        rulerLength: React.PropTypes.number
    },

    getDefaultProps: function getDefaultProps() {
        return {
            box: [480, 480],
            image: {},
            showProtractor: true,
            protractorX: 7.5,
            protractorY: 0.5,
            showRuler: false,
            rulerLabel: "",
            rulerTicks: 10,
            rulerPixels: 40,
            rulerLength: 10
        };
    },

    getInitialState: function getInitialState() {
        return {};
    },

    render: function render() {
        var image = _.extend({}, defaultImage, this.props.image);
        return React.createElement(
            "div",
            {
                className: "perseus-widget perseus-widget-measurer " + "graphie-container above-scratchpad",
                style: { width: this.props.box[0], height: this.props.box[1] } },
            image.url && React.createElement("img", {
                src: image.url,
                style: {
                    top: image.top,
                    left: image.left
                } }),
            React.createElement("div", { className: "graphie", ref: "graphieDiv" })
        );
    },

    componentDidMount: function componentDidMount() {
        this.setupGraphie();
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        var shouldSetupGraphie = _.any(["box", "showProtractor", "showRuler", "rulerLabel", "rulerTicks", "rulerPixels", "rulerLength"], function (prop) {
            return prevProps[prop] !== this.props[prop];
        }, this);

        if (shouldSetupGraphie) {
            this.setupGraphie();
        }
    },

    setupGraphie: function setupGraphie() {
        var graphieDiv = ReactDOM.findDOMNode(this.refs.graphieDiv);
        $(graphieDiv).empty();
        var graphie = this.graphie = KhanUtil.currentGraph = KhanUtil.createGraphie(graphieDiv);

        var scale = [40, 40];
        var range = [[0, this.props.box[0] / scale[0]], [0, this.props.box[1] / scale[1]]];
        graphie.init({
            range: range,
            scale: scale
        });
        graphie.addMouseLayer({
            allowScratchpad: true
        });

        if (this.protractor) {
            this.protractor.remove();
        }

        if (this.props.showProtractor) {
            this.protractor = graphie.Protractor([this.props.protractorX, this.props.protractorY]);
        }

        if (this.ruler) {
            this.ruler.remove();
        }

        if (this.props.showRuler) {
            this.ruler = graphie.Ruler({
                center: [(range[0][0] + range[0][1]) / 2, (range[1][0] + range[1][1]) / 2],
                label: this.props.rulerLabel,
                pixelsPerUnit: this.props.rulerPixels,
                ticksPerUnit: this.props.rulerTicks,
                units: this.props.rulerLength
            });
        }
    },

    toJSON: function toJSON() {
        return {};
    },

    simpleValidate: function simpleValidate(rubric) {
        return Measurer.validate(this.toJSON(), rubric);
    },

    focus: $.noop,

    statics: {
        displayMode: "block"
    }
});

_.extend(Measurer, {
    validate: function validate(state, rubric) {
        return {
            type: "points",
            earned: 1,
            total: 1,
            message: null
        };
    }
});

var MeasurerEditor = React.createClass({
    displayName: "MeasurerEditor",

    mixins: [Changeable, JsonifyProps],
    className: "perseus-widget-measurer",

    propTypes: {
        box: React.PropTypes.arrayOf(React.PropTypes.number),
        image: React.PropTypes.shape({
            url: React.PropTypes.string,
            top: React.PropTypes.number,
            left: React.PropTypes.number
        }),
        showProtractor: React.PropTypes.bool,
        showRuler: React.PropTypes.bool,
        rulerLabel: React.PropTypes.string,
        rulerTicks: React.PropTypes.number,
        rulerPixels: React.PropTypes.number,
        rulerLength: React.PropTypes.number
    },

    getDefaultProps: function getDefaultProps() {
        return {
            box: [480, 480],
            image: {},
            showProtractor: true,
            showRuler: false,
            rulerLabel: "",
            rulerTicks: 10,
            rulerPixels: 40,
            rulerLength: 10
        };
    },

    render: function render() {
        var _this = this;

        var image = _.extend({}, defaultImage, this.props.image);

        return React.createElement(
            "div",
            { className: "perseus-widget-measurer" },
            React.createElement(
                "div",
                null,
                "\u80CC\u666F\u5716\u7247:"
            ),
            React.createElement(
                "div",
                null,
                "\u5716\u7247\u7DB2\u5740:",
                ' ',
                React.createElement("input", { type: "text",
                    className: "perseus-widget-measurer-url",
                    ref: "image-url",
                    value: image.url,
                    onChange: this._changeUrl }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u63D2\u5165\u5716\u7247\u7684\u9023\u7D50\u7DB2\u5740\u3002\u4F8B\u5982\uFF0C\u5148\u5C07\u5716\u7247\u4E0A\u50B3\u81F3 http://imgur.com \uFF0C\u518D\u5206\u4EAB\u5176\u5716\u7247\u7DB2\u5740 (Direct Link)\u3002 "
                    )
                )
            ),
            image.url && React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-left-col" },
                    React.createElement(NumberInput, { label: "\u8207\u4E0A\u65B9\u7684\u9593\u9694\u756B\u7D20:",
                        placeholder: 0,
                        onChange: this._changeTop,
                        value: image.top,
                        useArrowKeys: true })
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-right-col" },
                    React.createElement(NumberInput, { label: "\u8207\u5DE6\u65B9\u7684\u9593\u9694\u756B\u7D20:",
                        placeholder: 0,
                        onChange: this._changeLeft,
                        value: image.left,
                        useArrowKeys: true })
                )
            ),
            React.createElement(
                "div",
                null,
                "\u5716\u7247\u5927\u5C0F [\u5BEC, \u9AD8]:",
                ' ',
                React.createElement(RangeInput, {
                    onChange: this.change("box"),
                    value: this.props.box,
                    useArrowKeys: true })
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-left-col" },
                    React.createElement(PropCheckBox, { label: "\u986F\u793A\u76F4\u5C3A",
                        showRuler: this.props.showRuler,
                        onChange: this.props.onChange })
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-right-col" },
                    React.createElement(PropCheckBox, { label: "\u986F\u793A\u91CF\u89D2\u5668",
                        showProtractor: this.props.showProtractor,
                        onChange: this.props.onChange })
                )
            ),
            this.props.showRuler && React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "label",
                        null,
                        ' ',
                        "\u76F4\u5C3A\u55AE\u4F4D:",
                        ' ',
                        React.createElement(
                            "select",
                            {
                                onChange: function onChange(e) {
                                    return _this.change("rulerLabel", e.target.value);
                                },
                                value: this.props.rulerLabel },
                            React.createElement(
                                "option",
                                { value: "" },
                                "\u7121"
                            ),
                            React.createElement(
                                "optgroup",
                                { label: "\u516C\u5236" },
                                this.renderLabelChoices([["厘米", "mm"], ["公分", "cm"], ["公尺", "m"], ["公里", "km"]])
                            ),
                            React.createElement(
                                "optgroup",
                                { label: "\u82F1\u5236" },
                                this.renderLabelChoices([["英吋", "in"], ["英呎", "ft"], ["碼", "yd"], ["英哩", "mi"]])
                            )
                        )
                    )
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "label",
                        null,
                        ' ',
                        "\u6BCF\u55AE\u4F4D\u5206\u5272\u6578:",
                        ' ',
                        React.createElement(
                            "select",
                            {
                                onChange: function onChange(e) {
                                    return _this.change("rulerTicks", +e.target.value);
                                },
                                value: this.props.rulerTicks },
                            _.map([1, 2, 4, 8, 10, 16], function (n) {
                                return React.createElement(
                                    "option",
                                    { value: n },
                                    n
                                );
                            })
                        )
                    )
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(NumberInput, { label: "\u6BCF\u55AE\u4F4D\u9577\u7684\u756B\u7D20:",
                        placeholder: 40,
                        onChange: this.change("rulerPixels"),
                        value: this.props.rulerPixels,
                        useArrowKeys: true })
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(NumberInput, { label: "\u76F4\u5C3A\u9577\u5EA6:",
                        placeholder: 10,
                        onChange: this.change("rulerLength"),
                        value: this.props.rulerLength,
                        useArrowKeys: true })
                )
            )
        );
    },

    _changeUrl: function _changeUrl(e) {
        this._changeImage("url", e.target.value);
    },

    _changeTop: function _changeTop(newTop) {
        this._changeImage("top", newTop);
    },

    _changeLeft: function _changeLeft(newLeft) {
        this._changeImage("left", newLeft);
    },

    _changeImage: function _changeImage(subProp, newValue) {
        var image = _.clone(this.props.image);
        image[subProp] = newValue;
        this.change("image", image);
    },

    renderLabelChoices: function renderLabelChoices(choices) {
        return _.map(choices, function (nameAndValue) {
            return React.createElement(
                "option",
                { value: nameAndValue[1] },
                nameAndValue[0]
            );
        });
    }
});

var propUpgrades = {
    1: function (_2) {
        function _(_x) {
            return _2.apply(this, arguments);
        }

        _.toString = function () {
            return _2.toString();
        };

        return _;
    }(function (v0props) {
        var v1props = _(v0props).chain().omit("imageUrl", "imageTop", "imageLeft").extend({
            image: {
                url: v0props.imageUrl,
                top: v0props.imageTop,
                left: v0props.imageLeft
            }
        }).value();
        return v1props;
    })
};

module.exports = {
    name: "measurer",
    displayName: "Measurer/直尺、量角器",
    widget: Measurer,
    editor: MeasurerEditor,
    version: { major: 1, minor: 0 },
    propUpgrades: propUpgrades,
    hidden: false
};

},{"../components/number-input.jsx":261,"../components/prop-check-box.jsx":262,"../components/range-input.jsx":263,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95}],322:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require("react");

var JsonifyProps = require("../mixins/jsonify-props.jsx");
var Changeable = require("../mixins/changeable.jsx");
var NumberInput = require("../components/number-input.jsx");
var TextInput = require("../components/text-input.jsx");

var MoleculeWidgetEditor = React.createClass({
    displayName: "MoleculeWidgetEditor",

    propTypes: _extends({}, Changeable.propTypes, {
        rotationAngle: React.PropTypes.number,
        smiles: React.PropTypes.string
    }),

    change: function change() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return Changeable.change.apply(this, args);
    },


    updateMolecule: function updateMolecule(newValue) {
        this.change({ smiles: newValue });
    },

    updateRotation: function updateRotation(newValue) {
        this.change({ rotationAngle: newValue });
    },

    toJSON: function toJSON() {
        return JsonifyProps.toJSON.call(this);
    },


    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "SMILES:\xA0",
                    React.createElement(TextInput, {
                        onChange: this.updateMolecule,
                        value: this.props.smiles
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "Rotation (deg):\xA0",
                    React.createElement(NumberInput, {
                        onChange: this.updateRotation,
                        value: this.props.rotationAngle
                    })
                )
            )
        );
    }
});

module.exports = MoleculeWidgetEditor;

},{"../components/number-input.jsx":261,"../components/text-input.jsx":266,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246}],323:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable brace-style, object-curly-spacing */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

var React = require("react");

var draw = require("./molecule/molecule-drawing.jsx");

var _require = require("./molecule/molecule-layout.jsx"),
    layout = _require.layout;

var SmilesParser = require("./molecule/smiles-parser.jsx");

var parse = SmilesParser.parse;
var ParseError = SmilesParser.ParseError;

var borderSize = 30;

var Molecule = React.createClass({
    displayName: "Molecule",

    propTypes: {
        id: React.PropTypes.string.isRequired,
        rotationAngle: React.PropTypes.number,
        smiles: React.PropTypes.string
    },

    getInitialState: function getInitialState() {
        return { parsedSmiles: null, error: null };
    },

    componentWillMount: function componentWillMount() {
        this.stateFromSmiles(this.props.smiles);
    },

    componentDidMount: function componentDidMount() {
        this.canvasRender();
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.stateFromSmiles(nextProps.smiles);
    },

    componentDidUpdate: function componentDidUpdate() {
        this.canvasRender();
    },

    stateFromSmiles: function stateFromSmiles(smiles) {
        try {
            this.setState({
                parsedSmiles: parse(smiles),
                error: null
            });
        } catch (e) {
            if (e instanceof ParseError) {
                this.setState({ error: e.message });
            } else {
                throw e;
            }
        }
    },

    setCanvasBounds: function setCanvasBounds(canvas, items) {
        var xmax = Math.max.apply(Math, _toConsumableArray(items.map(function (item) {
            return item.pos ? item.pos[0] : -Infinity;
        })));
        var ymax = Math.max.apply(Math, _toConsumableArray(items.map(function (item) {
            return item.pos ? item.pos[1] : -Infinity;
        })));
        var xmin = Math.min.apply(Math, _toConsumableArray(items.map(function (item) {
            return item.pos ? item.pos[0] : Infinity;
        })));
        var ymin = Math.min.apply(Math, _toConsumableArray(items.map(function (item) {
            return item.pos ? item.pos[1] : Infinity;
        })));
        var width = xmax - xmin + 2 * borderSize;
        var height = ymax - ymin + 2 * borderSize;
        canvas.width = width;
        canvas.height = height;
        return [borderSize - xmin, borderSize - ymin];
    },

    canvasRender: function canvasRender() {
        // Since canvas drawing happens only through an imperative API, we sync
        // up the component with the canvas here, which happens when the
        // component mounts or updates.
        if (!!this.state.error || !this.state.parsedSmiles) {
            return;
        }
        var items = layout(this.state.parsedSmiles, this.props.rotationAngle);
        var canvas = this.refs.canvas;
        var translation = this.setCanvasBounds(canvas, items);
        var ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(translation[0], translation[1]);
        draw(ctx, items);
        ctx.restore();
    },
    render: function render() {
        // TODO(colin): escape the punctuation in the SMILES alt text for
        // screen readers?
        var content = React.createElement(
            "canvas",
            {
                className: "molecule-canvas",
                id: this.props.id + "-molecule",
                ref: "canvas"
            },
            "A molecular structure drawing.  SMILES notation:",
            this.props.smiles,
            "."
        );
        if (this.state.error) {
            content = React.createElement(
                "div",
                { className: "error" },
                this.state.error
            );
        }
        return React.createElement(
            "div",
            { className: "molecule-canvas" },
            content
        );
    }
});

var MoleculeWidget = React.createClass({
    displayName: "MoleculeWidget",

    propTypes: {
        rotationAngle: React.PropTypes.number,
        smiles: React.PropTypes.string,
        widgetId: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return { rotationAngle: 0 };
    },

    simpleValidate: function simpleValidate() {
        return { type: "points", earned: 0, total: 0, message: null };
    },

    getUserInput: function getUserInput() {
        return [];
    },

    validate: function validate(state, rubric) {
        // TODO(colin): this is here as part of the interface for a component.
        // Figure out if there is something more appropriate that this should
        // return.
        return {
            type: "points",
            earned: 0,
            total: 0,
            message: null
        };
    },

    render: function render() {
        return React.createElement(Molecule, {
            id: this.props.widgetId,
            smiles: this.props.smiles,
            rotationAngle: this.props.rotationAngle
        });
    }
});

module.exports = {
    name: "molecule-renderer",
    displayName: "Molecule renderer/分子式",
    hidden: false,
    widget: MoleculeWidget,
    molecule: Molecule
};

},{"./molecule/molecule-drawing.jsx":324,"./molecule/molecule-layout.jsx":325,"./molecule/smiles-parser.jsx":326,"react":246}],324:[function(require,module,exports){
"use strict";

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable brace-style */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

/**
 * Draw some text into a 2D canvas drawing context.
 *
 * Args:
 *     ctx: the 2D drawing context
 *     item: the rendering instruction for the text.  Must look like: {
 *         type: "text",
 *         pos: [x, y],
 *         value: "some text to draw",
 *     }
 *
 */
function drawText(ctx, item) {
    if (item.value === null) {
        return;
    }
    ctx.fillStyle = styles.fgColor;
    ctx.font = styles.font;
    ctx.fillText(item.value, item.pos[0] - styles.fontSizePx / 2 + 1, item.pos[1] + styles.fontSizePx / 2);
}

/**
 * Draw a double line into a 2D canvas drawing context.
 *
 * Apparently the way you do this is to stroke an extra-wide line in the
 * foreground color and then a smaller line in the background color. 5:3
 * foreground:background width looks reasonable for drawing chemical bonds.
 *
 * Args:
 *     ctx: the 2D drawing context
 *     item: the rendering instruction for the line.  Must look like: {
 *         type: "line:double",
 *         startPos: [x, y],
 *         endPos: [x, y],
 *     }
 */
function drawDoubleLine(ctx, item) {
    // Outer line that forms both of the bond lines.
    var path = new Path2D();
    ctx.lineWidth = 5 * styles.lineWidth;
    ctx.strokeStyle = styles.fgColor;
    path.moveTo(item.startPos[0], item.startPos[1]);
    path.lineTo(item.endPos[0], item.endPos[1]);
    ctx.stroke(path);

    // Inner white line that separates the two bond lines.
    path = new Path2D();
    ctx.lineWidth = 3 * styles.lineWidth;
    ctx.strokeStyle = styles.bgColor;
    path.moveTo(item.startPos[0], item.startPos[1]);
    path.lineTo(item.endPos[0], item.endPos[1]);
    ctx.stroke(path);
}

/**
 * Draw a triple line into a 2D canvas drawing context.
 *
 * Following the strategy for the double line, we stroke a very wide
 * foreground-color line, then a medium background-color line, then a narrow
 * foreground-color line.
 *
 * Args:
 *     ctx: the 2D drawing context
 *     item: the rendering instruction for the line.  Must look like: {
 *         type: "line:triple",
 *         startPos: [x, y],
 *         endPos: [x, y],
 *     }
 */
function drawTripleLine(ctx, item) {
    // TODO(colin): consolidate duplicated code from the three line drawing
    // functions.

    // Outer line that will form the two outer bond lines.
    var path = new Path2D();
    ctx.lineWidth = 7 * styles.lineWidth;
    ctx.strokeStyle = styles.fgColor;
    path.moveTo(item.startPos[0], item.startPos[1]);
    path.lineTo(item.endPos[0], item.endPos[1]);
    ctx.stroke(path);

    // Middle white line that separates the bonds
    path = new Path2D();
    ctx.lineWidth = 5 * styles.lineWidth;
    ctx.strokeStyle = styles.bgColor;
    path.moveTo(item.startPos[0], item.startPos[1]);
    path.lineTo(item.endPos[0], item.endPos[1]);
    ctx.stroke(path);

    // Inner line that forms the middle bond line.
    drawLine(ctx, item);
}

/**
 * Draw a single line into a 2D canvas drawing context
 *
 * Args:
 *     ctx: the 2D drawing context
 *     item: the rendering instruction for the line.  Must look like: {
 *         type: "line:single",
 *         startPos: [x, y],
 *         endPos: [x, y],
 *     }
 */
function drawLine(ctx, item) {
    var path = new Path2D();
    ctx.lineWidth = styles.lineWidth;
    ctx.strokeStyle = styles.fgColor;
    path.moveTo(item.startPos[0], item.startPos[1]);
    path.lineTo(item.endPos[0], item.endPos[1]);
    ctx.stroke(path);
}

/**
 * Lookup table that maps drawing instruction types to the functions that
 * render them.
 */
var drawingFuncs = {
    text: drawText,
    "line:single": drawLine,
    "line:double": drawDoubleLine,
    "line:triple": drawTripleLine
};

/**
 * Draw a single rendering instruction into a 2D canvas drawing context.
 */
function drawItem(ctx) {
    return function (item) {
        drawingFuncs[item.type](ctx, item);
    };
}

/**
 * Lookup table for drawing priorities.
 *
 * Types with lower priorities are drawn first.
 */
var ordering = {
    "line:single": 0,
    "line:double": 0,
    "line:triple": 0,
    text: 1
};

/**
 * Sorting comparison function that orders rendering instructions according to
 * their type's priority.
 */
function compareElements(item0, item1) {
    return ordering[item0.type] - ordering[item1.type];
}

/**
 * Draw an array of rendering instructions into a 2D canvas drawing context.
 */
function draw(ctx, items) {
    items.sort(compareElements).forEach(drawItem(ctx));
}

var styles = {
    bgColor: 'rgb(255, 255, 255)',
    fgColor: 'rgb(0, 0, 0)',
    fontSizePx: 12,
    lineWidth: 1
};

styles.font = styles.fontSizePx + "px sans";

module.exports = draw;

},{}],325:[function(require,module,exports){
"use strict";

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable brace-style */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

/**
 * A molecule layout engine.
 *
 * This module transforms the SMILES syntax tree into a set of rendering
 * instructions.  A rendering instruction is an object indicating what type of
 * thing to render (e.g. text or line), where to render it, and any other style
 * properties needed.
 *
 * For instance, an oxygen atom might be rendered as
 * {type: "text", value: "O", pos: [0, 0], idx: "1,0"}
 */

// Default length of the bond.  This currently corresponds directly to pixels
// in the renderer, but we may want this just to be arbitrary in the future.
var bondLength = 30;

/**
 * Compute a coordinate by moving an angle and length from an origin point.
 *
 * Args:
 *     origin: a list of the [x, y] coordinates of the origin
 *     angle: an angle in degrees from the origin, following the typical
 *         convention of +x axis = 0 degrees, +y axis = 90 degrees.
 *     length: the distance to the new point
 * Return:
 *     a two-element list containing the [x, y] coordinates of the point.
 */
function polarAdd(origin, angle, length) {
    var x = origin[0];
    var y = origin[1];
    return [x + Math.cos(angle * 2 * Math.PI / 360) * length, y + -1.0 * Math.sin(angle * 2 * Math.PI / 360) * length];
}

/**
 * Compute the layout for a single atom.
 *
 * Args:
 *     atom: the atom node for which layout is being created, as returned from
 *         convertTree; the computed position of this atom is added to this
 *         object in place, in addition to being returned in the layout
 *         instruction.
 *         TODO(colin): refactor so that we don't need to modify this in place
 *     atoms: the list of all atoms, as returned from convertTree, used to
 *         position this atom appropriately relative to its neighbors
 *     bonds: the list of all bonds, as returned from convertTree, used to
 *         determine the geometry based on bond type
 *     rotationAngle: a constant rotation for the whole molecule (in degrees)
 *
 * Return:
 *     a rendering instruction for the atom, containing a type (text), the text
 *     to render, the position, and the atom index
 */
function atomLayout(atom, atoms, bonds, rotationAngle) {
    var textValue = atom.symbol;
    if (textValue === "C" && Object.keys(atoms).length !== 1) {
        // By convention, don't render the C for carbon in a chain.
        textValue = null;
    }

    if (atom.idx === "1,0") {
        // The first atom is special-cased because there are no neighbors for
        // relative positioning.
        var _pos = [0, 0];
        atom.pos = _pos;
        // Conventionally, molecules are rendered where the first bond is not
        // horizontal, but at a 30 degree angle, so subtract 30 degrees for the
        // first atom's direction.
        atom.baseAngle = -30 + rotationAngle;
        return { type: "text", value: textValue, pos: _pos, idx: atom.idx };
    }
    // If we're an atom with any other index than the case just handled, we're
    // guaranteed to have a neighbor who has a defined position.
    var prevPositionedAtom = atoms[atom.connections.find(function (c) {
        return atoms[c].pos;
    })];

    // Find this atom's index in the previous atom's connections
    var myIndex = prevPositionedAtom.connections.indexOf(atom.idx);

    var baseAngleIncrement = 60;
    var angleIncrement = 120;
    if (prevPositionedAtom.connections.length === 4) {
        // By convention, if an atom has 4 bonds, we represent it with 90
        // degree angles in 2D, even though it would have tetrahedral geometry
        // with ~110 degree angles in 3D.
        angleIncrement = 90;
        baseAngleIncrement = 90;
    } else if (bonds.find(function (bond) {
        return bond.bondType === "triple" && bond.to === atom.idx;
    }) || bonds.find(function (bond) {
        return bond.bondType === "triple" && bond.to === prevPositionedAtom.idx;
    })) {
        // Triple bonds have a bond angle of 180 degrees, so don't change the
        // direction in which we made the previous bond.
        angleIncrement = 0;
        baseAngleIncrement = 0;
    }

    var angle = 0;
    var idxPath = prevPositionedAtom.idx.split(":");
    var lastAtomIdx = idxPath[idxPath.length - 1].split(",")[0];

    // Conventionally, a single chain of atoms is rendered as a zig-zag pattern
    // with 120 degree angles.  This means we need to flip the angle every
    // other atom.  The parser ensures that indices always alternate odd-even,
    // including taking into account branch points.
    // TODO(colin): don't depend on the parser's indexing scheme and just track
    // this entirely in the layout engine.
    if (parseInt(lastAtomIdx) % 2 !== 0) {
        angle = prevPositionedAtom.baseAngle - (baseAngleIncrement - angleIncrement * myIndex);
    } else {
        angle = prevPositionedAtom.baseAngle + (baseAngleIncrement - angleIncrement * myIndex);
    }

    var pos = polarAdd(prevPositionedAtom.pos, angle, bondLength);

    atom.pos = pos;
    atom.baseAngle = angle;

    return { type: "text", value: textValue, pos: pos, idx: atom.idx };
}

/**
 * Get the start and end position for a bond connecting two atoms.
 *
 * If we have non-carbon atoms that render with explicit letters connected by a
 * bond, we don't want the line for the bond to extend into the lettering for
 * the atom.
 *
 * This function returns the start and end positions of the bond's line, taking
 * into account that one or both end points might need to be moved to make room
 * for text.
 *
 * TODO(colin): this makes assumptions about the relative sizes of the length
 * of a bond and the text.  Think about alternate ways to represent this that
 * might not have that problem.
 */
function maybeShrinkLines(fromAtom, toAtom) {
    var shrinkFactor = 0.25;
    var fromPos = [fromAtom.pos[0], fromAtom.pos[1]];
    var toPos = [toAtom.pos[0], toAtom.pos[1]];
    if (fromAtom.symbol !== "C") {
        fromPos = [toAtom.pos[0] - (1 - shrinkFactor) * (toAtom.pos[0] - fromAtom.pos[0]), toAtom.pos[1] - (1 - shrinkFactor) * (toAtom.pos[1] - fromAtom.pos[1])];
    }
    if (toAtom.symbol !== "C") {
        // For carbon atoms, conventionally we don't draw any letter, so this
        // special cases drawing the bond lines all the way to the point where
        // they meet.
        toPos = [fromAtom.pos[0] - (1 - shrinkFactor) * (fromAtom.pos[0] - toAtom.pos[0]), fromAtom.pos[1] - (1 - shrinkFactor) * (fromAtom.pos[1] - toAtom.pos[1])];
    }
    return [fromPos, toPos];
}

/**
 * Compute the layout for a bond between two atoms.
 *
 * Args:
 *     bond: the bond node for which the layout is being computed, as returned
 *         by convertTree
 *     atoms: the list of all atoms returned by convertTree, which should
 *         already have been processed for layout and thus have positions set
 *
 * Return:
 *     a rendering instruction for the bond containing a type
 *     (line:{single,double,triple}) and the line's endpoints
 */
function bondLayout(bond, atoms) {
    var fromAtom = atoms[bond.from];
    var toAtom = atoms[bond.to];
    var startAndEndPos = maybeShrinkLines(fromAtom, toAtom);
    return {
        type: "line:" + bond.bondType,
        startPos: startAndEndPos[0],
        endPos: startAndEndPos[1]
    };
}

/**
 * Convert an array of atom indices to a single string unique identifier.
 *
 * For linear molecules, or for atoms in the main chain, this will just be the
 * atom index, something like "0,1".  For branched molecules, however, we
 * uniquely identify atoms by an array of atoms where the branching happened,
 * followed by the index in the current branch (like ["0,1", "1,2", "1,1"]).
 * This function just joins the parts with a colon so that we can have nice
 * object keys that still track the series of branches to get to an atom, which
 * is guaranteed to be a unique identifier.
 *
 */
function idxString(idx) {
    return idx.join(":");
}

/**
 * Convert the parse tree output by the parser into an ordered list of atoms
 * and bonds to render.
 *
 * Args:
 *     atoms: the output list of atoms that we're in the process of building.
 *         This should be the empty list if not being called recursively.
 *     bonds: the output list of bonds that we're in the process of building.
 *         This should be the empty list if not being called recursively.
 *     tree: the parse tree generated by the SMILES parser module.
 *
 * Return:
 *     the final value of atoms and bonds, which are lists of all the atom
 *     nodes and bond nodes, respectively, that need to be rendered.
 */
function convertTree(atoms, bonds, tree) {
    if (tree === null) {
        return [atoms, bonds];
    }
    if (tree.type === "atom") {
        var treeIdx = idxString(tree.idx);
        atoms[treeIdx] = { idx: treeIdx, symbol: tree.symbol, connections: [] };
        if (tree.bonds) {
            tree.bonds.forEach(function (b) {
                var toIdx = idxString(b.to.idx);
                atoms[treeIdx].connections.push(toIdx);
                bonds.push({ from: treeIdx, to: toIdx, bondType: b.bondType });
                convertTree(atoms, bonds, b.to);
                atoms[toIdx].connections.push(treeIdx);
            });
        }
    }
    return [atoms, bonds];
}

/**
 * Recursively process the queue of atoms that need to have layout computed.
 *
 * Args:
 *     outputs: the array of atom rendering instructions we're in the process
 *         of building.  This should be the empty array if not being called
 *         recursively.
 *     atomProcessingQueue: the array of unique identifier strings (see the
 *         comment for idxString for more information about these) of atoms
 *         currently in line to be processed.  When not being called
 *         recursively, this should be a array with a single element, the
 *         unique identifier of the first atom in the structure ("1,0" in the
 *         current scheme).
 *     atoms: the array of all atom nodes to be rendered, as returned by
 *         convertTree
 *     bonds: the array of all bond nodes to be rendered, as returned by
 *         convertTree
 *
 * Return:
 *     an array of rendering instructions for all the atoms in the molecule
 */
function atomLayoutHelper(outputs, atomProcessingQueue, atoms, bonds, rotationAngle) {
    if (atomProcessingQueue.length === 0) {
        return outputs;
    }

    var queuedAtomIdx = atomProcessingQueue.shift();
    var atom = atoms[queuedAtomIdx];
    atom.connections.forEach(function (c) {
        if (!atoms[c].pos) {
            atomProcessingQueue.push(c);
        }
    });
    return atomLayoutHelper(outputs.concat(atomLayout(atom, atoms, bonds, rotationAngle)), atomProcessingQueue, atoms, bonds, rotationAngle);
}

/**
 * Recursively process the queue of bonds that need to have layout computed.
 *
 * Args:
 *     outputs: the array of bond rendering instructions we're in the process
 *         of building.  This should be the empty array or the array of all
 *         atom rendering instructions if not being called recursively.
 *     atoms: the array of all atom nodes to be rendered, as returned by
 *         convertTree
 *     bonds: the array of all bond nodes to be rendered, as returned by
 *         convertTree
 *
 * Return:
 *     an array of rendering instructions for all the bonds in the molecule
 *     concatenated to the initial value of outputs
 */
function bondLayoutHelper(outputs, atoms, bonds) {
    if (bonds.length === 0) {
        return outputs;
    }
    return bondLayoutHelper(outputs.concat(bondLayout(bonds[0], atoms)), atoms, bonds.slice(1));
}

/**
 * Compute an array of rendering instructions from the parse tree of a molecule.
 *
 * Args:
 *     tree: the parse tree as returned by the SMILES parser module
 *     rotationAngle: a global rotation (in degrees) to be applied to the whole
 *         molecule; this is manually adjustable in the widget.
 *
 * Return:
 *     an array of rendering instructions for all the atoms and bonds in the
 *     molecule suitable for processing by the renderer
 */
function layout(tree, rotationAngle) {
    var converted = convertTree({}, [], tree);
    var atoms = converted[0];
    var bonds = converted[1];
    var outputs = atomLayoutHelper([], ["1,0"], atoms, bonds, rotationAngle);
    return bondLayoutHelper(outputs, atoms, bonds);
}

module.exports = {
    layout: layout,
    // The remainder are exported for testing and are not intended for external
    // use.
    _atomLayout: atomLayout,
    _bondLayout: bondLayout,
    _bondLength: bondLength,
    _convertTree: convertTree
};

},{}],326:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Regexp defining characters that are valid SMILES characters that this parser
// can parse.  In addition to serving as a sort of validation, this also keeps
// out unimplemented features (like cycles and stereochemistry), which use
// additional characters.
var smilesRe = new RegExp("^[A-Za-z\\[\\]()=#+-]*$");

// Regexp defining what characters are valid as atom names.  This includes
// common 1-character elements, Cl and Br for convenience, and the open
// bracket, which can be used to include anything as an atom name.
var atomRe = new RegExp("^(Cl|Br|[CONPSFBI]|\\[)");

function ParseError(message) {
    this.message = message;
}

/**
 * Perform a functional update of a possibly nested object.
 *
 * Args:
 *     obj: an object, will not be modified
 *     keylist: a list of keys whose values will be updated in the object.
 *         This represents a path to a value inside nested objects.  For
 *         example, if keylist == ["a", "b", "c"], then a new object is
 *         returned with obj["a"]["b"]["c"] updated.  Note that if any of the
 *         keys is not already present, this will insert {} as a default value
 *         for that key.
 *     val: the new value to associate with the keypath
 *
 * Return: a new object, which is a shallow copy of the original with the value
 *     at the specified keypath replaced.
 */
function _mset(obj, keylist, val) {
    var k0 = keylist[0];
    var rest = keylist.slice(1);
    var newObj = void 0;
    if (Array.isArray(obj)) {
        newObj = [].concat(_toConsumableArray(obj));
    } else {
        newObj = _extends({}, obj || {});
    }
    var newVal = val;
    if (rest.length > 0) {
        newVal = _mset(newObj[k0], rest, val);
    }
    newObj[k0] = newVal;
    return newObj;
}

/**
 * Perform a functional increment of a value in a nested object.
 *
 * Args:
 *     obj: an object; this will not be modified
 *     keylist: a list of keys representing a path into a nested object.  (See
 *         `_mset` for examples.)
 *
 * Return:
 *     an object that is a shallow copy of obj, with the value at the specified
 *     path incremeneted.
 */
function _inc(obj, keylist) {
    var val = keylist.reduce(function (acc, elt) {
        return acc[elt];
    }, obj);

    return _mset(obj, keylist, val + 1);
}

function validate(smiles) {
    return smilesRe.test(smiles);
}

/**
 * Parse a bond modifier character, updating the context object so that the
 * next bond created has this modifier.
 */
function parseBondModifier(smiles, ctx) {
    var firstChar = smiles[0];
    var rest = smiles.slice(1);
    if (firstChar === "=") {
        return parse(rest, _mset(ctx, ["bond", "bondType"], "double"));
    } else if (firstChar === "#") {
        return parse(rest, _mset(ctx, ["bond", "bondType"], "triple"));
    }
    throw new ParseError("Invalid character: " + firstChar);
}

/**
 * Slice the input string, removing a parenthesized expression.
 * (Will handle nested parentheses.)
 *
 * parenStack should be a list containing any open parentheses already
 * encountered.  (Usually, this will be ["("])
 */
function sliceFromMatchingCloseParen(smiles, parenStack) {
    if (parenStack.length === 0) {
        return smiles;
    }

    if (smiles === "") {
        throw new ParseError("Mismatched parentheses");
    }

    var firstChar = smiles[0];
    var rest = smiles.slice(1);

    if (firstChar === "(") {
        return sliceFromMatchingCloseParen(rest, parenStack.concat(firstChar));
    }

    if (firstChar === ")") {
        return sliceFromMatchingCloseParen(rest, parenStack.slice(1));
    }

    return sliceFromMatchingCloseParen(rest, parenStack);
}

/**
 * Parse a branch, as indicated by the presence of a parenthesized experession.
 *
 * This returns a list of all branches (including the continuation of the
 * backbone) that should be added to the previous atom's bond list.
 */
function parseParenthesizedExpression(smiles, ctx) {
    var firstChar = smiles[0];
    var rest = smiles.slice(1);
    if (firstChar === "(") {
        var newCtx = _extends({}, ctx, { parens: ctx.parens + "(" });
        // increment the branch index
        newCtx = _inc(ctx, ["idx", ctx.idx.length - 1, 1]);

        var inBranchIdx = -1;
        if (ctx.idx[ctx.idx.length - 1][0] % 2 === 0) {
            // HACK(colin): this is so that we preserve the odd/even series in
            // indices in branches; the layout engine uses this to select
            // angles, and if we don't do this, editing one part of a molecule
            // can cause another to flop around oddly.
            // TODO(colin): this should just start at 0 all the time, and the
            // layout engine should figure out continuity.
            inBranchIdx = 0;
        }
        var parenCtx = _extends({}, newCtx, {
            idx: newCtx.idx.concat([[inBranchIdx, 0]]),
            parens: newCtx.parens.concat("(")
        });
        var parenExpr = parse(rest, parenCtx);
        var remainder = parse(sliceFromMatchingCloseParen(rest, ["("]), newCtx);
        return [parenExpr].concat(remainder);
    } else if (firstChar === ")") {
        if (ctx.parens[ctx.parens.length - 1] !== "(") {
            throw new ParseError("Mismatched parentheses");
        }
        return null;
    } else {
        throw new ParseError("Invalid bare character: " + firstChar);
    }
}

/**
 * Get the symbol of the next atom in the molecule.
 *
 * Return a 2-element list containing that symbol and the remainder of the
 * molecule.
 */
function readAtomSymbol(smiles, _ctx) {
    var sym = null;
    var rest = null;
    if (smiles[0] === "[") {
        var closingIdx = smiles.indexOf("]");
        if (closingIdx === -1) {
            return ["", smiles];
        }
        sym = smiles.slice(1, closingIdx);
        rest = smiles.slice(closingIdx + 1);
    } else {
        var match = atomRe.exec(smiles);
        sym = match[1];
        rest = smiles.slice(sym.length);
    }

    return [sym, rest];
}

/**
 * Parse the next atom in the molecule, returning an atom object if this is the
 * first atom in the molecule, or a bond object with this atom as the
 * destination of the bond if this is not the first atom.
 */
function parseAtom(smiles, ctx) {
    var symbolInfo = readAtomSymbol(smiles, ctx);
    var atom = symbolInfo[0];
    if (atom === "") {
        return ["error", "Unable to parse bracketed atom."];
    }
    var rest = symbolInfo[1];

    // Atoms are indexed by a list of two-element lists.  In each two-element
    // list, the first element is the atom counter, and the second element is
    // the branch counter.  Branches are 1-indexed so that the main chain of
    // the molecule can be indicated by 0.  Atoms may be either 0- or
    // 1-indexed, defaulting to 1, to maintain a alternating pattern of
    // odd/even indices. So, for example, if an atom has a branch off the main
    // chain, and its atom index is x, then the indices of atoms are:
    //     Atom where branch occurs: [[x, 0]]
    //     First atom in the branch: [[x, 1], [1, 0]]  (assuming x is even)
    //     Next atom in the main chain: [[x + 1, 0]]

    // increment the atom counter and reset the branch counter
    var newCtx = _mset(ctx, ["idx", ctx.idx.length - 1], [1 + ctx.idx[ctx.idx.length - 1][0], 0]);
    var restOfMolecule = parse(rest, _mset(newCtx, ["bond", "bondType"], "single"));
    if (!Array.isArray(restOfMolecule) && !!restOfMolecule) {
        //TODO(colin): fix this awkwardness.
        restOfMolecule = [restOfMolecule];
    }
    var atomObj = {
        type: "atom",
        symbol: atom,
        bonds: restOfMolecule,
        idx: newCtx.idx
    };
    if (ctx.bond) {
        return {
            type: "bond",
            bondType: ctx.bond.bondType,
            to: atomObj
        };
    }
    return atomObj;
}

function startsWithAtom(s) {
    return atomRe.test(s);
}

function isModifierChar(s) {
    return s === "=" || s === "#";
}

/**
 * Parse a SMILES string to an internal tree representation.
 *
 * Args:
 *   smiles [string]: a string representing the molecule.
 *
 * Returns: the parse tree (see top-of file docstring for details).
 *
 * Throws:
 *     ParseError: if the input is not valid SMILES or contains features not
 *         yet implemented.
 */
function parse(smiles, ctx) {
    if (!validate(smiles)) {
        throw new ParseError("Invalid input.");
    }

    if (!smiles || smiles.length === 0) {
        return null;
    }

    if (startsWithAtom(smiles)) {
        return parseAtom(smiles, ctx || {
            idx: [[0, 0]],
            parens: [],
            stack: [],
            bondModifiers: []
        });
    } else if (isModifierChar(smiles[0])) {
        // TODO(colin): add a better error message in the case where the input
        // is invalid and starts with a modifier character?
        return parseBondModifier(smiles, ctx);
    } else {
        // TODO(colin): add additional cases for unimplemented bits of SMILES
        // syntax.
        return parseParenthesizedExpression(smiles, ctx);
    }
}

module.exports = { parse: parse, ParseError: ParseError };

},{}],327:[function(require,module,exports){
"use strict";

var React = require('react');

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var ButtonGroup = require("react-components/js/button-group.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var Interactive2 = require("../interactive2.js");
var NumberInput = require("../components/number-input.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var RangeInput = require("../components/range-input.jsx");

var Graphie = require("../components/graphie.jsx");
var MovablePoint = Graphie.MovablePoint;
var Line = Graphie.Line;
var Label = Graphie.Label;

var knumber = KhanUtil.knumber;
var kpoint = KhanUtil.kpoint;

var bound = function bound(x, gt, lt) {
    return Math.min(Math.max(x, gt), lt);
};
var deepEq = require("../util.js").deepEq;
var assert = require("../interactive2/interactive-util.js").assert;

var reverseRel = {
    ge: "le",
    gt: "lt",
    le: "ge",
    lt: "gt"
};

var toggleStrictRel = {
    ge: "gt",
    gt: "ge",
    le: "lt",
    lt: "le"
};

function formatImproper(n, d) {
    if (d === 1) {
        return "" + n;
    } else {
        return n + "/" + d;
    }
}

function formatMixed(n, d) {
    if (n < 0) {
        return "-" + formatMixed(-n, d);
    }
    var w = Math.floor(n / d);
    if (w === 0) {
        return formatImproper(n, d);
    } else if (n - w * d === 0) {
        return "" + w;
    } else {
        return w + "\\:" + formatImproper(n - w * d, d);
    }
}

function formatNonReduced(n, d, base) {
    var factor = Math.floor(base / d);
    return formatImproper(n * factor, base);
}

var _label = function _label(graphie, labelStyle, pos, value, base) {
    value = value || pos;

    // TODO(jack): Find out if any exercises have "decimal ticks" set,
    // and if so, re-save them and remove this check.
    if (labelStyle === "decimal" || labelStyle === "decimal ticks") {
        return graphie.label([pos, -0.53], Math.round(value * 100) / 100, "center");
    } else if (labelStyle === "improper") {
        var frac = KhanUtil.toFraction(value);
        return graphie.label([pos, -0.53], formatImproper(frac[0], frac[1]), "center");
    } else if (labelStyle === "mixed") {
        var frac = KhanUtil.toFraction(value);
        return graphie.label([pos, -0.53], formatMixed(frac[0], frac[1]), "center");
    } else if (labelStyle === "non-reduced") {
        var frac = KhanUtil.toFraction(value);
        return graphie.label([pos, -0.53], formatNonReduced(frac[0], frac[1], base), "center");
    }
};

var TickMarks = Graphie.createSimpleClass(function (graphie, props) {
    // Avoid infinite loop
    if (!_.isFinite(props.tickStep) || props.tickStep <= 0) {
        return []; // this has screwed me for the last time!
    }

    var results = [];

    // For convenience, extract some props into separate variables
    var range = props.range;
    var labelRange = props.labelRange;
    var range = props.range;
    var leftLabel = labelRange[0] == null ? range[0] : labelRange[0];
    var rightLabel = labelRange[1] == null ? range[1] : labelRange[1];

    // Find base via GCD for non-reduced fractions
    var base;
    if (props.labelStyle === "non-reduced") {
        var fractions = [leftLabel, rightLabel];
        for (var i = 0; i < props.numDivisions; i++) {
            var x = range[0] + i * props.tickStep;
            fractions.push(x);
        }
        var getDenom = function getDenom(x) {
            return KhanUtil.knumber.toFraction(x)[1];
        };
        var denoms = _.map(fractions, getDenom);
        base = _.reduce(denoms, function (x, y) {
            return KhanUtil.getLCM(x, y);
        });
    } else {
        base = undefined;
    }

    // Draw and save the tick marks and tick labels
    for (var i = 0; i < props.numDivisions; i++) {
        var x = range[0] + i * props.tickStep;
        results.push(graphie.line([x, -0.2], [x, 0.2]));

        var labelTicks = props.labelTicks;
        if (labelTicks || props.labelStyle === "decimal ticks") {
            results.push(_label(graphie, props.labelStyle, x, x, base));
        }
    }

    // Render the text labels
    graphie.style({ color: KhanUtil.DYNAMIC }, function () {
        results.push(_label(graphie, props.labelStyle, leftLabel, leftLabel, base));
        results.push(_label(graphie, props.labelStyle, rightLabel, rightLabel, base));
    });

    // Render the labels' lines
    graphie.style({
        stroke: KhanUtil.DYNAMIC,
        strokeWidth: 3.5
    }, function () {
        results.push(graphie.line([leftLabel, -0.2], [leftLabel, 0.2]));
        results.push(graphie.line([rightLabel, -0.2], [rightLabel, 0.2]));
    });

    return results;
});

var NumberLine = React.createClass({
    displayName: "NumberLine",

    mixins: [Changeable],

    propTypes: {
        range: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,

        labelRange: React.PropTypes.array.isRequired,
        labelStyle: React.PropTypes.string.isRequired,
        labelTicks: React.PropTypes.bool.isRequired,

        divisionRange: React.PropTypes.arrayOf(React.PropTypes.number).isRequired,
        numDivisions: React.PropTypes.number.isRequired,
        snapDivisions: React.PropTypes.number.isRequired,

        isTickCtrl: React.PropTypes.bool.isRequired,
        isInequality: React.PropTypes.bool.isRequired,

        numLinePosition: React.PropTypes.number.isRequired,
        rel: React.PropTypes.oneOf(["lt", "gt", "le", "ge"])
    },

    getDefaultProps: function getDefaultProps() {
        return {
            range: [0, 10],
            labelStyle: "decimal",
            labelRange: [null, null],
            divisionRange: [1, 10],
            labelTicks: true,
            isTickCtrl: false,
            isInequality: false,
            numLinePosition: 0,
            snapDivisions: 2,
            rel: "ge"
        };
    },

    isValid: function isValid() {
        var range = this.props.range;
        var initialX = this.props.numLinePosition;
        var divisionRange = this.props.divisionRange;

        initialX = initialX == null ? range[0] : initialX;

        return range[0] < range[1] && initialX >= range[0] && initialX <= range[1] && divisionRange[0] < divisionRange[1] && 0 < this.props.numDivisions && 0 < this.props.snapDivisions;
    },

    render: function render() {
        var inequalityControls = React.createElement(
            "div",
            null,
            React.createElement("input", {
                type: "button",
                className: "simple-button",
                value: "Switch direction",
                onClick: this.handleReverse }),
            React.createElement("input", {
                type: "button",
                className: "simple-button",
                value: _(["le", "ge"]).contains(this.props.rel) ? "Make circle open" : "Make circle filled",
                onClick: this.handleToggleStrict })
        );

        return React.createElement(
            "div",
            { className: "perseus-widget " + "perseus-widget-interactive-number-line" },
            !this.isValid() ? React.createElement(
                "div",
                null,
                "invalid number line configuration"
            ) : this._renderGraphie(),
            this.props.isInequality && inequalityControls
        );
    },

    _renderGraphie: function _renderGraphie() {
        // Position variables
        var widthInPixels = 400;
        var range = this.props.range;
        var width = range[1] - range[0];
        var scale = width / widthInPixels;
        var buffer = 30 * scale;

        // Initiate the graphie without actually drawing anything
        var left = range[0] - buffer,
            right = range[1] + buffer;
        var bottom = -1,
            top = 1 + (this.props.isTickCtrl ? 1 : 0);

        var options = _.pick(this.props, ["range", "isTickCtrl"]);

        // TODO(aria): Maybe save this as `this.calculatedProps`?
        var props = _.extend({}, this.props, {
            tickCtrlPosition: this.calculateTickControlPosition(this.props.numDivisions),
            tickStep: width / this.props.numDivisions
        });

        return React.createElement(
            Graphie,
            {
                ref: "graphie",
                box: [460, this.props.isTickCtrl ? 120 : 80],
                options: options,
                setup: this._setupGraphie },
            this._renderTickControl(props),
            React.createElement(TickMarks, _.pick(props, ["range", "numDivisions", "labelTicks", "labelStyle", "labelRange", "tickStep"])),
            this._renderInequality(props),
            this._renderNumberLinePoint(props)
        );
    },

    snapNumLinePosition: function snapNumLinePosition(props, numLinePosition) {
        var left = props.range[0];
        var right = props.range[1];
        var snapX = props.tickStep / props.snapDivisions;

        var x = bound(numLinePosition, left, right);
        x = left + knumber.roundTo(x - left, snapX);
        assert(_.isFinite(x));
        return x;
    },

    _renderNumberLinePoint: function _renderNumberLinePoint(props) {
        var _this = this;

        var isOpen = _(["lt", "gt"]).contains(props.rel);
        var normalStyle = {
            fill: isOpen ? KhanUtil._BACKGROUND : KhanUtil.INTERACTIVE,
            "stroke-width": isOpen ? 3 : 1
        };
        var highlightStyle = {
            fill: isOpen ? KhanUtil._BACKGROUND : KhanUtil.INTERACTING,
            "stroke-width": isOpen ? 3 : 1
        };

        return React.createElement(MovablePoint, {
            pointSize: 6,
            coord: [props.numLinePosition, 0],
            constraints: [function (coord, prevCoord) {
                // constrain-y
                return [coord[0], prevCoord[1]];
            }, function (coord, prevCoord) {
                // snap X
                var x = _this.snapNumLinePosition(props, coord[0]);
                return [x, coord[1]];
            }],
            normalStyle: normalStyle,
            highlightStyle: highlightStyle,
            onMove: function onMove(coord) {
                _this.change({ numLinePosition: coord[0] });
            }
        });
    },

    _renderTickControl: function _renderTickControl(props) {
        var _this2 = this;

        if (!this.props.isTickCtrl) {
            return null;
        }

        var width = props.range[1] - props.range[0];
        var tickCtrlWidth = 1 / 3 * width;
        var tickCtrlLeft = props.range[0] + 1 / 3 * width;
        var tickCtrlRight = props.range[0] + 2 / 3 * width;
        var scale = width / 400;
        var textBuffer = 50 * scale;
        var textLeft = tickCtrlLeft - textBuffer;
        var textRight = tickCtrlRight + textBuffer;
        var divSpan = props.divisionRange[1] - props.divisionRange[0];

        return [React.createElement(Line, { start: [tickCtrlLeft, 1.5], end: [tickCtrlRight, 1.5] }), React.createElement(Label, {
            coord: [textLeft, 1.5],
            text: "\u8F03\u5C11\u523B\u5EA6",
            direction: "center",
            tex: false }), React.createElement(Label, {
            coord: [textRight, 1.5],
            text: "\u8F03\u591A\u523B\u5EA6",
            direction: "center",
            tex: false }), React.createElement(MovablePoint, {
            key: "tickControl",
            pointSize: 5,
            coord: [props.tickCtrlPosition, 1.5],
            constraints: [function (coord, prevCoord) {
                // constrain-y
                return [coord[0], prevCoord[1]];
            }, function (coord, prevCoord) {
                // snap & bound
                var snapX = tickCtrlWidth / divSpan;
                x = bound(coord[0], tickCtrlLeft, tickCtrlRight);
                x = tickCtrlLeft + Math.round((x - tickCtrlLeft) / snapX) * snapX;
                assert(_.isFinite(x));
                return [x, coord[1]];
            }],
            onMove: function onMove(coord) {
                var numDivisions = _this2.calculateNumDivisions(coord[0]);
                _this2.change({ numDivisions: numDivisions });
            },
            onMoveEnd: function onMoveEnd(coord) {
                // Snap point to a tick step
                var numDivisions = _this2.calculateNumDivisions(coord[0]);

                var nextProps = _.extend({}, props, {
                    numDivisions: numDivisions,
                    tickStep: width / numDivisions
                });
                var newNumLinePosition = _this2.snapNumLinePosition(nextProps, props.numLinePosition);
                _this2.change({ numLinePosition: newNumLinePosition });
            }
        })];
    },

    handleReverse: function handleReverse() {
        var newRel = reverseRel[this.props.rel];
        this.props.onChange({ rel: newRel });
    },

    handleToggleStrict: function handleToggleStrict() {
        var newRel = toggleStrictRel[this.props.rel];
        this.props.onChange({ rel: newRel });
    },

    _getInequalityEndpoint: function _getInequalityEndpoint(props) {
        var isGreater = _(["ge", "gt"]).contains(props.rel);
        var widthInPixels = 400;
        var range = props.range;
        var scale = (range[1] - range[0]) / widthInPixels;
        var buffer = 30 * scale;
        var left = range[0] - buffer;
        var right = range[1] + buffer;
        var end = isGreater ? [right, 0] : [left, 0];
        return end;
    },

    _renderInequality: function _renderInequality(props) {
        if (props.isInequality) {
            var end = this._getInequalityEndpoint(props);
            var style = {
                arrows: "->",
                stroke: KhanUtil.DYNAMIC,
                strokeWidth: 3.5
            };

            return React.createElement(Line, {
                start: [props.numLinePosition, 0],
                end: end,
                style: style });
        } else {
            return null;
        }
    },

    calculateTickControlPosition: function calculateTickControlPosition(numDivisions) {
        var width = this.props.range[1] - this.props.range[0];
        var tickCtrlLeft = this.props.range[0] + 1 / 3 * width;
        var tickCtrlWidth = 1 / 3 * width;
        var minDivs = this.props.divisionRange[0];
        var maxDivs = this.props.divisionRange[1];

        var tickCtrlPosition = tickCtrlLeft + tickCtrlWidth * ((numDivisions - minDivs) / (maxDivs - minDivs));

        return tickCtrlPosition;
    },

    calculateNumDivisions: function calculateNumDivisions(tickCtrlPosition) {
        var width = this.props.range[1] - this.props.range[0];
        var tickCtrlLeft = this.props.range[0] + 1 / 3 * width;
        var tickCtrlRight = this.props.range[0] + 2 / 3 * width;
        var tickCtrlWidth = 1 / 3 * width;
        var minDivs = this.props.divisionRange[0];
        var maxDivs = this.props.divisionRange[1];

        var tickCtrlPosition = bound(tickCtrlPosition, tickCtrlLeft, tickCtrlRight);
        var numDivs = minDivs + Math.round((maxDivs - minDivs) * ((tickCtrlPosition - tickCtrlLeft) / tickCtrlWidth));

        assert(_.isFinite(numDivs));
        return numDivs;
    },

    _setupGraphie: function _setupGraphie(graphie, options) {
        // Ensure a sane configuration to avoid infinite loops
        if (!this.isValid()) {
            return;
        }

        // Position variables
        var widthInPixels = 400;
        var range = options.range;
        var scale = (range[1] - range[0]) / widthInPixels;
        var buffer = 30 * scale;

        // Initiate the graphie without actually drawing anything
        var left = range[0] - buffer,
            right = range[1] + buffer;
        var bottom = -1,
            top = 1 + (options.isTickCtrl ? 1 : 0);
        graphie.init({
            range: [[left, right], [bottom, top]],
            scale: [1 / scale, 40]
        });

        // Draw the number line
        var center = (range[0] + range[1]) / 2;
        graphie.line([center, 0], [right, 0], { arrows: "->" });
        graphie.line([center, 0], [left, 0], { arrows: "->" });
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        if (answerData === undefined) {
            answerData = this.getDefaultProps();
        }
        if (answerData.rel === "eq") {
            answerData.rel = "ge";
            answerData.isInequality = false;
        }
        this.props.onChange(answerData);
    },

    toJSON: function toJSON() {
        return {
            numLinePosition: this.props.numLinePosition,
            rel: this.props.isInequality ? this.props.rel : "eq"
        };
    },

    simpleValidate: function simpleValidate(rubric) {
        return NumberLine.validate(this.toJSON(), rubric);
    },

    focus: $.noop,

    statics: {
        displayMode: "block"
    }
});

_.extend(NumberLine, {
    validate: function validate(state, rubric) {
        var range = rubric.range;
        var start = rubric.initialX != null ? rubric.initialX : range[0];
        var startRel = rubric.isInequality ? "ge" : "eq";
        var correctRel = rubric.correctRel || "eq";

        if (knumber.equal(state.numLinePosition, rubric.correctX || 0) && correctRel === state.rel) {
            return {
                type: "points",
                earned: 1,
                total: 1,
                message: null
            };
        } else if (state.numLinePosition === start && state.rel === startRel) {
            // We're where we started.
            return {
                type: "invalid",
                message: null
            };
        } else {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }
    }
});

var NumberLineEditor = React.createClass({
    displayName: "NumberLineEditor",

    getDefaultProps: function getDefaultProps() {
        return {
            range: [0, 10],
            labelRange: [null, null],
            divisionRange: [1, 10],
            labelStyle: "decimal",
            labelTicks: true,
            numDivisions: 5,
            tickStep: null,
            snapDivisions: 2,
            correctRel: "eq",
            correctX: null,
            initialX: null
        };
    },

    mixins: [JsonifyProps],

    render: function render() {
        var range = this.props.range;
        var labelRange = this.props.labelRange;
        var divisionRange = this.props.divisionRange;

        range[0] = +range[0];range[1] = +range[1];

        var width = range[1] - range[0];
        var numDivisions = this.props.numDivisions;
        var snapDivisions = this.props.snapDivisions;
        var tickStep = this.props.tickStep;
        var isTickCtrl = this.props.isTickCtrl;
        var step = 0;

        if (!isTickCtrl) {
            // this will help constrain the answer to what is reachable
            step = tickStep ? tickStep / snapDivisions : width / numDivisions / snapDivisions;
        } else {
            // but if tickCtrl is on, the range of what is reachable is
            // rather large, and it becomes obnoxious to check for this
            step = null;
        }

        var labelStyleEditorButtons = [{ value: "decimal", text: "0.75", title: "小數" }, { value: "improper", text: "\u2077\u2044\u2084",
            title: "假分數" }, { value: "mixed", text: "1\xBE",
            title: "帶分數" }, { value: "non-reduced", text: "\u2078\u2044\u2084",
            title: "未化簡分數" }];

        return React.createElement(
            "div",
            { className: "perseus-widget-number-line-editor" },
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "label",
                    null,
                    "\u6B63\u78BA\u7684 x"
                ),
                React.createElement(
                    "select",
                    { value: this.props.correctRel,
                        onChange: this.onChangeRelation },
                    React.createElement(
                        "option",
                        { value: "eq" },
                        " = "
                    ),
                    React.createElement(
                        "option",
                        { value: "lt" },
                        " < "
                    ),
                    React.createElement(
                        "option",
                        { value: "gt" },
                        " > "
                    ),
                    React.createElement(
                        "option",
                        { value: "le" },
                        " \u2264 "
                    ),
                    React.createElement(
                        "option",
                        { value: "ge" },
                        " \u2265 "
                    )
                ),
                React.createElement(NumberInput, { value: this.props.correctX,
                    format: this.props.labelStyle,
                    onChange: this.onNumChange.bind(this, "correctX"),
                    checkValidity: function checkValidity(val) {
                        return val >= range[0] && val <= range[1] && (!step || Math.abs(val - range[0]) % step === 0);
                    },
                    placeholder: "\u7B54\u6848", size: "normal",
                    useArrowKeys: true }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9019\u662F\u6B63\u78BA\u7B54\u6848\uFF0C\u6703\u4F7F\u7528\u4F7F\u7528\u8005\u79FB\u52D5\u7684\u6700\u7D42\u4F4D\u7F6E\u4EE5\u53CA\u6578\u5B78\u95DC\u4FC2 (=, <, >, \u2264, \u2265) \u4F86\u9A57\u8B49\u7B54\u6848\u662F\u5426\u6B63\u78BA\u3002 \u82E5\u5E95\u8272\u8B8A\u70BA\u7D05\u8272\uFF0C\u4EE3\u8868\u4F7F\u7528\u8005\u4E0D\u53EF\u80FD\u900F\u904E\u64CD\u4F5C\u5F97\u5230\u9019\u500B\u7B54\u6848\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(NumberInput, { label: "\u521D\u59CB\u4F4D\u7F6E",
                    value: this.props.initialX,
                    format: this.props.labelStyle,
                    onChange: this.onNumChange.bind(this, "initialX"),
                    placeholder: range[0],
                    checkValidity: function checkValidity(val) {
                        return val >= range[0] && val <= range[1];
                    },
                    useArrowKeys: true }),
                React.createElement(
                    "span",
                    null,
                    " \u2208 ",
                    ' ',
                    " "
                ),
                React.createElement(RangeInput, { value: range,
                    onChange: this.onRangeChange,
                    format: this.props.labelStyle,
                    useArrowKeys: true }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9019\u63A7\u5236\u6A58\u8272\u9EDE\u5728\u6578\u7DDA\u4E0A\u7684\u521D\u59CB\u4F4D\u7F6E\uFF0C\u4EE5\u53CA\u5728\u6578\u7DDA\u4E0A\u53EF\u79FB\u52D5\u7684 ",
                        React.createElement(
                            "strong",
                            null,
                            "\u7BC4\u570D"
                        ),
                        "\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-left-col" },
                    React.createElement(
                        "span",
                        null,
                        "\u6A19\u7C64 "
                    ),
                    React.createElement(NumberInput, {
                        value: labelRange[0], placeholder: range[0],
                        format: this.props.labelStyle,
                        checkValidity: function checkValidity(val) {
                            return val >= range[0] && val <= range[1];
                        },
                        onChange: this.onLabelRangeChange.bind(this, 0),
                        useArrowKeys: true }),
                    React.createElement(
                        "span",
                        null,
                        " & "
                    ),
                    React.createElement(NumberInput, {
                        value: labelRange[1], placeholder: range[1],
                        format: this.props.labelStyle,
                        checkValidity: function checkValidity(val) {
                            return val >= range[0] && val <= range[1];
                        },
                        onChange: this.onLabelRangeChange.bind(this, 1),
                        useArrowKeys: true }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u9019\u63A7\u5236\u5DE6\u53F3\u6A19\u7C64\u7684\u4F4D\u7F6E\uFF0C\u9810\u8A2D\u70BA\u79FB\u52D5\u7BC4\u570D\u7684\u5169\u7AEF\u3002",
                            React.createElement("br", null),
                            React.createElement(
                                "strong",
                                null,
                                "\u6CE8\u610F:"
                            ),
                            " \u78BA\u4FDD\u85CD\u8272\u6A19\u7C64\u5728\u9ED1\u8272\u523B\u5EA6\u7DDA\u4E0A\uFF0C\u5426\u5247\u53EF\u80FD\u6703\u8B93\u4F7F\u7528\u8005\u56F0\u60D1\u3002"
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-left-col" },
                    React.createElement(
                        "label",
                        null,
                        "\u6A19\u7C64\u683C\u5F0F"
                    ),
                    React.createElement(ButtonGroup, { allowEmpty: false,
                        value: this.props.labelStyle,
                        buttons: labelStyleEditorButtons,
                        onChange: this.onLabelStyleChange }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u9019\u63A7\u5236\u6A19\u7C64\u7684\u683C\u5F0F\uFF0C\u4F7F\u7528\u4E0A\uFF0C\u53EF\u4EE5\u9078\u64C7\u300C\u5C0F\u6578\u3001\u5047\u5206\u6578\u3001\u5E36\u5206\u6578\u3001\u672A\u5316\u7C21\u5206\u6578\u300D\u3002"
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "div",
                    { className: "perseus-widget-left-col" },
                    React.createElement(PropCheckBox, { label: "\u986F\u793A\u523B\u5EA6\u7DDA\u63A7\u5236\u5668",
                        isTickCtrl: this.props.isTickCtrl,
                        onChange: this.props.onChange })
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-right-col" },
                    React.createElement(PropCheckBox, { label: "\u986F\u793A\u523B\u5EA6\u4EE3\u8868\u7684\u6578\u5B57",
                        labelTicks: this.props.labelTicks,
                        onChange: this.props.onChange })
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(NumberInput, { label: "\u5206\u5272\u6578\u91CF",
                    value: this.props.numDivisions || null,
                    format: "decimal",
                    onChange: this.onNumDivisionsChange,
                    checkValidity: function checkValidity(val) {
                        return val >= divisionRange[0] && val <= divisionRange[1];
                    },
                    placeholder: width / this.props.tickStep,
                    useArrowKeys: true }),
                isTickCtrl && React.createElement(
                    "span",
                    null,
                    " \u2208 ",
                    ' ',
                    React.createElement(RangeInput, { value: divisionRange,
                        format: this.props.labelStyle,
                        checkValidity: function checkValidity(val) {
                            return val[0] >= 1 && val[1] > val[0];
                        },
                        enforceInequality: true,
                        onChange: this.onDivisionRangeChange,
                        useArrowKeys: true }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u9019\u63A7\u5236\u523B\u5EA6\u7DDA\u7684\u6578\u91CF\uFF0C\u5F8C\u9762\u7684\u7BC4\u570D\u8A2D\u5B9A\u7684\u662F\u4F7F\u7528\u8005\u7528\u523B\u5EA6\u7DDA\u63A7\u5236\u5668\u53EF\u4EE5\u8ABF\u6574\u7684\u6700\u5927\u8207\u6700\u5C0F\u5206\u5272\u6578\u91CF\u3002",
                            React.createElement("br", null),
                            React.createElement(
                                "strong",
                                null,
                                "\u6CE8\u610F:"
                            ),
                            " \u6C92\u6709\u7279\u5225\u6AA2\u67E5\u85CD\u8272\u7684\u6A19\u7C64\u662F\u5426\u6703\u5728\u9ED1\u8272\u523B\u5EA6\u7DDA\u4E0A\uFF0C\u82E5\u4E0D\u5728\u523B\u5EA6\u7DDA\u4E0A\u53EF\u80FD\u6703\u8B93\u4F7F\u7528\u8005\u56F0\u60D1\u3002"
                        )
                    )
                ),
                !isTickCtrl && React.createElement(
                    "span",
                    null,
                    React.createElement(NumberInput, { label: "\u6216\u4E00\u523B\u5EA6\u70BA",
                        value: this.props.tickStep || null,
                        format: this.props.labelStyle,
                        onChange: this.onTickStepChange,
                        checkValidity: function checkValidity(val) {
                            return val > 0 && val <= width;
                        },
                        placeholder: width / this.props.numDivisions,
                        useArrowKeys: true }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u9019\u63A7\u5236\u523B\u5EA6\u7DDA\u7684\u4F4D\u7F6E\u8207\u6578\u91CF\uFF0C\u53EF\u4EE5\u8A2D\u5B9A\u5206\u5272\u6578\u91CF (2 \u8868\u793A\u628A\u6574\u500B\u7BC4\u570D\u5206\u5272\u6210\u5169\u534A) \u6216\u8005\u8A2D\u5B9A\u4E00\u523B\u5EA6\u70BA\u591A\u5C11 (\u76F8\u9130\u5169\u523B\u5EA6\u4E4B\u9593\u7684\u8DDD\u96E2)\u3002\u8A2D\u5B9A\u5176\u4E2D\u4E00\u500B\u53E6\u4E00\u500B\u6703\u81EA\u52D5\u66F4\u65B0\u70BA\u5C0D\u61C9\u7684\u503C\u3002 ",
                            React.createElement("br", null),
                            React.createElement(
                                "strong",
                                null,
                                "\u6CE8\u610F:"
                            ),
                            " \u6C92\u6709\u7279\u5225\u6AA2\u67E5\u85CD\u8272\u7684\u6A19\u7C64\u662F\u5426\u6703\u5728\u9ED1\u8272\u523B\u5EA6\u7DDA\u4E0A\uFF0C\u82E5\u4E0D\u5728\u523B\u5EA6\u7DDA\u4E0A\u53EF\u80FD\u6703\u8B93\u4F7F\u7528\u8005\u56F0\u60D1\u3002"
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(NumberInput, { label: "\u523B\u5EA6\u4E4B\u9593\u7684\u5206\u5272\u6578\u91CF",
                    value: snapDivisions,
                    checkValidity: function checkValidity(val) {
                        return val > 0;
                    },
                    format: this.props.labelStyle,
                    onChange: this.onNumChange.bind(this, "snapDivisions"),
                    useArrowKeys: true }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9019\u63A7\u5236\u5169\u500B\u76F8\u9130\u7684\u523B\u5EA6\u4E4B\u9593\uFF0C\u88AB\u5206\u6210\u4E86\u5E7E\u4EFD\uFF0C\u4E5F\u5C31\u662F\u4F7F\u7528\u8005\u53EF\u4EE5\u5C07\u6A58\u9EDE\u79FB\u52D5\u5230\u7684\u4F4D\u7F6E\u3002 ",
                        React.createElement("br", null),
                        React.createElement(
                            "strong",
                            null,
                            "\u6CE8\u610F:"
                        ),
                        "\u78BA\u4FDD\u5206\u5272\u6578\u91CF\u8DB3\u5920\u8B93\u4F7F\u7528\u8005\u56DE\u7B54\u554F\u984C\uFF0C\u5373\u7B54\u6848\u6703\u843D\u5728\u67D0\u5206\u5272\u7684\u4F4D\u7F6E\u3002"
                    )
                )
            )
        );
    },

    onRangeChange: function onRangeChange(range) {
        // Changing the range constrains the initial position, as well as the
        // position of the answer and labels. Atm, it just marks them as
        // invalid and prevents the number line from showing; it was annoying
        // to change it for them, because if they're typing in fractions,
        // it registers one-at-a-time and messes things up.
        this.props.onChange({ range: range });
    },

    onLabelRangeChange: function onLabelRangeChange(i, num) {
        var range = this.props.range.slice(),
            labelRange = this.props.labelRange.slice(),
            otherNum = labelRange[1 - i];

        if (num == null || otherNum == null) {
            labelRange[i] = num;
        } else {
            // If both labels have values, this updates the "appropriate" one.
            // It enforces that the position of the left label <= right label.
            // If left otherwise, it makes certain aspects of validation hard.
            labelRange = [Math.min(num, otherNum), Math.max(num, otherNum)];
        }

        this.props.onChange({ labelRange: labelRange });
    },

    onDivisionRangeChange: function onDivisionRangeChange(divisionRange) {
        var numDivisions = this.props.numDivisions;
        numDivisions = bound(numDivisions, divisionRange[0], divisionRange[1]);
        this.props.onChange({
            divisionRange: divisionRange,
            numDivisions: numDivisions });
    },

    onNumChange: function onNumChange(key, value) {
        var opts = {};
        opts[key] = value;
        this.props.onChange(opts);
    },

    onNumDivisionsChange: function onNumDivisionsChange(numDivisions) {
        var divRange = this.props.divisionRange.slice();

        if (!_.isFinite(numDivisions)) {
            numDivisions = null;
        }

        // Auto-updates (constrains) the numDivisions to be within the range
        // of appliable divisions (more important for when the tick controller
        // isn't shown and otherwise shows as invalid for no apparent reason)
        divRange[0] = Math.max(1, Math.min(divRange[0], numDivisions));
        divRange[1] = Math.max(divRange[1], numDivisions);

        this.props.onChange({
            tickStep: null,
            divisionRange: divRange,
            numDivisions: numDivisions
        });
    },

    onTickStepChange: function onTickStepChange(tickStep) {
        this.props.onChange({
            numDivisions: null,
            tickStep: tickStep
        });
    },

    onChangeRelation: function onChangeRelation(e) {
        value = e.target.value;
        this.props.onChange({
            correctRel: value,
            isInequality: value !== "eq"
        });
    },

    onLabelStyleChange: function onLabelStyleChange(labelStyle) {
        this.props.onChange({
            labelStyle: labelStyle
        });
    }
});

var NumberLineTransform = function NumberLineTransform(editorProps) {
    var props = _.pick(editorProps, ["range", "labelRange", "labelStyle", "labelTicks", "divisionRange", "snapDivisions", "isTickCtrl", "isInequality"]);

    var numLinePosition = editorProps.initialX != null ? editorProps.initialX : editorProps.range[0];

    var width = editorProps.range[1] - editorProps.range[0];

    var numDivisions;
    if (editorProps.numDivisions != null) {
        numDivisions = editorProps.numDivisions;
    } else if (editorProps.tickStep != null) {
        numDivisions = width / editorProps.tickStep;
    } else {
        numDivisions = undefined; // send to getDefaultProps()
    }

    _.extend(props, {
        numLinePosition: numLinePosition,
        numDivisions: numDivisions
    });

    return props;
};

module.exports = {
    name: "number-line",
    displayName: "Number line/數線",
    widget: NumberLine,
    editor: NumberLineEditor,
    transform: NumberLineTransform,
    hidden: false
};

},{"../components/graphie.jsx":257,"../components/number-input.jsx":261,"../components/prop-check-box.jsx":262,"../components/range-input.jsx":263,"../interactive2.js":280,"../interactive2/interactive-util.js":281,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../util.js":303,"react":246,"react-components/js/button-group.jsx":66,"react-components/js/info-tip.jsx":68}],328:[function(require,module,exports){
"use strict";

var React = require('react');
var _ = require("underscore");

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var InfoTip = require("react-components/js/info-tip.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var NumberInput = require("../components/number-input.jsx");
var ButtonGroup = require("react-components/js/button-group.jsx");
var MultiButtonGroup = require("../components/multi-button-group.jsx");
var InputWithExamples = require("../components/input-with-examples.jsx");

var Editor = require("../editor.jsx");

var Util = require("../util.js");

var answerFormButtons = [{ title: "整數", value: "integer", text: "6" }, { title: "小樹", value: "decimal", text: "0.75" }, { title: "真分數", value: "proper", text: "\u2157" }, { title: "假分數", value: "improper",
    text: "\u2077\u2044\u2084" }, { title: "帶分數", value: "mixed", text: "1\xBE" }, { title: "\u6709 \u03C0 \u7684\u6578", value: "pi", text: "\u03C0" }];

var formExamples = {
    "integer": function integer(options) {
        return $._("整數, 例 $6$");
    },
    "proper": function proper(options) {
        return options.simplify === "optional" ? $._("真分數, 例 $1/2$ or $6/10$") : $._("最簡真分數, 例 $3/5$");
    },
    "improper": function improper(options) {
        return options.simplify === "optional" ? $._("假分數, 例 $10/7$ or $14/8$") : $._("最簡假分數, 例 $7/4$");
    },
    "mixed": function mixed() {
        return $._("帶分數, 例 $1\\ 3/4$");
    },
    "decimal": function decimal() {
        return $._("精確的小數, 例 $0.75$");
    },
    "pi": function pi() {
        return $._("pi 的倍數, 例 $12\\ \\text{pi}$ or " + "$2/3\\ \\text{pi}$");
    }
};

var NumericInput = React.createClass({
    displayName: "NumericInput",

    propTypes: {
        currentValue: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return {
            currentValue: "",
            size: "normal"
        };
    },

    render: function render() {
        return React.createElement(InputWithExamples, {
            ref: "input",
            value: this.props.currentValue,
            onChange: this.handleChange,
            className: "perseus-input-size-" + this.props.size,
            examples: this.examples(),
            shouldShowExamples: this.shouldShowExamples() });
    },

    handleChange: function handleChange(newValue) {
        this.props.onChange({ currentValue: Util.asc(newValue) });
    },

    focus: function focus() {
        this.refs.input.focus();
        return true;
    },

    toJSON: function toJSON(skipValidation) {
        return { currentValue: this.props.currentValue };
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        if (answerData === undefined) {
            answerData = { currentValue: "" };
        }
        this.props.onChange(answerData);
    },

    simpleValidate: function simpleValidate(rubric) {
        return NumericInput.validate(this.toJSON(), rubric);
    },

    shouldShowExamples: function shouldShowExamples() {
        var noFormsAccepted = this.props.answerForms.length === 0;
        var allFormsAccepted = this.props.answerForms.length >= _.size(formExamples);
        return this.props.enabledFeatures.toolTipFormats && !noFormsAccepted && !allFormsAccepted;
    },

    examples: function examples() {
        var _this = this;

        // if the set of specified forms are empty, allow all forms
        var forms = this.props.answerForms.length !== 0 ? this.props.answerForms : _.keys(formExamples);
        return _.map(forms, function (form) {
            return formExamples[form](_this.props);
        });
    },

    statics: {
        displayMode: "inline-block"
    }
});

_.extend(NumericInput, {
    validate: function validate(state, rubric) {
        var allAnswerForms = _.pluck(answerFormButtons, "value");

        var createValidator = function createValidator(answer) {
            return Khan.answerTypes.number.createValidatorFunctional(answer.value, {
                message: answer.message,
                simplify: answer.status === "correct" ? answer.simplify : "optional",
                inexact: true, // TODO(merlob) backfill / delete
                maxError: answer.maxError,
                forms: answer.strict && answer.answerForms.length !== 0 ? answer.answerForms : allAnswerForms
            });
        };

        // Look through all correct answers for one that matches either
        // precisely or approximately and return the appropriate message:
        // - if precise, return the message that the answer came with
        // - if it needs to be simplified, etc., show that message
        var correctAnswers = _.where(rubric.answers, { status: "correct" });
        var result = _.find(_.map(correctAnswers, function (answer) {
            var validate = createValidator(answer);
            return validate(state.currentValue);
        }), function (match) {
            return match.correct || match.empty;
        });

        if (!result) {
            // Otherwise, if the guess is not correct
            var otherAnswers = [].concat(_.where(rubric.answers, { status: "ungraded" }), _.where(rubric.answers, { status: "wrong" }));

            // Look through all other answers and if one matches either
            // precisely or approximately return the answer's message
            match = _.find(otherAnswers, function (answer) {
                var validate = createValidator(answer);
                return validate(state.currentValue).correct;
            });
            result = {
                empty: match ? match.status === "ungraded" : false,
                correct: match ? match.status === "correct" : false,
                message: match ? match.message : null,
                guess: state.currentValue
            };
        }

        // TODO(eater): Seems silly to translate result to this invalid/points
        // thing and immediately translate it back in ItemRenderer.scoreInput()
        if (result.empty) {
            return {
                type: "invalid",
                message: result.message
            };
        } else {
            return {
                type: "points",
                earned: result.correct ? 1 : 0,
                total: 1,
                message: result.message
            };
        }
    }
});

var initAnswer = function initAnswer(status) {
    return {
        value: null,
        status: status,
        message: "",
        simplify: "required",
        answerForms: [],
        strict: false,
        maxError: null
    };
};

var NumericInputEditor = React.createClass({
    displayName: "NumericInputEditor",

    mixins: [JsonifyProps, Changeable],

    getDefaultProps: function getDefaultProps() {
        return {
            answers: [initAnswer("correct")],
            size: "normal"
        };
    },

    getInitialState: function getInitialState() {
        return {
            lastStatus: "wrong",
            showOptions: _.map(this.props.answers, function () {
                return false;
            })
        };
    },

    render: function render() {
        var _this2 = this;

        var lastStatus = this.state.lastStatus; // for a phantom last answer
        var answers = this.props.answers.concat(initAnswer(lastStatus));

        var unsimplifiedAnswers = function unsimplifiedAnswers(i) {
            return React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(
                    "label",
                    null,
                    "\u672A\u5316\u7C21\u7684\u7B54\u6848\u662F"
                ),
                React.createElement(ButtonGroup, { value: answers[i]["simplify"],
                    allowEmpty: false,
                    buttons: [{ value: "required", text: "不合適的" }, { value: "optional", text: "可接受的" }, { value: "enforced", text: "錯誤的" }],
                    onChange: _this2.updateAnswer(i, "simplify") }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9810\u8A2D\u662F\u9078\u53D6\u300C\u4E0D\u5408\u9069\u7684\u300D\u3002\u6703\u544A\u8A34\u4F7F\u7528\u8005\u9019\u500B\u7B54\u6848\u662F\u5C0D\u7684\u4F46\u662F\u6C92\u6709\u5316\u7C21\u3002 \u4F7F\u7528\u8005\u5FC5\u9808\u5316\u7C21\u5F8C\u518D\u91CD\u65B0\u9001\u51FA\u7B54\u6848\uFF0C\u4F46\u4E0D\u6703\u7B97\u932F\u3002(\u9069\u7528\u65BC\u4E94\u5E74\u7D1A\u4EE5\u4E0A)"
                    ),
                    React.createElement(
                        "p",
                        null,
                        "\u53EA\u6709\u7576\u4F7F\u7528\u8005\u4E0D\u77E5\u9053\u5982\u4F55\u5316\u7C21\u5206\u6578\u6642\u624D\u9078\u53D6\u300C\u53EF\u63A5\u53D7\u7684\u300D\u3002(\u9069\u7528\u65BC\u4E94\u5E74\u7D1A\u4EE5\u4E0B)"
                    ),
                    React.createElement(
                        "p",
                        null,
                        React.createElement(
                            "em",
                            null,
                            "\u53EA\u6709"
                        ),
                        "\u5728\u8981\u5B78\u6703\u5316\u7C21\u6642\u624D\u9078\u53D6\u300C\u932F\u8AA4\u7684\u300D\u3002"
                    )
                )
            );
        };

        var suggestedAnswerTypes = function suggestedAnswerTypes(i) {
            return React.createElement(
                "div",
                null,
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(
                        "label",
                        null,
                        "\u9078\u64C7\u5EFA\u8B70\u7684\u7B54\u984C\u683C\u5F0F"
                    ),
                    React.createElement(MultiButtonGroup, { buttons: answerFormButtons,
                        values: answers[i]["answerForms"],
                        onChange: _this2.updateAnswer(i, "answerForms") }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u9019\u908A\u9078\u53D6\u7684\u662F\u5B78\u751F\u5728\u4F5C\u7B54\u6642\uFF0C\u6703\u986F\u793A\u7684\u7B54\u984C\u5EFA\u8B70\u683C\u5F0F\u3002\u9019\u908A\u6703\u6839\u64DA\u8F38\u5165\u7684\u7B54\u6848\u81EA\u52D5\u9078\u53D6\u5EFA\u8B70\u7684\u683C\u5F0F\u3002 \u82E5\u8F38\u5165\u7684\u7B54\u6848\u70BA\u300C\u5C0F\u6578\u3001\u6574\u6578\u300D\u5247\u9810\u8A2D\u4E0D\u986F\u793A\u5EFA\u8B70\uFF0C\u540C\u6642\u4E0D\u9650\u5236\u8F38\u5165\u7684\u683C\u5F0F\u3002 \u82E5\u8F38\u5165\u7684\u7B54\u6848\u70BA\u5E36\u6709\u300C\u03C0\u300D\u7684\u6578\u503C\uFF0C\u5247\u9810\u8A2D\u6703\u986F\u793A\u5982\u4F55\u8F38\u5165 pi \u7684\u683C\u5F0F\u5EFA\u8B70\u3002 \u82E5\u8F38\u5165\u7684\u7B54\u6848\u70BA\u300C\u5E36\u5206\u6578\u300D\uFF0C\u5247\u9810\u8A2D\u6703\u986F\u793A\u5E36\u5206\u6578\u4EE5\u53CA\u771F\u5206\u6578\u7684\u683C\u5F0F\u5EFA\u8B70\u3002 \u82E5\u8F38\u5165\u7684\u7B54\u6848\u70BA\u300C\u5047\u5206\u6578\u3001\u771F\u5206\u6578\u300D\uFF0C\u5247\u9810\u8A2D\u6703\u986F\u793A\u5047\u5206\u6578\u4EE5\u53CA\u771F\u5206\u6578\u7684\u683C\u5F0F\u5EFA\u8B70\u3002 \u56E0\u6B64\u82E5\u9700\u8981\u7279\u5225\u53EA\u986F\u793A\u67D0\u500B\u683C\u5F0F\u5EFA\u8B70\uFF0C\u518D\u53D6\u6D88\u9078\u53D6\u5373\u53EF\uFF0C\u4E00\u822C\u4F7F\u7528\u4E0D\u9700\u8981\u66F4\u52D5\u3002"
                        ),
                        React.createElement(
                            "p",
                            null,
                            "\u4F8B\u5982\uFF0C\u5982\u679C\u60F3\u8981\u9650\u5236\u7B54\u6848 ",
                            React.createElement(
                                "em",
                                null,
                                "\u53EA\u80FD\u662F"
                            ),
                            " \u5047\u5206\u6578 (\u8B6C\u5982 7/4)\uFF0C\u9078\u53D6 \u300C\u5047\u5206\u6578\u300D\u4E26\u628A\u300C\u5B8C\u5168\u7B26\u5408\u300D\u6253\u52FE\u3002 \u9019\u6A23\u5C31 ",
                            React.createElement(
                                "b",
                                null,
                                "\u4E0D\u6703"
                            ),
                            " \u63A5\u53D7\u8F38\u5165\u7684\u7B54\u6848\u70BA 1.75\u3002"
                        ),
                        React.createElement(
                            "p",
                            null,
                            "\u9664\u975E\u4F60\u9700\u8981\u6E2C\u8A66\u5B78\u751F\u7684\u67D0\u500B\u6280\u80FD (\u4F8B\u5982\uFF1A\u5206\u6578)\uFF0C\u4E00\u822C\u4F7F\u7528\u8ACB\u4E0D\u8981\u7279\u5225\u9650\u5236\u8F38\u5165\u7684\u683C\u5F0F\u3002"
                        )
                    )
                ),
                React.createElement(
                    "div",
                    { className: "perseus-widget-row" },
                    React.createElement(PropCheckBox, { label: "\u5B8C\u5168\u7B26\u5408\u9078\u53D6\u7684\u7B54\u984C\u683C\u5F0F",
                        strict: answers[i]["strict"],
                        onChange: _this2.updateAnswer.bind(_this2, i) })
                )
            );
        };

        var maxError = function maxError(i) {
            return React.createElement(
                "div",
                { className: "perseus-widget-row" },
                React.createElement(NumberInput, { label: "\u6700\u5927\u8AA4\u5DEE",
                    className: "max-error",
                    value: answers[i]["maxError"],
                    onChange: _this2.updateAnswer(i, "maxError"),
                    placeholder: "0" })
            );
        };

        var inputSize = React.createElement(
            "div",
            null,
            React.createElement(
                "label",
                null,
                "\u5BEC\u5EA6:",
                ' ',
                " "
            ),
            React.createElement(ButtonGroup, { value: this.props.size, allowEmpty: false,
                buttons: [{ value: "normal", text: "一般 (80px)" }, { value: "small", text: "較小 (40px)" }],
                onChange: this.change("size") }),
            React.createElement(
                InfoTip,
                null,
                React.createElement(
                    "p",
                    null,
                    "\u9810\u8A2D\u4F7F\u7528\u4E00\u822C\u5927\u5C0F\uFF0C\u9664\u975E\u9700\u8981\u5F88\u591A\u500B\u7B54\u6848\u683C\u5728\u540C\u4E00\u884C\uFF0C\u6703\u51FA\u73FE\u653E\u4E0D\u4E0B\u7684\u60C5\u6CC1\u3002"
                )
            )
        );

        var instructions = {
            "wrong": "(說明這個答案的錯誤之處或迷思概念)",
            "ungraded": "(進一步解釋避免混淆)",
            "correct": "(加強使用者對觀念的理解)"
        };

        var generateInputAnswerEditors = function generateInputAnswerEditors() {
            return answers.map(function (answer, i) {
                var editor = React.createElement(Editor, {
                    content: answer.message || "",
                    placeholder: "為什麼這個答案是" + answer.status + "?\t" + instructions[answer.status],
                    widgetEnabled: false,
                    onChange: function onChange(newProps) {
                        if ("content" in newProps) {
                            _this2.updateAnswer(i, { message: newProps.content });
                        }
                    }
                });
                return React.createElement(
                    "div",
                    { className: "perseus-widget-row", key: i },
                    React.createElement(
                        "div",
                        { className: "input-answer-editor-value-container" + (answer.maxError ? " with-max-error" : "") },
                        React.createElement(NumberInput, { value: answer.value,
                            className: "numeric-input-value",
                            placeholder: "answer",
                            format: _.last(answer.answerForms),
                            onFormatChange: function onFormatChange(newValue, format) {
                                var forms;
                                if (format === "pi") {
                                    forms = ["pi"];
                                } else if (format === "mixed") {
                                    forms = ["proper", "mixed"];
                                } else if (format === "proper" || format === "improper") {
                                    forms = ["proper", "improper"];
                                }
                                _this2.updateAnswer(i, {
                                    value: Util.firstNumericalParse(newValue),
                                    answerForms: forms
                                });
                            },
                            onChange: function onChange(newValue) {
                                _this2.updateAnswer(i, {
                                    value: Util.firstNumericalParse(newValue) });
                            } }),
                        answer.strict && React.createElement(
                            "div",
                            { className: "is-strict-indicator",
                                title: "strictly equivalent to" },
                            "\u2261"
                        ),
                        answer.simplify !== "required" && answer.status === "correct" && React.createElement(
                            "div",
                            { className: "simplify-indicator " + answer.simplify,
                                title: "accepts unsimplified answers" },
                            "\u2030"
                        ),
                        answer.maxError ? React.createElement(
                            "div",
                            { className: "max-error-container" },
                            React.createElement(
                                "div",
                                { className: "max-error-plusmn" },
                                "\xB1"
                            ),
                            React.createElement(NumberInput, { placeholder: 0,
                                value: answers[i]["maxError"],
                                format: _.last(answer.answerForms),
                                onChange: _this2.updateAnswer(i, "maxError") })
                        ) : null,
                        React.createElement("div", { className: "value-divider" }),
                        React.createElement(
                            "a",
                            { href: "javascript:void(0)",
                                className: "answer-status " + answer.status,
                                onClick: _this2.onStatusChange.bind(_this2, i),
                                onKeyDown: function onKeyDown(e) {
                                    if (e.key === " ") {
                                        e.preventDefault(); // prevent page shifting
                                        _this2.onStatusChange(i);
                                    }
                                } },
                            answer.status
                        ),
                        React.createElement(
                            "a",
                            { href: "javascript:void(0)",
                                className: "options-toggle",
                                onClick: _this2.onToggleOptions.bind(_this2, i),
                                onKeyDown: function onKeyDown(e) {
                                    if (e.key === " ") {
                                        e.preventDefault(); // prevent page shifting
                                        _this2.onToggleOptions(i);
                                    }
                                } },
                            React.createElement("i", { className: "icon-gear" })
                        )
                    ),
                    React.createElement(
                        "div",
                        { className: "input-answer-editor-message" },
                        editor
                    ),
                    _this2.state.showOptions[i] && React.createElement(
                        "div",
                        { className: "options-container" },
                        maxError(i),
                        answer.status === "correct" && unsimplifiedAnswers(i),
                        suggestedAnswerTypes(i)
                    )
                );
            });
        };

        return React.createElement(
            "div",
            { className: "perseus-input-number-editor" },
            React.createElement(
                "div",
                { className: "ui-title" },
                "User input"
            ),
            React.createElement(
                "div",
                { className: "msg-title" },
                "Message shown to user on attempt"
            ),
            generateInputAnswerEditors(),
            inputSize
        );
    },

    onToggleOptions: function onToggleOptions(choiceIndex) {
        var showOptions = this.state.showOptions.slice();
        showOptions[choiceIndex] = !showOptions[choiceIndex];
        this.setState({ showOptions: showOptions });
    },

    onStatusChange: function onStatusChange(choiceIndex) {
        var statuses = ["wrong", "ungraded", "correct"];
        var lastAnswer = initAnswer(this.state.lastStatus);
        var answers = this.props.answers.concat(lastAnswer);
        var i = _.indexOf(statuses, answers[choiceIndex].status);
        var newStatus = statuses[(i + 1) % 3];

        // If we change the status of the new (phantom) answer
        if (choiceIndex === answers.length - 1) {
            this.setState({ lastStatus: newStatus });
        } else {
            this.updateAnswer(choiceIndex, {
                status: newStatus,
                simplify: newStatus === "correct" ? "required" : "accepted"
            });
        }
    },

    updateAnswer: function updateAnswer(choiceIndex, update) {
        var _this3 = this;

        if (!_.isObject(update)) {
            return _.partial(function (choiceIndex, key, value) {
                var update = {};
                update[key] = value;
                _this3.updateAnswer(choiceIndex, update);
            }, choiceIndex, update);
        }
        var lastAnswer = initAnswer(this.state.lastStatus);
        var answers = this.props.answers.concat(lastAnswer);
        answers[choiceIndex] = _.extend({}, answers[choiceIndex], update);
        this.updateAllAnswers(answers);
    },

    updateAllAnswers: function updateAllAnswers(newAnswers) {
        // Filter out all the empty answers
        var answers = _.filter(newAnswers, function (c) {
            return c.value != null || c.message != null && c.message !== "";
        });

        var sortedAnswers = [].concat(_.where(answers, { status: "correct" }), _.where(answers, { status: "ungraded" }), _.where(answers, { status: "wrong" }));
        this.props.onChange({ answers: sortedAnswers });
    }
});

var unionAnswerForms = function unionAnswerForms(answerFormsList) {
    var set = {};
    _.each(answerFormsList, function (answerForms) {
        _.each(answerForms, function (form) {
            set[form] = true;
        });
    });
    // Make sure to keep the order of forms in formExamples
    return _.filter(_.keys(formExamples), function (form) {
        return set[form] === true;
    });
};

var propsTransform = function propsTransform(editorProps) {
    var rendererProps = _.extend(_.omit(editorProps, "answers"), {
        answerForms: unionAnswerForms(_.pluck(editorProps.answers, "answerForms"))
    });
    return rendererProps;
};

module.exports = {
    name: "numeric-input",
    displayName: "numeric-input/進階數值填充",
    widget: NumericInput,
    editor: NumericInputEditor,
    transform: propsTransform,
    hidden: false
};

},{"../components/input-with-examples.jsx":258,"../components/multi-button-group.jsx":260,"../components/number-input.jsx":261,"../components/prop-check-box.jsx":262,"../editor.jsx":275,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"../util.js":303,"react":246,"react-components/js/button-group.jsx":66,"react-components/js/info-tip.jsx":68,"underscore":248}],329:[function(require,module,exports){
"use strict";

var React = require('react');
var ReactDOM = require("react-dom");
var InfoTip = require("react-components/js/info-tip.jsx");

var Util = require("../util.js");
var Renderer = require("../renderer.jsx");
var TextListEditor = require("../components/text-list-editor.jsx");

var PlaceholderCard = React.createClass({
    displayName: "PlaceholderCard",

    propTypes: {
        width: React.PropTypes.number.isRequired,
        height: React.PropTypes.number.isRequired
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "card-wrap", style: { width: this.props.width } },
            React.createElement("div", {
                className: "card placeholder",
                style: { height: this.props.height } })
        );
    }
});

var DragHintCard = React.createClass({
    displayName: "DragHintCard",

    render: function render() {
        return React.createElement(
            "div",
            { className: "card-wrap" },
            React.createElement("div", { className: "card drag-hint" })
        );
    }
});

var PropTypes = {
    position: React.PropTypes.shape({
        left: React.PropTypes.number,
        top: React.PropTypes.number
    })
};

var Card = React.createClass({
    displayName: "Card",

    propTypes: {
        floating: React.PropTypes.bool.isRequired,
        animating: React.PropTypes.bool,
        width: React.PropTypes.number,
        stack: React.PropTypes.bool,

        onMouseDown: React.PropTypes.func,
        onMouseMove: React.PropTypes.func,
        onMouseUp: React.PropTypes.func,

        // Used only for floating/animating cards
        startMouse: PropTypes.position,
        startOffset: PropTypes.position,
        animateTo: PropTypes.position,
        onAnimationEnd: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            stack: false,
            animating: false
        };
    },

    render: function render() {
        var style = {};

        if (this.props.floating) {
            style = {
                position: "absolute",
                left: this.props.startOffset.left,
                top: this.props.startOffset.top
            };
        }

        if (this.props.width) {
            style.width = this.props.width;
        }

        var className = ["card"];
        if (this.props.stack) {
            className.push("stack");
        }
        if (this.props.floating && !this.props.animating) {
            className.push("dragging");
            style.left += this.props.mouse.left - this.props.startMouse.left;
            style.top += this.props.mouse.top - this.props.startMouse.top;
        }

        // Pull out the content to get rendered
        var rendererProps = _.pick(this.props, "content");

        var onMouseDown = this.props.animating ? $.noop : this.onMouseDown;

        return React.createElement(
            "div",
            { className: "card-wrap", style: style,
                onMouseDown: onMouseDown,
                onTouchStart: onMouseDown,
                onTouchMove: this.onMouseMove,
                onTouchEnd: this.onMouseUp,
                onTouchCancel: this.onMouseUp },
            React.createElement(
                "div",
                { className: className.join(" ") },
                React.createElement(Renderer, rendererProps)
            )
        );
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        // Cards in the bank or drag list don't usually change -- they only
        // reorder themselves -- so we want to skip the update to things a
        // little faster. We also need to re-render if the content changes,
        // which happens only in the editor. (We do want to update the floating
        // card on mouse move to update its position.)
        return this.props.floating || nextProps.floating || this.props.content !== nextProps.content ||
        // TODO(alpert): Remove ref here after fixing facebook/react#1392.
        this.props.ref !== nextProps.ref;
    },

    componentDidMount: function componentDidMount() {
        this.mouseMoveUpBound = false;
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        if (this.props.animating && !prevProps.animating) {
            // If we just were changed into animating, start the animation.
            // We pick the animation speed based on the distance that the card
            // needs to travel. (Why sqrt? Just because it looks nice -- with a
            // linear scale, far things take too long to come back.)
            var ms = 15 * Math.sqrt(Math.sqrt(Math.pow(this.props.animateTo.left - this.props.startOffset.left, 2) + Math.pow(this.props.animateTo.top - this.props.startOffset.top, 2)));
            $(ReactDOM.findDOMNode(this)).animate(this.props.animateTo, Math.max(ms, 1), this.props.onAnimationEnd);
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        // Event handlers should be unbound before component unmounting, but
        // just in case...
        if (this.mouseMoveUpBound) {
            console.warn("Removing an element with bound event handlers.");

            this.unbindMouseMoveUp();
            Util.resetTouchHandlers();
        }
    },

    bindMouseMoveUp: function bindMouseMoveUp() {
        this.mouseMoveUpBound = true;
        $(document).on("mousemove", this.onMouseMove);
        $(document).on("mouseup", this.onMouseUp);
    },

    unbindMouseMoveUp: function unbindMouseMoveUp() {
        this.mouseMoveUpBound = false;
        $(document).off("mousemove", this.onMouseMove);
        $(document).off("mouseup", this.onMouseUp);
    },

    onMouseDown: function onMouseDown(event) {
        event.preventDefault();
        var loc = Util.extractPointerLocation(event);
        if (loc) {
            this.bindMouseMoveUp();
            this.props.onMouseDown && this.props.onMouseDown(loc, ReactDOM.findDOMNode(this));
        }
    },

    onMouseMove: function onMouseMove(event) {
        event.preventDefault();
        var loc = Util.extractPointerLocation(event);
        if (loc) {
            this.props.onMouseMove && this.props.onMouseMove(loc);
        }
    },

    onMouseUp: function onMouseUp(event) {
        event.preventDefault();
        var loc = Util.extractPointerLocation(event);
        if (loc) {
            this.unbindMouseMoveUp();
            this.props.onMouseUp && this.props.onMouseUp(loc);
        }
    }
});

var NORMAL = "normal",
    AUTO = "auto",
    HORIZONTAL = "horizontal",
    VERTICAL = "vertical";

var Orderer = React.createClass({
    displayName: "Orderer",

    propTypes: {
        current: React.PropTypes.array,
        options: React.PropTypes.array,
        correctOptions: React.PropTypes.array,
        height: React.PropTypes.oneOf([NORMAL, AUTO]),
        layout: React.PropTypes.oneOf([HORIZONTAL, VERTICAL])
    },

    getDefaultProps: function getDefaultProps() {
        return {
            current: [],
            options: [],
            correctOptions: [],
            height: NORMAL,
            layout: HORIZONTAL
        };
    },

    getInitialState: function getInitialState() {
        return {
            current: [],
            dragging: false,
            placeholderIndex: null
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (!_.isEqual(this.props.current, nextProps.current)) {
            this.setState({ current: nextProps.current });
        }
    },

    render: function render() {
        var _this = this;

        // This is the card we are currently dragging
        var dragging = this.state.dragging && React.createElement(Card, { ref: "dragging",
            floating: true,
            content: this.state.dragContent,
            startOffset: this.state.offsetPos,
            startMouse: this.state.grabPos,
            mouse: this.state.mousePos,
            width: this.state.dragWidth,
            onMouseUp: this.onRelease,
            onMouseMove: this.onMouseMove,
            key: this.state.dragKey || "draggingCard"
        });

        // This is the card that is currently animating
        var animating = this.state.animating && React.createElement(Card, { floating: true,
            animating: true,
            content: this.state.dragContent,
            startOffset: this.state.offsetPos,
            width: this.state.dragWidth,
            animateTo: this.state.animateTo,
            onAnimationEnd: this.state.onAnimationEnd,
            key: this.state.dragKey || "draggingCard"
        });

        // This is the list of draggable, rearrangable cards
        var sortableCards = _.map(this.state.current, function (opt, i) {
            return React.createElement(Card, {
                ref: "sortable" + i,
                floating: false,
                content: opt.content,
                width: opt.width,
                key: opt.key,
                onMouseDown: this.state.animating ? $.noop : this.onClick.bind(null, "current", i) });
        }, this);

        if (this.state.placeholderIndex != null) {
            var placeholder = React.createElement(PlaceholderCard, {
                ref: "placeholder",
                width: this.state.dragWidth,
                height: this.state.dragHeight,
                key: "placeholder" });
            sortableCards.splice(this.state.placeholderIndex, 0, placeholder);
        }

        var anySortableCards = sortableCards.length > 0;
        sortableCards.push(dragging, animating);

        // If there are no cards in the list, then add a "hint" card
        var sortable = React.createElement(
            "div",
            { className: "ui-helper-clearfix draggable-box" },
            !anySortableCards && React.createElement(DragHintCard, null),
            React.createElement(
                "div",
                { ref: "dragList" },
                sortableCards
            )
        );

        // This is the bank of stacks of cards
        var bank = React.createElement(
            "div",
            { ref: "bank", className: "bank ui-helper-clearfix" },
            _.map(this.props.options, function (opt, i) {
                return React.createElement(Card, {
                    ref: "bank" + i,
                    floating: false,
                    content: opt.content,
                    stack: true,
                    key: i,
                    onMouseDown: _this.state.animating ? $.noop : _this.onClick.bind(null, "bank", i),
                    onMouseMove: _this.onMouseMove,
                    onMouseUp: _this.onRelease });
            }, this)
        );

        return React.createElement(
            "div",
            { className: "draggy-boxy-thing orderer " + "height-" + this.props.height + " " + "layout-" + this.props.layout + " " + "above-scratchpad blank-background " + "ui-helper-clearfix",
                ref: "orderer" },
            bank,
            sortable
        );
    },

    onClick: function onClick(type, index, loc, draggable) {
        var $draggable = $(draggable);
        var list = this.state.current.slice();

        var opt;
        var placeholderIndex = null;

        if (type === "current") {
            // If this is coming from the original list, remove the original
            // card from the list
            list.splice(index, 1);
            opt = this.state.current[index];
            placeholderIndex = index;
        } else if (type === "bank") {
            opt = this.props.options[index];
        }

        this.setState({
            current: list,
            dragging: true,
            placeholderIndex: placeholderIndex,
            dragKey: opt.key,
            dragContent: opt.content,
            dragWidth: $draggable.width(),
            dragHeight: $draggable.height(),
            grabPos: loc,
            mousePos: loc,
            offsetPos: $draggable.position()
        });
    },

    onRelease: function onRelease(loc) {
        var _this2 = this;

        var draggable = ReactDOM.findDOMNode(this.refs.dragging);
        if (draggable == null) {
            return;
        }
        var inCardBank = this.isCardInBank(draggable);
        var index = this.state.placeholderIndex;

        // Here, we build a callback function for the card to call when it is
        // done animating
        var onAnimationEnd = function onAnimationEnd() {
            var list = _this2.state.current.slice();

            if (!inCardBank) {
                // Insert the new card into the position
                var newCard = {
                    content: _this2.state.dragContent,
                    key: _.uniqueId("perseus_draggable_card_"),
                    width: _this2.state.dragWidth
                };

                list.splice(index, 0, newCard);
            }

            _this2.props.onChange({
                current: list
            });
            _this2.setState({
                current: list,
                dragging: false,
                placeholderIndex: null,
                animating: false
            });
        };

        // Find the position of the card we should animate to
        // TODO(alpert): Update mouse position once more before animating?
        var offset = $(draggable).position();
        var finalOffset = null;
        if (inCardBank) {
            // If we're in the card bank, go through the options to find the
            // one with the same content
            _.each(this.props.options, function (opt, i) {
                if (opt.content === this.state.dragContent) {
                    var card = ReactDOM.findDOMNode(this.refs["bank" + i]);
                    finalOffset = $(card).position();
                }
            }, this);
        } else {
            // Otherwise, go to the position that the placeholder is at
            finalOffset = $(ReactDOM.findDOMNode(this.refs.placeholder)).position();
        }

        if (finalOffset == null) {
            // If we didn't find a card to go to, simply make the changes we
            // would have made at the end. (should only happen if we are
            // messing around with card contents, and not on the real site)
            onAnimationEnd();
        } else {
            this.setState({
                offsetPos: offset,
                animateTo: finalOffset,
                onAnimationEnd: onAnimationEnd,
                animating: true,
                dragging: false
            });
        }
    },

    onMouseMove: function onMouseMove(loc) {
        var draggable = ReactDOM.findDOMNode(this.refs.dragging);
        if (draggable == null) {
            return;
        }

        var index;
        if (this.isCardInBank(draggable)) {
            index = null;
        } else {
            index = this.findCorrectIndex(draggable, this.state.current);
        }

        this.setState({
            mousePos: loc,
            placeholderIndex: index
        });
    },

    findCorrectIndex: function findCorrectIndex(draggable, list) {
        // Find the correct index for a card given the current cards.
        var isHorizontal = this.props.layout === HORIZONTAL,
            $dragList = $(ReactDOM.findDOMNode(this.refs.dragList)),
            leftEdge = $dragList.offset().left,
            topEdge = $dragList.offset().top,
            midWidth = $(draggable).offset().left - leftEdge,
            midHeight = $(draggable).offset().top - topEdge,
            index = 0,
            sumWidth = 0,
            sumHeight = 0;

        if (isHorizontal) {
            _.each(list, function (opt, i) {
                var card = ReactDOM.findDOMNode(this.refs["sortable" + i]);
                var outerWidth = $(card).outerWidth(true);
                if (midWidth > sumWidth + outerWidth / 2) {
                    index += 1;
                }
                sumWidth += outerWidth;
            }, this);
        } else {
            _.each(list, function (opt, i) {
                var card = ReactDOM.findDOMNode(this.refs["sortable" + i]);
                var outerHeight = $(card).outerHeight(true);
                if (midHeight > sumHeight + outerHeight / 2) {
                    index += 1;
                }
                sumHeight += outerHeight;
            }, this);
        }

        return index;
    },

    isCardInBank: function isCardInBank(draggable) {
        if (draggable == null) {
            return false;
        }

        var isHorizontal = this.props.layout === HORIZONTAL,
            $draggable = $(draggable),
            $bank = $(ReactDOM.findDOMNode(this.refs.bank)),
            draggableOffset = $draggable.offset(),
            bankOffset = $bank.offset(),
            draggableHeight = $draggable.outerHeight(true),
            bankHeight = $bank.outerHeight(true),
            bankWidth = $bank.outerWidth(true),
            dragList = ReactDOM.findDOMNode(this.refs.dragList),
            dragListWidth = $(dragList).width(),
            draggableWidth = $draggable.outerWidth(true);

        if (isHorizontal) {
            return draggableOffset.top + draggableHeight / 2 < bankOffset.top + bankHeight;
        } else {
            return draggableOffset.left + draggableWidth / 2 < bankOffset.left + bankWidth;
        }
    },

    toJSON: function toJSON(skipValidation) {
        return { current: _.map(this.props.current, function (v) {
                return v.content;
            }) };
    },

    simpleValidate: function simpleValidate(rubric) {
        return Orderer.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Orderer, {
    validate: function validate(state, rubric) {
        if (state.current.length === 0) {
            return {
                type: "invalid",
                message: null
            };
        }

        var correct = _.isEqual(state.current, _.pluck(rubric.correctOptions, 'content'));

        return {
            type: "points",
            earned: correct ? 1 : 0,
            total: 1,
            message: null
        };
    }
});

var OrdererEditor = React.createClass({
    displayName: "OrdererEditor",

    propTypes: {
        correctOptions: React.PropTypes.array,
        otherOptions: React.PropTypes.array,
        height: React.PropTypes.oneOf([NORMAL, AUTO]),
        layout: React.PropTypes.oneOf([HORIZONTAL, VERTICAL]),
        onChange: React.PropTypes.func.isRequired
    },

    getDefaultProps: function getDefaultProps() {
        return {
            correctOptions: [{ content: "$x$" }],
            otherOptions: [{ content: "$y$" }],
            height: NORMAL,
            layout: HORIZONTAL
        };
    },

    render: function render() {
        var editor = this;

        return React.createElement(
            "div",
            { className: "perseus-widget-orderer" },
            React.createElement(
                "div",
                null,
                ' ',
                "\u6B63\u78BA\u7B54\u6848:",
                ' ',
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u8ACB\u5C07\u5361\u7247\u4F9D\u6B63\u78BA\u7B54\u6848\u7684\u9806\u5E8F\u6392\u5217\uFF0C\u7B54\u6848\u4E2D\u5141\u8A31\u4F7F\u7528\u591A\u5F35\u76F8\u540C\u7684\u5361\u7247\uFF0C\u4F46\u5728\u5019\u9078\u5361\u7247\u4E2D\u50C5\u6703\u986F\u793A\u4E00\u6B21\u3002"
                    )
                )
            ),
            React.createElement(TextListEditor, {
                options: _.pluck(this.props.correctOptions, "content"),
                onChange: this.onOptionsChange.bind(this, "correctOptions"),
                layout: this.props.layout }),
            React.createElement(
                "div",
                null,
                ' ',
                "\u5176\u4ED6\u5361\u7247:",
                ' ',
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u53EF\u5728\u6B64\u589E\u52A0\u4E0D\u5728\u7B54\u6848\u4E2D\u4F7F\u7528\u7684\u5361\u7247\u3002"
                    )
                )
            ),
            React.createElement(TextListEditor, {
                options: _.pluck(this.props.otherOptions, "content"),
                onChange: this.onOptionsChange.bind(this, "otherOptions"),
                layout: this.props.layout }),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    ' ',
                    "\u986F\u793A\u65B9\u5F0F:",
                    ' ',
                    React.createElement(
                        "select",
                        { value: this.props.layout,
                            onChange: this.onLayoutChange },
                        React.createElement(
                            "option",
                            { value: HORIZONTAL },
                            "\u6C34\u5E73\u65B9\u5F0F"
                        ),
                        React.createElement(
                            "option",
                            { value: VERTICAL },
                            "\u5782\u76F4\u65B9\u5F0F"
                        )
                    )
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7576\u5361\u7247\u4E2D\u7684\u6587\u5B57\u8F03\u77ED\u6216\u662F\u5716\u5F62\u8F03\u5C0F\u6642\uFF0C\u5EFA\u8B70\u53EF\u9078\u7528\u6C34\u5E73\u65B9\u5F0F\u986F\u793A\uFF0C \u5782\u76F4\u65B9\u5F0F\u8F03\u9069\u7528\u65BC\u8F03\u9577\u7684\u6587\u5B57\u6558\u8FF0 (\u5982\uFF1A\u8B49\u660E) \u6216\u8F03\u5927\u7684\u5716\u5F62\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    ' ',
                    "\u986F\u793A\u9AD8\u5EA6:",
                    ' ',
                    React.createElement(
                        "select",
                        { value: this.props.height,
                            onChange: this.onHeightChange },
                        React.createElement(
                            "option",
                            { value: NORMAL },
                            "\u4E00\u822C\u5927\u5C0F"
                        ),
                        React.createElement(
                            "option",
                            { value: AUTO },
                            "\u81EA\u52D5\u8ABF\u6574"
                        )
                    )
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u82E5\u5361\u7247\u5167\u5BB9\u70BA\u6587\u5B57\u6642\uFF0C\u5EFA\u8B70\u9078\u7528\"\u4E00\u822C\u5927\u5C0F\"\uFF1B\u82E5\u5361\u7247\u5167\u5BB9\u70BA\u5716\u7247\u6642\uFF0C\u5EFA\u8B70\u9078\u7528\"\u81EA\u52D5\u8ABF\u6574\"\u3002"
                    )
                )
            )
        );
    },

    onOptionsChange: function onOptionsChange(whichOptions, options, cb) {
        var props = {};
        props[whichOptions] = _.map(options, function (option) {
            return { content: option };
        });
        this.props.onChange(props, cb);
    },

    onLayoutChange: function onLayoutChange(e) {
        this.props.onChange({ layout: e.target.value });
    },

    onHeightChange: function onHeightChange(e) {
        this.props.onChange({ height: e.target.value });
    },

    toJSON: function toJSON(skipValidation) {
        // We combine the correct answer and the other cards by merging them,
        // removing duplicates and empty cards, and sorting them into
        // categories based on their content
        var options = _.chain(_.pluck(this.props.correctOptions, 'content')).union(_.pluck(this.props.otherOptions, 'content')).uniq().reject(function (content) {
            return content === "";
        }).sort().sortBy(function (content) {
            if (/\d/.test(content)) {
                return 0;
            } else if (/^\$?[a-zA-Z]+\$?$/.test(content)) {
                return 2;
            } else {
                return 1;
            }
        }).map(function (content) {
            return { content: content };
        }).value();

        return {
            options: options,
            correctOptions: this.props.correctOptions,
            otherOptions: this.props.otherOptions,
            height: this.props.height,
            layout: this.props.layout
        };
    }
});

module.exports = {
    name: "orderer",
    displayName: "Orderer/卡片重組",
    widget: Orderer,
    editor: OrdererEditor,
    hidden: false
};

},{"../components/text-list-editor.jsx":267,"../renderer.jsx":298,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95}],330:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require("react-dom");
var InfoTip = require("react-components/js/info-tip.jsx");
var NumberInput = require("../components/number-input.jsx");
var TextListEditor = require("../components/text-list-editor.jsx");
var RangeInput = require("../components/range-input.jsx");

var deepEq = require("../util.js").deepEq;

var BAR = "bar",
    LINE = "line",
    PIC = "pic",
    HISTOGRAM = "histogram",
    DOTPLOT = "dotplot";

var DOT_PLOT_POINT_SIZE = 4;
var DOT_PLOT_POINT_PADDING = 8;

var widgetPropTypes = {
    type: React.PropTypes.oneOf([BAR, LINE, PIC, HISTOGRAM, DOTPLOT]),
    labels: React.PropTypes.arrayOf(React.PropTypes.string),
    categories: React.PropTypes.arrayOf(React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string])),

    scaleY: React.PropTypes.number,
    maxY: React.PropTypes.number,
    snapsPerLine: React.PropTypes.number,

    picSize: React.PropTypes.number,
    pixBoxHeight: React.PropTypes.number,
    picUrl: React.PropTypes.string,

    plotDimensions: React.PropTypes.arrayOf(React.PropTypes.number),
    labelInterval: React.PropTypes.number
};

var formatNumber = function formatNumber(num) {
    return "$" + KhanUtil.knumber.round(num, 2) + "$";
};

var Plotter = React.createClass({
    displayName: "Plotter",

    propTypes: widgetPropTypes,

    getDefaultProps: function getDefaultProps() {
        return {
            type: BAR,
            labels: ["", ""],
            categories: [""],

            scaleY: 1,
            maxY: 10,
            snapsPerLine: 2,

            picSize: 40,
            picBoxHeight: 48,
            picUrl: "",

            plotDimensions: [380, 300],
            labelInterval: 1
        };
    },

    getInitialState: function getInitialState() {
        return {
            values: this.props.starting || [1]
        };
    },

    render: function render() {
        return React.createElement("div", {
            className: "perseus-widget-plotter graphie above-scratchpad",
            ref: "graphieDiv" });
    },

    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        if (this.shouldSetupGraphie) {
            this.setupGraphie(prevState);
        }
    },

    componentDidMount: function componentDidMount() {
        this.setupGraphie(this.state);
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var props = ["type", "labels", "categories", "scaleY", "maxY", "snapsPerLine", "picUrl", "labelInterval"];

        this.shouldSetupGraphie = _.any(props, function (prop) {
            return !_.isEqual(this.props[prop], nextProps[prop]);
        }, this);

        if (!_.isEqual(this.props.starting, nextProps.starting) && !_.isEqual(this.state.values, nextProps.starting)) {
            this.shouldSetupGraphie = true;
            this.setState({ values: nextProps.starting });
        }
    },

    setupGraphie: function setupGraphie(prevState) {
        var self = this;
        self.shouldSetupGraphie = false;
        var graphieDiv = ReactDOM.findDOMNode(self.refs.graphieDiv);
        $(graphieDiv).empty();
        var graphie = KhanUtil.createGraphie(graphieDiv);

        // TODO(jakesandlund): It's not the react way to hang
        // something off the component object, but since graphie
        // is outside React, it makes it easier to do this.
        self.graphie = graphie;
        self.graphie.pics = [];
        self.mousedownPic = false;

        var isBar = self.props.type === BAR,
            isLine = self.props.type === LINE,
            isPic = self.props.type === PIC,
            isHistogram = self.props.type === HISTOGRAM,
            isDotplot = self.props.type === DOTPLOT;

        var isTiledPlot = isPic || isDotplot;

        var config = {};
        var c = config; // c for short

        c.graph = {
            lines: [],
            bars: [],
            points: [],
            dividers: []
        };
        c.scaleY = self.props.scaleY;
        c.dimX = self.props.categories.length;
        var plotDimensions = self.props.plotDimensions;
        if (isLine) {
            c.dimX += 1;
        } else if (isHistogram) {
            c.barPad = 0;
            c.barWidth = 1;
        } else if (isBar) {
            c.barPad = 0.15;
            c.barWidth = 1 - 2 * c.barPad;
            c.dimX += 2 * c.barPad;
        } else if (isTiledPlot) {
            c.picBoxHeight = self.props.picBoxHeight;
            c.picBoxWidthPx = plotDimensions[0] / self.props.categories.length;
            var picPadAllWidth = plotDimensions[0] - c.dimX * c.picBoxWidthPx;
            c.picPad = picPadAllWidth / (2 * c.dimX + 2);
            var picFullWidth = c.picBoxWidthPx + 2 * c.picPad;

            // Convert from px to "unscaled"
            c.picPad = c.picPad / picFullWidth;
            c.picBoxWidth = c.picBoxWidthPx / picFullWidth;
            c.dimX += 2 * c.picPad;
        }

        if (isDotplot) {
            c.picBoxHeight = DOT_PLOT_POINT_SIZE * 2 + DOT_PLOT_POINT_PADDING;
        }

        c.dimY = Math.ceil(self.props.maxY / c.scaleY) * c.scaleY;
        c.scale = _.map([c.dimX, c.dimY], function (dim, i) {
            return plotDimensions[i] / dim;
        });
        if (isTiledPlot) {
            c.scale[1] = c.picBoxHeight / c.scaleY;
        }

        var padX = 25 / c.scale[0];
        var padY = 25 / c.scale[1];

        // Since dotplot doesn't have an axis along the left it looks weird
        // with the same padding as the others
        if (isDotplot) {
            padX /= 2;
        }

        graphie.init({
            range: [[-3 * padX, c.dimX + padX], [-3 * padY, c.dimY + padY]],
            scale: c.scale
        });
        graphie.addMouseLayer({
            allowScratchpad: true
        });

        if (!isTiledPlot) {
            for (var y = 0; y <= c.dimY; y += c.scaleY) {
                graphie.label([0, y], KhanUtil.roundToApprox(y, 2), "left",
                /* isTeX */true /* for the \approx symbol */
                );
                graphie.style({ stroke: "#000", strokeWidth: 1, opacity: 0.3 }, function () {
                    graphie.line([0, y], [c.dimX, y]);
                });
            }
        }

        self.setupCategories(config);

        if (isTiledPlot) {
            self.mousedownPic = false;
            $(document).on("mouseup.plotterPic", function () {
                self.mousedownPic = false;
            });
            self.drawPicHeights(self.state.values, prevState.values);
        }

        graphie.style({ stroke: "#000", strokeWidth: 2, opacity: 1.0 }, function () {
            if (isDotplot) {
                graphie.line([0.5, 0], [c.dimX - 0.5, 0]);
            } else {
                graphie.line([0, 0], [c.dimX, 0]);
                graphie.line([0, 0], [0, c.dimY]);
            }
        });

        graphie.label([c.dimX / 2, -35 / c.scale[1]], self.props.labels[0], "below", false).css("font-weight", "bold");

        graphie.label([-60 / c.scale[0], c.dimY / 2], self.props.labels[1], "center", false).css("font-weight", "bold").addClass("rotate");
    },

    labelCategory: function labelCategory(x, category) {
        var graphie = this.graphie;
        category = category + "";
        var isTeX = false;
        var mathyCategory = category.match(/^\$(.*)\$$/);
        if (mathyCategory) {
            category = mathyCategory[1];
            isTeX = true;
        }
        graphie.label([x, 0], category, "below", isTeX);
    },

    setupCategories: function setupCategories(config) {
        var self = this;
        var c = config;
        var graphie = self.graphie;

        if (self.props.type === HISTOGRAM) {
            // Histograms with n labels/categories have n - 1 buckets
            _.times(self.props.categories.length - 1, function (i) {
                self.setupBar({
                    index: i,
                    startHeight: self.state.values[i],
                    config: config,
                    isHistogram: true
                });
            });

            // Label categories
            _.each(self.props.categories, function (category, i) {
                var x = 0.5 + i * c.barWidth;

                self.labelCategory(x, category);
                var tickHeight = 6 / c.scale[1];
                graphie.style({
                    stroke: "#000", strokeWidth: 2, opacity: 1.0
                }, function () {
                    graphie.line([x, -tickHeight], [x, 0]);
                });
            });
        } else {
            _.each(self.props.categories, function (category, i) {
                var startHeight = self.state.values[i];
                var x;

                if (self.props.type === BAR) {
                    x = self.setupBar({
                        index: i,
                        startHeight: startHeight,
                        config: config,
                        isHistogram: false
                    });
                } else if (self.props.type === LINE) {
                    x = self.setupLine(i, startHeight, config);
                } else if (self.props.type === PIC) {
                    x = self.setupPic(i, config);
                } else if (self.props.type === DOTPLOT) {
                    x = self.setupDotplot(i, config);
                }

                var tickStart = 0;
                var tickEnd = -6 / c.scale[1];

                if (self.props.type === DOTPLOT) {
                    tickStart = -tickEnd;
                }

                if (self.props.type === DOTPLOT) {
                    // Dotplot lets you specify to only show labels every 'n'
                    // ticks. It also looks nicer if it makes the labelled
                    // ticks a bit bigger.
                    if (i % self.props.labelInterval === 0 || i === self.props.categories.length - 1) {
                        self.labelCategory(x, category);
                        tickStart *= 1.5;
                        tickEnd *= 1.5;
                    }
                } else {
                    self.labelCategory(x, category);
                }

                graphie.style({
                    stroke: "#000", strokeWidth: 2, opacity: 1.0
                }, function () {
                    graphie.line([x, tickStart], [x, tickEnd]);
                });
            });
        }
    },

    setupBar: function setupBar(args) {
        var i = args.index;
        var startHeight = args.startHeight;
        var config = args.config;
        var isHistogram = args.isHistogram;

        var self = this;
        var graphie = self.graphie;
        var barHalfWidth = config.barWidth / 2;
        var x;
        if (isHistogram) {
            x = 0.5 + i * config.barWidth + barHalfWidth;
        } else {
            x = 0.5 + i + config.barPad;
        }

        var scaleBar = function scaleBar(i, height) {
            var center = graphie.scalePoint(0);

            // Scale filled bucket (bar)
            config.graph.bars[i].scale(1, Math.max(0.01, height / config.scaleY), center[0], center[1]);

            if (isHistogram) {
                // Scale dividers between buckets
                var leftDivider = config.graph.dividers[i - 1],
                    rightDivider = config.graph.dividers[i];

                if (leftDivider) {
                    var divHeight = Math.min(self.state.values[i - 1], height);
                    leftDivider.scale(1, Math.max(0.01, divHeight / config.scaleY), center[0], center[1]);
                }

                if (rightDivider) {
                    var divHeight = Math.min(self.state.values[i + 1], height);
                    rightDivider.scale(1, Math.max(0.01, divHeight / config.scaleY), center[0], center[1]);
                }
            }

            // Align top of bar to edge unless at bottom
            if (height) {
                config.graph.lines[i].visibleLine.translate(0, 2);
            }
        };

        graphie.style({
            stroke: "none", fill: KhanUtil.LIGHT_BLUE, opacity: 1.0
        }, function () {
            config.graph.bars[i] = graphie.path([[x - barHalfWidth, 0], [x - barHalfWidth, config.scaleY], [x + barHalfWidth, config.scaleY], [x + barHalfWidth, 0], [x - barHalfWidth, 0]]);
        });

        if (isHistogram) {
            if (i > 0) {
                // Don't draw a divider to the left of the first bucket
                graphie.style({
                    stroke: "#000", strokeWidth: 1, opacity: 0.3
                }, function () {
                    config.graph.dividers.push(graphie.path([[x - barHalfWidth, 0], [x - barHalfWidth, config.scaleY]]));
                });
            }
        }

        config.graph.lines[i] = graphie.addMovableLineSegment({
            coordA: [x - barHalfWidth, startHeight],
            coordZ: [x + barHalfWidth, startHeight],
            snapY: config.scaleY / self.props.snapsPerLine,
            constraints: {
                constrainX: true
            },
            normalStyle: {
                "stroke": KhanUtil.INTERACTIVE,
                "stroke-width": 4
            }
        });

        config.graph.lines[i].onMove = function (dx, dy) {
            var y = this.coordA[1];
            if (y < 0 || y > config.dimY) {
                y = Math.min(Math.max(y, 0), config.dimY);
                this.coordA[1] = this.coordZ[1] = y;

                // Snap the line back into range.
                this.transform();
            }

            var values = _.clone(self.state.values);
            values[i] = y;
            self.setState({ values: values });
            self.props.onChange({ values: values });

            scaleBar(i, y);
        };

        scaleBar(i, startHeight);
        return x;
    },

    setupLine: function setupLine(i, startHeight, config) {
        var self = this;
        var c = config;
        var graphie = self.graphie;
        var x = i + 1;
        c.graph.points[i] = graphie.addMovablePoint({
            coord: [x, startHeight],
            constraints: {
                constrainX: true
            },
            normalStyle: {
                fill: KhanUtil.INTERACTIVE,
                stroke: KhanUtil.INTERACTIVE
            },
            snapY: c.scaleY / self.props.snapsPerLine
        });
        c.graph.points[i].onMove = function (x, y) {
            y = Math.min(Math.max(y, 0), c.dimY);
            var values = _.clone(self.state.values);
            values[i] = y;
            self.setState({ values: values });
            self.props.onChange({ values: values });
            return [x, y];
        };
        if (i > 0) {
            c.graph.lines[i] = graphie.addMovableLineSegment({
                pointA: c.graph.points[i - 1],
                pointZ: c.graph.points[i],
                constraints: {
                    fixed: true
                },
                normalStyle: {
                    stroke: "#9ab8ed",
                    "stroke-width": 2
                }
            });
        }
        return x;
    },

    setupDotplot: function setupDotplot(i, config) {
        var graphie = this.graphie;
        return this.setupTiledPlot(i, 1, config, function (x, y) {
            return graphie.ellipse([x, y], [DOT_PLOT_POINT_SIZE / graphie.scale[0], DOT_PLOT_POINT_SIZE / graphie.scale[1]], {
                fill: KhanUtil.INTERACTIVE,
                stroke: KhanUtil.INTERACTIVE
            });
        });
    },

    setupPic: function setupPic(i, config) {
        var _this = this;

        var graphie = this.graphie;
        return this.setupTiledPlot(i, 0, config, function (x, y) {
            var scaledCenter = graphie.scalePoint([x, y]);
            var size = _this.props.picSize;
            return graphie.raphael.image(_this.props.picUrl, scaledCenter[0] - size / 2, scaledCenter[1] - size / 2, size, size);
        });
    },

    setupTiledPlot: function setupTiledPlot(i, bottomMargin, config, createImage) {
        var self = this;
        var c = config;
        var graphie = self.graphie;
        var pics = graphie.pics;
        var x = i + 0.5 + c.picPad;

        pics[i] = [];
        var n = Math.round(c.dimY / c.scaleY) + 1;
        _(n).times(function (j) {
            j -= 1;
            var midY = (j + 0.5) * c.scaleY;
            var leftX = x - c.picBoxWidth / 2;
            var topY = midY + 0.5 * c.scaleY;
            var coord = graphie.scalePoint([leftX, topY + bottomMargin]);
            var mouseRect = graphie.mouselayer.rect(coord[0], coord[1], c.picBoxWidthPx, c.picBoxHeight);
            $(mouseRect[0]).css({ fill: "#000", opacity: 0.0, cursor: "pointer" }).on("mousedown", function (e) {
                self.mousedownPic = true;
                self.whichPicClicked = i;
                self.setPicHeight(i, topY);
                e.preventDefault();
            }).on("mouseover", function () {
                if (self.mousedownPic) {
                    self.setPicHeight(self.whichPicClicked, topY);
                }
            });

            if (j < 0) {
                // Don't show a pic underneath the axis!
                return;
            }
            pics[i][j] = createImage(x, midY + bottomMargin);
        });
        return x;
    },

    setPicHeight: function setPicHeight(i, y) {
        var values = _.clone(this.state.values);
        values[i] = y;
        this.drawPicHeights(values, this.state.values);
        this.setState({ values: values });
        this.props.onChange({ values: values });
    },

    drawPicHeights: function drawPicHeights(values, prevValues) {
        var self = this;
        var graphie = self.graphie;
        var pics = graphie.pics;
        _.each(pics, function (ps, i) {
            _.each(ps, function (pic, j) {
                var y = (j + 1) * self.props.scaleY;
                var show = y <= values[i];
                if (self.props.type === DOTPLOT) {
                    var wasShown = y <= prevValues[i];
                    var wasJustShown = show && !wasShown;
                    if (wasJustShown) {
                        pic.animate({
                            "stroke-width": 8
                        }, 75, function () {
                            return pic.animate({
                                "stroke-width": 2
                            }, 75);
                        });
                    }
                }
                $(pic[0]).css({ display: show ? "inline" : "none" });
            });
        });
    },

    toJSON: function toJSON(skipValidation) {
        return this.state.values;
    },

    simpleValidate: function simpleValidate(rubric) {
        return Plotter.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Plotter, {
    validate: function validate(guess, rubric) {
        if (deepEq(guess, rubric.starting)) {
            return {
                type: "invalid",
                message: null
            };
        } else {
            return {
                type: "points",
                earned: deepEq(guess, rubric.correct) ? 1 : 0,
                total: 1,
                message: null
            };
        }
    }
});

// Return a copy of array with length n, padded with given value
function padArray(array, n, value) {
    var copy = _.clone(array);
    copy.length = n;
    for (var i = array.length; i < n; i++) {
        copy[i] = value;
    }
    return copy;
}

var editorDefaults = {
    scaleY: 1,
    maxY: 10,
    snapsPerLine: 2
};

var PlotterEditor = React.createClass({
    displayName: "PlotterEditor",

    propTypes: widgetPropTypes,

    getDefaultProps: function getDefaultProps() {
        return _.extend({}, editorDefaults, {
            correct: [1],
            starting: [1],

            type: BAR,
            labels: ["", ""],
            categories: [""],

            picSize: 30,
            picBoxHeight: 36,
            picUrl: Khan.imageBase + "badges/earth-small.png",

            plotDimensions: [275, 200],
            labelInterval: 1
        });
    },

    getInitialState: function getInitialState() {
        return {
            editing: "correct",
            pic: null,
            loadedUrl: null,
            minX: null,
            maxX: null,
            tickStep: null
        };
    },

    componentWillMount: function componentWillMount() {
        this.fetchPic(this.props.picUrl);
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.fetchPic(nextProps.picUrl);
    },

    fetchPic: function fetchPic(url) {
        var _this2 = this;

        if (this.state.loadedUrl !== url) {
            var pic = new Image();
            pic.src = url;
            pic.onload = function () {
                _this2.setState({
                    pic: pic,
                    loadedUrl: url
                });
            };
        }
    },

    render: function render() {
        var setFromScale = _.contains([LINE, HISTOGRAM, DOTPLOT], this.props.type);
        var canChangeSnaps = !_.contains([PIC, DOTPLOT], this.props.type);
        return React.createElement(
            "div",
            { className: "perseus-widget-plotter-editor" },
            React.createElement(
                "div",
                null,
                "\u5716\u8868\u7A2E\u985E:",
                ' ',
                _.map([BAR, LINE, PIC, HISTOGRAM, DOTPLOT], function (type) {
                    return React.createElement(
                        "label",
                        { key: type },
                        React.createElement("input", {
                            type: "radio",
                            name: "chart-type",
                            checked: this.props.type === type,
                            onChange: _.partial(this.changeType, type) }),
                        type
                    );
                }, this)
            ),
            React.createElement(
                "div",
                null,
                "\u6A19\u7C64:",
                ' ',
                _.map(["x軸", "y軸"], function (axis, i) {
                    return React.createElement(
                        "label",
                        { key: axis },
                        axis + ":",
                        React.createElement("input", {
                            type: "text",
                            onChange: _.partial(this.changeLabel, i),
                            defaultValue: this.props.labels[i] })
                    );
                }, this)
            ),
            setFromScale && React.createElement(
                "div",
                { className: "set-from-scale-box" },
                React.createElement(
                    "span",
                    { className: "categories-title" },
                    "\u6279\u6B21\u8A2D\u5B9A\u985E\u5225 (x\u8EF8)"
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "label",
                        null,
                        "\u9593\u8DDD:",
                        ' ',
                        React.createElement(NumberInput, {
                            placeholder: 1,
                            useArrowKeys: true,
                            value: this.state.tickStep,
                            onChange: this.handleChangeTickStep })
                    ),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u5169\u500B\u8CC7\u6599\u9EDE\u9593\u7684\u9593\u8DDD\u3002"
                        )
                    )
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "label",
                        null,
                        "\u7BC4\u570D:",
                        ' ',
                        React.createElement(RangeInput, {
                            placeholder: [0, 10],
                            useArrowKeys: true,
                            value: [this.state.minX, this.state.maxX],
                            onChange: this.handleChangeRange })
                    )
                ),
                React.createElement(
                    "div",
                    null,
                    React.createElement(
                        "button",
                        { onClick: this.setCategoriesFromScale },
                        "\u8A2D\u5B9A",
                        ' '
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u6A19\u7C64\u7BC4\u570D:",
                    ' ',
                    React.createElement(NumberInput, {
                        useArrowKeys: true,
                        value: this.props.labelInterval,
                        onChange: this.changeLabelInterval })
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "Which ticks to display the labels for. For instance, setting this to \"4\" will only show every 4th label (plus the last one)"
                    )
                )
            ),
            this.props.type === PIC && React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u5716\u4F8B:",
                    ' ',
                    React.createElement("input", {
                        type: "text",
                        className: "pic-url",
                        defaultValue: this.props.picUrl,
                        onKeyPress: this.changePicUrl,
                        onBlur: this.changePicUrl }),
                    React.createElement(
                        InfoTip,
                        null,
                        React.createElement(
                            "p",
                            null,
                            "\u9810\u8A2D\u503C\u70BA\u5730\u7403\u5716\u4F8B\uFF0C\u82E5\u8981\u4F7F\u7528\u7279\u5B9A\u5716\u4F8B\uFF0C\u8ACB\u65BC\u6B64\u8655\u8F38\u5165\u5716\u7247\u9023\u7D50\u7DB2\u5740\u3002"
                        )
                    )
                ),
                this.state.pic && this.state.pic.width !== this.state.pic.height && React.createElement(
                    "p",
                    { className: "warning" },
                    React.createElement(
                        "b",
                        null,
                        "Warning"
                    ),
                    ": You are using a picture which is not square.  This means the image will get distorted. You should probably crop it to be square."
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u985E\u5225 (x\u8EF8):",
                    ' ',
                    React.createElement(TextListEditor, {
                        ref: "categories",
                        layout: "horizontal",
                        options: this.props.categories,
                        onChange: this.changeCategories })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u7D44\u8DDD (y\u8EF8):",
                    ' ',
                    React.createElement("input", {
                        type: "text",
                        onChange: this.changeScale,
                        defaultValue: this.props.scaleY })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u6700\u5927\u503C (y\u8EF8):",
                    ' ',
                    React.createElement("input", {
                        type: "text",
                        ref: "maxY",
                        onChange: this.changeMax,
                        defaultValue: this.props.maxY })
                )
            ),
            canChangeSnaps && React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u5782\u76F4\u62D6\u62C9\u9593\u8DDD\u53C3\u6578:",
                    ' ',
                    React.createElement("input", {
                        type: "text",
                        onChange: this.changeSnaps,
                        defaultValue: this.props.snapsPerLine })
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7528\u4EE5\u8ABF\u6574\u5B78\u751F\u5728\u62D6\u62C9\u7B54\u6848\u6642\u7684\uFF0Cy \u8EF8\u7684\u55AE\u4F4D\u9593\u8DDD\u524D\u9032\u6BD4\u4F8B\uFF0C\u8209\u4F8B\u4F86\u8AAA\uFF0C \u7576\u6B64\u53C3\u6578\u8A2D\u5B9A\u70BA 2 \u4E4B\u6642\uFF0C\u6BCF\u6B21\u7684\u62D6\u62C9\u6642\u7684\u524D\u9032\u55AE\u4F4D\u70BA 1/2 \u500B y \u8EF8 \u55AE\u4F4D\u9593\u8DDD\u3002\u4E00\u822C\u4F86\u8AAA\uFF0C\u70BA\u6C42\u5B78\u751F\u4F5C\u7B54\u6642\u7684\u4FBF\u5229\u6027\uFF0C\u6B64\u503C\u4E0D\u5B9C\u8A2D\u5B9A\u592A\u5927\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                "\u5716\u8868\u7DE8\u8F2F\u503C:",
                ' ',
                _.map(["答案值", "起始值"], function (editing) {
                    return React.createElement(
                        "label",
                        { key: editing },
                        React.createElement("input", {
                            type: "radio",
                            name: "editing",
                            checked: this.state.editing === editing,
                            onChange: _.partial(this.changeEditing, editing) }),
                        editing
                    );
                }, this),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u9078\u7528\"\u7B54\u6848\u503C\"\u7DE8\u8F2F\u6B64\u984C\u7684\u5716\u8868\u7B54\u6848\uFF1B\u9078\u7528\"\u8D77\u59CB\u503C\"\u7DE8\u8F2F\u6B64\u984C\u4F5C\u7B54\u524D\u7684\u5716\u8868\u9810\u8A2D\u6A23\u5F0F\u3002"
                    )
                )
            ),
            React.createElement(Plotter, _extends({}, this.props, {
                starting: this.props[this.state.editing],
                onChange: this.handlePlotterChange }))
        );
    },

    handleChangeTickStep: function handleChangeTickStep(value) {
        this.setState({
            tickStep: value
        });
    },

    handleChangeRange: function handleChangeRange(newValue) {
        this.setState({
            minX: newValue[0],
            maxX: newValue[1]
        });
    },

    changeLabelInterval: function changeLabelInterval(value) {
        this.props.onChange({
            labelInterval: value
        });
    },

    handlePlotterChange: function handlePlotterChange(newProps) {
        var props = {};
        props[this.state.editing] = newProps.values;
        this.props.onChange(props);
    },

    changeType: function changeType(type) {
        var categories;
        if (type === HISTOGRAM) {
            // Switching to histogram, add a label (0) to the left
            categories = [formatNumber(0)].concat(this.props.categories);
            this.props.onChange({ type: type, categories: categories });
        } else if (this.props.type === HISTOGRAM) {
            // Switching from histogram, remove a label from the left
            categories = this.props.categories.slice(1);
            this.props.onChange({ type: type, categories: categories });
        } else {
            this.props.onChange({ type: type });
        }

        if (categories) {
            ReactDOM.findDOMNode(this.refs.categories).value = categories.join(", ");
        }
    },

    changeLabel: function changeLabel(i, e) {
        var labels = _.clone(this.props.labels);
        labels[i] = e.target.value;
        this.props.onChange({ labels: labels });
    },

    changePicUrl: function changePicUrl(e) {
        // Only continue on blur or "enter"
        if (e.type === "keypress" && e.keyCode !== 13) {
            return;
        }

        this.props.onChange({ picUrl: e.target.value });
    },

    changeCategories: function changeCategories(categories) {
        var n = categories.length;
        if (this.props.type === HISTOGRAM) {
            // Histograms with n labels/categories have n - 1 buckets
            n--;
        }
        var value = this.props.scaleY;

        this.props.onChange({
            categories: categories,
            correct: padArray(this.props.correct, n, value),
            starting: padArray(this.props.starting, n, value)
        });
    },

    changeScale: function changeScale(e) {
        var oldScale = this.props.scaleY;
        var newScale = +e.target.value || editorDefaults.scaleY;

        var scale = function scale(value) {
            return value * newScale / oldScale;
        };

        var maxY = scale(this.props.maxY);

        this.props.onChange({
            scaleY: newScale,
            maxY: maxY,
            correct: _.map(this.props.correct, scale),
            starting: _.map(this.props.starting, scale)
        });

        ReactDOM.findDOMNode(this.refs.maxY).value = maxY;
    },

    changeMax: function changeMax(e) {
        this.props.onChange({
            maxY: +e.target.value || editorDefaults.maxY
        });
    },

    changeSnaps: function changeSnaps(e) {
        this.props.onChange({
            snapsPerLine: +e.target.value || editorDefaults.snapsPerLine
        });
    },

    changeEditing: function changeEditing(editing) {
        this.setState({ editing: editing });
    },

    setCategoriesFromScale: function setCategoriesFromScale() {
        var scale = this.state.tickStep || 1;
        var min = this.state.minX || 0;
        var max = this.state.maxX || 0;
        var length = Math.floor((max - min) / scale) * scale;

        var categories;
        if (this.props.type === HISTOGRAM || this.props.type === DOTPLOT) {
            // Ranges for histogram and dotplot labels should start at zero
            categories = _.range(0, length + scale, scale);
        } else {
            categories = _.range(scale, length + scale, scale);
        }

        categories = _.map(categories, function (num) {
            return num + min;
        });
        categories = _.map(categories, formatNumber);

        this.changeCategories(categories);

        ReactDOM.findDOMNode(this.refs.categories).value = categories.join(", ");
    },

    toJSON: function toJSON(skipValidation) {
        var json = _.pick(this.props, "correct", "starting", "type", "labels", "categories", "scaleY", "maxY", "snapsPerLine", "labelInterval");

        if (this.props.type === PIC) {
            json.picUrl = this.props.picUrl;
        }

        return json;
    }
});

module.exports = {
    name: "plotter",
    displayName: "Plotter/統計圖",
    widget: Plotter,
    editor: PlotterEditor,
    hidden: false
};

},{"../components/number-input.jsx":261,"../components/range-input.jsx":263,"../components/text-list-editor.jsx":267,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95}],331:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var classNames = require("classnames");

var Changeable = require("../mixins/changeable.jsx");
var ApiClassNames = require("../perseus-api.jsx").ClassNames;

var ButtonGroup = require("react-components/js/button-group.jsx");
var Editor = require("../editor.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var Renderer = require("../renderer.jsx");

var InfoTip = require("react-components/js/info-tip.jsx");

var shuffle = require("../util.js").shuffle;
var seededRNG = require("../util.js").seededRNG;
var captureScratchpadTouchStart = require("../util.js").captureScratchpadTouchStart;

var BaseRadio = React.createClass({
    displayName: 'BaseRadio',

    propTypes: {
        labelWrap: React.PropTypes.bool,
        multipleSelect: React.PropTypes.bool,
        onCheckedChange: React.PropTypes.func,
        showClues: React.PropTypes.bool,
        onePerLine: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            onePerLine: true
        };
    },

    render: function render() {
        var radioGroupName = _.uniqueId("perseus_radio_");
        var inputType = this.props.multipleSelect ? "checkbox" : "radio";

        return React.createElement(
            'ul',
            { className: "perseus-widget-radio " + "above-scratchpad" },
            this.props.multipleSelect && React.createElement(
                'div',
                { className: 'instructions' },
                $._("請選擇所有正確的答案。")
            ),
            this.props.choices.map(function (choice, i) {
                var _this = this;

                var content = React.createElement(
                    'div',
                    null,
                    choice.content
                );

                var classSet = {
                    "inline": !this.props.onePerLine
                };
                classSet[ApiClassNames.RADIO.OPTION] = true;
                classSet[ApiClassNames.RADIO.SELECTED] = choice.checked;
                var className = classNames(classSet);

                return React.createElement(
                    'li',
                    { className: className, key: i },
                    React.createElement(
                        'div',
                        null,
                        React.createElement(
                            'span',
                            { className: 'checkbox' },
                            React.createElement('input', {
                                ref: "radio" + i,
                                type: inputType,
                                name: radioGroupName,
                                checked: choice.checked,
                                onChange: function onChange(e) {
                                    _this.checkOption(i, e.target.checked);
                                } })
                        ),
                        React.createElement(
                            'span',
                            {
                                className: "interactive-component " + ApiClassNames.RADIO.OPTION_CONTENT,
                                style: {
                                    cursor: "default"
                                },
                                onTouchStart: !this.props.labelWrap ? null : captureScratchpadTouchStart,
                                onClick: !this.props.labelWrap ? null : function (e) {
                                    // Don't send this to the scratchpad
                                    e.preventDefault();
                                    _this.checkOption(i, _this.props.multipleSelect ? !choice.checked : true);
                                } },
                            content
                        ),
                        Exercises.cluesEnabled === "cluesEnabled" && this.props.showClues && choice.checked && React.createElement(
                            'div',
                            { className: 'perseus-radio-clue' },
                            choice.clue
                        )
                    )
                );
            }, this)
        );
    },

    checkOption: function checkOption(radioIndex, shouldBeChecked) {
        var newChecked;
        if (this.props.multipleSelect) {
            // When multipleSelect is on, clicking an index toggles the
            // selection of just that index.
            newChecked = _.map(this.props.choices, function (choice, i) {
                return i === radioIndex ? shouldBeChecked : choice.checked;
            });
        } else {
            // When multipleSelect is turned off, we always select the
            // clicked index, and unselect everything else.
            newChecked = _.map(this.props.choices, function (choice, i) {
                return i === radioIndex;
            });
        }

        // We send just the array of [true/false] checked values here;
        // onCheckedChange reconstructs the new choices to send to
        // this.props.onChange
        this.props.onCheckedChange(newChecked);
    },

    focus: function focus(i) {
        ReactDOM.findDOMNode(this.refs["radio" + (i || 0)]).focus();
        return true;
    }
});

var Radio = React.createClass({
    displayName: 'Radio',

    getDefaultProps: function getDefaultProps() {
        return {
            choices: [{}],
            displayCount: null,
            multipleSelect: false
        };
    },

    getInitialState: function getInitialState() {
        return {
            showClues: false
        };
    },

    render: function render() {
        var choices = this.props.choices;
        var values = this.props.values || _.map(choices, function () {
            return false;
        });
        var revealNoneOfTheAbove = this._shouldRevealNoneOfTheAbove(choices, values);
        choices = _.map(choices, function (choice, i) {
            var content;
            if (choice.isNoneOfTheAbove && !revealNoneOfTheAbove) {
                content = { content: "None of the above" };
            } else {
                content = _.pick(choice, "content");
            }
            return {
                // We need to make a copy, which _.pick does
                content: React.createElement(Renderer, content),
                checked: values[i],
                clue: React.createElement(Renderer, { content: choice.clue })
            };
        });
        choices = this.enforceOrdering(choices);

        return React.createElement(BaseRadio, {
            ref: 'baseRadio',
            labelWrap: true,
            onePerLine: this.props.onePerLine,
            multipleSelect: this.props.multipleSelect,
            showClues: this.state.showClues,
            choices: choices.map(function (choice) {
                return _.pick(choice, "content", "checked", "clue");
            }),
            onCheckedChange: this.onCheckedChange });
    },

    _shouldRevealNoneOfTheAbove: function _shouldRevealNoneOfTheAbove(choices, values) {
        // We reveal when 'None of the above' is the correct choice
        // and the entire question is completed. If 'None of the above' isn't
        // selected and the question is completed, then it's the wrong choice
        // and not worth revealing.
        var noneOfTheAboveSelected = _.any(choices, function (choice, i) {
            return choice.isNoneOfTheAbove && values[i];
        });
        return this.props.questionCompleted && this.props.noneOfTheAbove && noneOfTheAboveSelected;
    },

    focus: function focus(i) {
        return this.refs.baseRadio.focus(i);
    },

    onCheckedChange: function onCheckedChange(checked) {
        this.setState({ showClues: false });
        this.props.onChange({
            values: checked
        });
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        if (answerData === undefined) {
            renderedAnswerData = { values: undefined };
        } else {
            var renderedAnswerData = { 'values': [] };
            for (var i = 0; i < this.props.choices.length; i++) {
                renderedAnswerData['values'].push(answerData['values'][this.props.choices[i].originalIndex]);
            }
        }
        this.props.onChange(renderedAnswerData);
    },

    toJSON: function toJSON(skipValidation) {
        // Return checked inputs in the form {values: [bool]}. (Dear future
        // timeline implementers: this used to be {value: i} before multiple
        // select was added)
        if (this.props.values) {
            var noneOfTheAboveIndex = null;
            var noneOfTheAboveSelected = false;

            var values = this.props.values.slice();

            for (var i = 0; i < this.props.values.length; i++) {
                var index = this.props.choices[i].originalIndex;
                values[index] = this.props.values[i];

                if (this.props.choices[i].isNoneOfTheAbove) {
                    noneOfTheAboveIndex = index;

                    if (values[i]) {
                        noneOfTheAboveSelected = true;
                    }
                }
            }

            return {
                values: values
            };
        } else {
            // Nothing checked
            return {
                values: _.map(this.props.choices, function () {
                    return false;
                })
            };
        }
    },

    simpleValidate: function simpleValidate(rubric) {
        this.setState({ showClues: true });
        return Radio.validate(this.toJSON(), rubric);
    },

    enforceOrdering: function enforceOrdering(choices) {
        var content = _.pluck(choices, "content");
        if (_.isEqual(content, [$._("False"), $._("True")]) || _.isEqual(content, [$._("No"), $._("Yes")])) {
            return [choices[1]].concat([choices[0]]);
        }
        return choices;
    },

    statics: {
        displayMode: "inline-block"
    }
});

_.extend(Radio, {
    validate: function validate(state, rubric) {
        var numSelected = _.reduce(state.values, function (sum, selected) {
            return sum + (selected ? 1 : 0);
        }, 0);

        if (numSelected === 0) {
            return {
                type: "invalid",
                message: null
            };
            // If NOTA and some other answer are checked, ...
        } else if (state.noneOfTheAboveSelected && numSelected > 1) {
            return {
                type: "invalid",
                message: $._("'None of the above' may not be selected " + "when other answers are selected.")
            };
        } else {
            /* jshint -W018 */
            var correct = _.all(state.values, function (selected, i) {
                var isCorrect;
                if (state.noneOfTheAboveIndex === i) {
                    isCorrect = _.all(rubric.choices, function (choice, j) {
                        return i === j || !choice.correct;
                    });
                } else {
                    isCorrect = !!rubric.choices[i].correct;
                }
                return isCorrect === selected;
            });
            /* jshint +W018 */

            return {
                type: "points",
                earned: correct ? 1 : 0,
                total: 1,
                message: rubric.choices[_.indexOf(state.values, true)].clue
            };
        }
    }
});

var RadioEditor = React.createClass({
    displayName: 'RadioEditor',

    mixins: [Changeable],

    propTypes: {
        choices: React.PropTypes.arrayOf(React.PropTypes.shape({
            content: React.PropTypes.string,
            clue: React.PropTypes.string,
            correct: React.PropTypes.bool
        })),
        displayCount: React.PropTypes.number,
        randomize: React.PropTypes.bool,
        noneOfTheAbove: React.PropTypes.bool,
        multipleSelect: React.PropTypes.bool,
        onePerLine: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            choices: [{}, {}],
            displayCount: null,
            randomize: false,
            noneOfTheAbove: false,
            multipleSelect: false,
            onePerLine: true
        };
    },

    render: function render() {
        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                { className: 'perseus-widget-row' },
                React.createElement(
                    'div',
                    { className: 'perseus-widget-left-col' },
                    React.createElement(PropCheckBox, { label: '\u591A\u9078\u984C',
                        labelAlignment: 'right',
                        multipleSelect: this.props.multipleSelect,
                        onChange: this.onMultipleSelectChange })
                )
            ),
            React.createElement(BaseRadio, {
                ref: 'baseRadio',
                multipleSelect: this.props.multipleSelect,
                onePerLine: true,
                labelWrap: false,
                choices: this.props.choices.map(function (choice, i) {
                    var _this2 = this;

                    var checkedClass = choice.correct ? "correct" : "incorrect";
                    var editor = React.createElement(Editor, {
                        ref: "editor" + i,
                        content: choice.content || "",
                        widgetEnabled: false,
                        placeholder: "請輸入選項內容",
                        onChange: function onChange(newProps) {
                            if ("content" in newProps) {
                                _this2.onContentChange(i, newProps.content);
                            }
                        }
                    });
                    var clueEditor = React.createElement(Editor, {
                        ref: "clue-editor-" + i,
                        content: choice.clue || "",
                        widgetEnabled: false,
                        placeholder: $._("為什麼這個選項 " + checkedClass + "?"),
                        onChange: function onChange(newProps) {
                            if ("content" in newProps) {
                                _this2.onClueChange(i, newProps.content);
                            }
                        }
                    });
                    var deleteLink = React.createElement(
                        'a',
                        { href: '#',
                            className: 'simple-button orange delete-choice',
                            title: 'Remove this choice',
                            onClick: this.onDelete.bind(this, i) },
                        React.createElement('span', { className: 'icon-trash' })
                    );
                    return {
                        content: React.createElement(
                            'div',
                            { className: 'choice-clue-editors' },
                            React.createElement(
                                'div',
                                { className: "choice-editor " + checkedClass },
                                editor
                            ),
                            (!window.KA || window.KA.allowEditingClues) && React.createElement(
                                'div',
                                { className: 'clue-editor' },
                                clueEditor
                            ),
                            this.props.choices.length >= 2 && deleteLink
                        ),
                        checked: choice.correct
                    };
                }, this),
                onCheckedChange: this.onCheckedChange }),
            React.createElement(
                'div',
                { className: 'add-choice-container' },
                React.createElement(
                    'a',
                    { href: '#', className: 'simple-button orange',
                        onClick: this.addChoice },
                    React.createElement('span', { className: 'icon-plus' }),
                    ' ',
                    '\u589E\u52A0\u9078\u9805',
                    ' '
                )
            )
        );
    },

    onMultipleSelectChange: function onMultipleSelectChange(allowMultiple) {
        allowMultiple = allowMultiple.multipleSelect;

        var numSelected = _.reduce(this.props.choices, function (memo, choice) {
            return choice.correct ? memo + 1 : memo;
        }, 0);

        if (!allowMultiple && numSelected > 1) {
            var choices = _.map(this.props.choices, function (choice) {
                return _.defaults({
                    correct: false
                }, choice);
            });
            this.props.onChange({
                multipleSelect: allowMultiple,
                choices: choices
            });
        } else {
            this.props.onChange({
                multipleSelect: allowMultiple
            });
        }
    },

    onCheckedChange: function onCheckedChange(checked) {
        var choices = _.map(this.props.choices, function (choice, i) {
            return _.extend({}, choice, { correct: checked[i] });
        });
        this.props.onChange({ choices: choices });
    },

    onContentChange: function onContentChange(choiceIndex, newContent) {
        var choices = this.props.choices.slice();
        choices[choiceIndex] = _.extend({}, choices[choiceIndex], {
            content: newContent
        });
        this.props.onChange({ choices: choices });
    },

    onClueChange: function onClueChange(choiceIndex, newClue) {
        var choices = this.props.choices.slice();
        choices[choiceIndex] = _.extend({}, choices[choiceIndex], {
            clue: newClue
        });
        if (newClue === "") {
            delete choices[choiceIndex].clue;
        }
        this.props.onChange({ choices: choices });
    },

    onDelete: function onDelete(choiceIndex, e) {
        e.preventDefault();
        var choices = this.props.choices.slice();
        choices.splice(choiceIndex, 1);
        this.props.onChange({ choices: choices });
    },

    addChoice: function addChoice(e) {
        var _this3 = this;

        e.preventDefault();

        var choices = this.props.choices;
        this.props.onChange({ choices: choices.concat([{}]) }, function () {
            _this3.refs["editor" + choices.length].focus();
        });
    },

    setDisplayCount: function setDisplayCount(num) {
        this.props.onChange({ displayCount: num });
    },

    focus: function focus() {
        this.refs.editor0.focus();
        return true;
    },

    toJSON: function toJSON(skipValidation) {
        if (!skipValidation && !_.some(_.pluck(this.props.choices, "correct"))) {
            alert("Warning: No choice is marked as correct.");
        }

        return _.pick(this.props, "choices", "randomize", "multipleSelect", "displayCount", "noneOfTheAbove", "onePerLine");
    }
});

var choiceTransform = function choiceTransform(editorProps) {

    var randomize = function randomize(array) {
        if (editorProps.randomize) {
            return shuffle(array, editorProps.problemNum);
        } else {
            return array;
        }
    };

    var addNoneOfAbove = function addNoneOfAbove(array) {
        // Pick a random choice to replace with 'None of the above'
        if (!editorProps.randomize && editorProps.noneOfTheAbove) {
            // Seed RNG with problemNum
            var rand = seededRNG(editorProps.problemNum)();
            var randomIndex = Math.floor(rand * array.length);
            var itemToBeReplaced = array[randomIndex];

            // Shift array left so that 'None of the above' is last
            array.splice(randomIndex, 1);
            array.push(itemToBeReplaced);
        }

        array[array.length - 1].isNoneOfTheAbove = editorProps.noneOfTheAbove;
        return array;
    };

    // Add meta-information to choices
    var choices = editorProps.choices.slice();
    choices = _.map(choices, function (choice, i) {
        return _.extend({}, _.omit(choice, "correct"), { originalIndex: i, isNoneOfTheAbove: false });
    });

    // Randomize and add 'None of the above'
    choices = addNoneOfAbove(randomize(choices));

    editorProps = _.extend({}, editorProps, { choices: choices });
    return _.pick(editorProps, "choices", "noneOfTheAbove", "onePerLine", "multipleSelect", "correctAnswer");
};

module.exports = {
    name: "radio",
    displayName: "Radio/選擇題",
    widget: Radio,
    editor: RadioEditor,
    transform: choiceTransform
};

},{"../components/prop-check-box.jsx":262,"../editor.jsx":275,"../mixins/changeable.jsx":291,"../perseus-api.jsx":294,"../renderer.jsx":298,"../util.js":303,"classnames":12,"react":246,"react-components/js/button-group.jsx":66,"react-components/js/info-tip.jsx":68,"react-dom":95}],332:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* TODO(csilvers): fix these lint errors (http://eslint.org/docs/rules): */
/* eslint-disable brace-style, no-var */
/* To fix, remove an entry above, run ka-lint, and fix errors. */

var React = require("react");

var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");

var NumberInput = require("../components/number-input.jsx");
var TextInput = require("../components/text-input.jsx");

var ReactionDiagramWidgetEditor = React.createClass({
    displayName: "ReactionDiagramWidgetEditor",

    propTypes: _extends({}, Changeable.propTypes, {
        rotationAngle: React.PropTypes.arrayOf(React.PropTypes.number),
        separators: React.PropTypes.arrayOf(React.PropTypes.object),
        smiles: React.PropTypes.arrayOf(React.PropTypes.string)
    }),

    getDefaultProps: function getDefaultProps() {
        return {
            smiles: ["", ""],
            rotationAngle: [0, 0],
            separators: [{ type: "right", topText: "", bottomText: "" }]
        };
    },

    change: function change() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return Changeable.change.apply(this, args);
    },


    updateMolecule: function updateMolecule(idx) {
        return function (newValue) {
            var newSmiles = [].concat(_toConsumableArray(this.props.smiles));
            newSmiles[idx] = newValue;
            this.change({ smiles: newSmiles });
        }.bind(this);
    },

    updateRotation: function updateRotation(idx) {
        return function (newValue) {
            var newRot = [].concat(_toConsumableArray(this.props.rotationAngle));
            newRot[idx] = newValue;
            this.change({ rotationAngle: newRot });
        }.bind(this);
    },

    updateSeparators: function updateSeparators(idx, propName) {
        var _this = this;

        return function (newValue) {
            var newSep = _this.props.separators.map(function (sep) {
                return _extends({}, sep);
            });
            newSep[idx][propName] = newValue;
            _this.change({ separators: newSep });
        };
    },

    toJSON: function toJSON() {
        return JsonifyProps.toJSON.call(this);
    },


    render: function render() {
        // TODO(colin): use styling instead of &nbsp hacks.
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "LHS SMILES:\xA0",
                    React.createElement(TextInput, {
                        onChange: this.updateMolecule(0),
                        value: this.props.smiles[0]
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "LHS Rotation (deg):\xA0",
                    React.createElement(NumberInput, {
                        onChange: this.updateRotation(0),
                        value: this.props.rotationAngle[0]
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "RHS SMILES:\xA0",
                    React.createElement(TextInput, {
                        onChange: this.updateMolecule(1),
                        value: this.props.smiles[1]
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "RHS Rotation (deg):\xA0",
                    React.createElement(NumberInput, {
                        onChange: this.updateRotation(1),
                        value: this.props.rotationAngle[1]
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "Top of arrow text:\xA0",
                    React.createElement(TextInput, {
                        onChange: this.updateSeparators(0, "topText"),
                        value: this.props.separators[0].topText
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "Bottom of arrow text:\xA0",
                    React.createElement(TextInput, {
                        onChange: this.updateSeparators(0, "bottomText"),
                        value: this.props.separators[0].bottomText
                    })
                )
            )
        );
    }
});

module.exports = ReactionDiagramWidgetEditor;

},{"../components/number-input.jsx":261,"../components/text-input.jsx":266,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246}],333:[function(require,module,exports){
"use strict";

var React = require("react");

var Molecule = require("./molecule.jsx").molecule;

var Separator = React.createClass({
    displayName: "Separator",

    propTypes: {
        // TODO(colin): figure out and add shape.
        data: React.PropTypes.any,
        index: React.PropTypes.number
    },

    componentDidMount: function componentDidMount() {
        this.drawArrow();
    },

    componentDidUpdate: function componentDidUpdate() {
        this.drawArrow();
    },

    arrowLength: 100,

    drawArrow: function drawArrow() {
        var canvas = this.refs["arrowCanvas" + this.props.index];
        var ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        var path = new Path2D();
        ctx.strokeStyle = "rgb(0,0,0)";
        ctx.lineWidth = 1.2;
        ctx.lineCap = "round";
        var offset = 5;
        path.moveTo(offset, canvas.height / 2);
        path.lineTo(canvas.width - offset, canvas.height / 2);
        path.moveTo(canvas.width - 2 * offset, canvas.height / 2 - offset);
        path.lineTo(canvas.width - offset, canvas.height / 2);
        path.moveTo(canvas.width - 2 * offset, canvas.height / 2 + offset);
        path.lineTo(canvas.width - offset, canvas.height / 2);
        ctx.stroke(path);
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "arrow-container" },
            React.createElement(
                "div",
                { className: "above-text" },
                this.props.data.topText
            ),
            React.createElement(
                "canvas",
                {
                    height: "30",
                    id: "arrowCanvas" + this.props.index,
                    ref: "arrowCanvas" + this.props.index,
                    width: this.arrowLength
                },
                "Reaction arrow pointing to the right."
            ),
            React.createElement(
                "div",
                { className: "below-text" },
                this.props.data.bottomText
            )
        );
    }
});

var ReactionDiagramWidget = React.createClass({
    displayName: "ReactionDiagramWidget",

    propTypes: {
        // TODO(colin): at the moment, these must be arrays of two elements;
        // we're limited to a single reaction step.  At some point, add support
        // for more steps in the reaction.
        rotationAngle: React.PropTypes.arrayOf(React.PropTypes.number),
        separators: React.PropTypes.arrayOf(React.PropTypes.object),
        smiles: React.PropTypes.arrayOf(React.PropTypes.string),
        widgetId: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return { smiles: [], rotationAngle: [], separators: [] };
    },

    simpleValidate: function simpleValidate() {
        return { type: "points", earned: 0, total: 0, message: null };
    },

    getUserInput: function getUserInput() {
        return [];
    },

    validate: function validate(state, rubric) {
        // TODO(colin): this appears to be part of the perseus interface.
        // Figure out if there's a more appropriate value to return.
        return {
            type: "points",
            earned: 0,
            total: 0,
            message: null
        };
    },

    focus: function focus() {
        return true;
    },

    render: function render() {
        var _this = this;

        return React.createElement(
            "div",
            { className: "reaction", ref: "reaction" },
            this.props.smiles.map(function (s, i) {
                var id = _this.props.widgetId + "-" + i;
                return React.createElement(
                    "div",
                    { key: id, className: "molecule-container" },
                    React.createElement(Molecule, {
                        id: id,
                        rotationAngle: _this.props.rotationAngle[i],
                        smiles: s
                    }),
                    i === _this.props.smiles.length - 1 ? null : React.createElement(Separator, {
                        data: _this.props.separators[i],
                        index: i
                    })
                );
            })
        );
    }
});

module.exports = {
    name: "reaction-diagram",
    displayName: "Chemical reaction/化學反應式",
    hidden: false,
    widget: ReactionDiagramWidget
};

},{"./molecule.jsx":323,"react":246}],334:[function(require,module,exports){
"use strict";

var React = require('react');
var InfoTip = require("react-components/js/info-tip.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var Sortable = require("../components/sortable.jsx");
var TextListEditor = require("../components/text-list-editor.jsx");

var shuffle = require("../util.js").shuffle;

var HORIZONTAL = "horizontal",
    VERTICAL = "vertical";

var Sorter = React.createClass({
    displayName: "Sorter",

    propTypes: {
        correct: React.PropTypes.array,
        layout: React.PropTypes.oneOf([HORIZONTAL, VERTICAL]),
        padding: React.PropTypes.bool,
        problemNum: React.PropTypes.number,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function getDefaultProps() {
        return {
            correct: [],
            layout: HORIZONTAL,
            padding: true,
            problemNum: 0,
            onChange: function onChange() {}
        };
    },

    render: function render() {
        var options = shuffle(this.props.correct, this.props.problemNum,
        /* ensurePermuted */true);

        return React.createElement(
            "div",
            { className: "perseus-widget-sorter ui-helper-clearfix" },
            React.createElement(Sortable, {
                options: options,
                layout: this.props.layout,
                padding: this.props.padding,
                onChange: this.props.onChange,
                ref: "sortable" })
        );
    },

    setAnswerFromJSON: function setAnswerFromJSON(answerData) {
        sortable = this.refs.sortable;
        if (answerData === undefined) {
            sortable.setState({
                items: sortable.clearItemMeasurements(sortable.state.items)
            });
        } else {
            items = sortable.state.items;
            result = [];

            answerData.options.forEach(function (key) {
                var found = false;
                items = items.filter(function (item) {
                    if (!found && item['option'] == key) {
                        result.push(item);
                        found = true;
                        return false;
                    } else return true;
                });
            });
            sortable.setState({ items: result });
        }
        // HACK: We need to know *that* the widget changed, but currently it's
        // not set up in a nice way to tell us *how* it changed, since the
        // permutation of the items is stored in state.
        this.props.onChange({});
    },

    toJSON: function toJSON(skipValidation) {
        return { options: this.refs.sortable.getOptions() };
    },

    simpleValidate: function simpleValidate(rubric) {
        return Sorter.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Sorter, {
    validate: function validate(state, rubric) {
        var correct = _.isEqual(state.options, rubric.correct);

        return {
            type: "points",
            earned: correct ? 1 : 0,
            total: 1,
            message: null
        };
    }
});

var SorterEditor = React.createClass({
    displayName: "SorterEditor",

    propTypes: {
        correct: React.PropTypes.array,
        layout: React.PropTypes.oneOf([HORIZONTAL, VERTICAL]),
        padding: React.PropTypes.bool
    },

    getDefaultProps: function getDefaultProps() {
        return {
            correct: ["$x$", "$y$", "$z$"],
            layout: HORIZONTAL,
            padding: true
        };
    },

    render: function render() {
        var editor = this;

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                ' ',
                "\u6B63\u78BA\u7B54\u6848:",
                ' ',
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u5728\u9019\u908A\u8F38\u5165\u6B63\u78BA\u7684\u6392\u5E8F\uFF0C\u53F3\u908A\u7684\u9810\u89BD\u756B\u9762\u6703\u662F\u96A8\u6A5F\u7684\u6392\u5E8F\uFF0C\u4E5F\u5C31\u662F\u5B78\u751F\u6703\u770B\u5230\u7684\u756B\u9762\u3002"
                    )
                )
            ),
            React.createElement(TextListEditor, {
                options: this.props.correct,
                onChange: function onChange(options, cb) {
                    editor.props.onChange({ correct: options }, cb);
                },
                layout: this.props.layout }),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    ' ',
                    "\u986F\u793A\u65B9\u5F0F:",
                    ' ',
                    React.createElement(
                        "select",
                        { value: this.props.layout,
                            onChange: this.onLayoutChange },
                        React.createElement(
                            "option",
                            { value: HORIZONTAL },
                            "\u6C34\u5E73\u65B9\u5F0F"
                        ),
                        React.createElement(
                            "option",
                            { value: VERTICAL },
                            "\u5782\u76F4\u65B9\u5F0F"
                        )
                    )
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7576\u5361\u7247\u4E2D\u7684\u6587\u5B57\u8F03\u77ED\u6216\u662F\u5716\u5F62\u8F03\u5C0F\u6642\uFF0C\u5EFA\u8B70\u53EF\u9078\u7528\u6C34\u5E73\u65B9\u5F0F\u986F\u793A\uFF0C\u5782\u76F4 \u65B9\u5F0F\u8F03\u9069\u7528\u65BC\u8F03\u9577\u7684\u6587\u5B57\u6558\u8FF0 (\u5982\uFF1A\u8B49\u660E) \u6216\u8F03\u5927\u7684\u5716\u5F62\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    label: "\u7559\u767D:",
                    padding: this.props.padding,
                    onChange: this.props.onChange }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u7559\u767D\u9069\u5408\u7528\u5728\u6587\u5B57\uFF0C\u82E5\u70BA\u5716\u7247\u5247\u4E0D\u9700\u8981\u3002"
                    )
                )
            )
        );
    },

    onLayoutChange: function onLayoutChange(e) {
        this.props.onChange({ layout: e.target.value });
    },

    toJSON: function toJSON(skipValidation) {
        return _.pick(this.props, "correct", "layout", "padding");
    }
});

module.exports = {
    name: "sorter",
    displayName: "Sorter/排序",
    widget: Sorter,
    editor: SorterEditor,
    hidden: false
};

},{"../components/prop-check-box.jsx":262,"../components/sortable.jsx":264,"../components/text-list-editor.jsx":267,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68}],335:[function(require,module,exports){
"use strict";

var React = require('react');
var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");
var classNames = require('classnames');

var textInputStyle = {
    fontSize: "25px",
    marginRight: "5px",
    paddingTop: "15px",
    paddingBottom: "15px",
    marginTop: "15px",
    marginBottom: "15px"
};

var TextInput = React.createClass({
    displayName: "TextInput",

    render: function render() {
        return React.createElement("input", {
            type: "text",
            style: textInputStyle,
            ref: "input",
            value: this.props.value || "",
            onChange: this.changeValue,
            onPaste: this.pasteValue,
            onKeyPress: this.keypressValue
        });
    },

    pasteValue: function pasteValue(e) {
        e.preventDefault();
        return false;
    },

    keypressValue: function keypressValue(e) {
        e.preventDefault();
        return false;
    },

    changeValue: function changeValue(e) {
        // Chrome Speech API
        if (e.target.value) {
            this.props.setValue(e.target.value);
            // iOS Siri Input
        } else {
            this.props.setValue(this.refs.input.value);
        }
    },

    statics: {
        displayMode: "inline-block"
    }
});

var infoStyle = {
    background: "#3498DB !important",
    color: "#fff !important",
    textShadow: "0px 0px #fff !important",
    marginLeft: 10,
    border: '1px solid #ccc',
    borderBottom: '1px solid #bbb',
    borderRadius: '5px',
    backgroundRepeat: 'repeat-x',
    cursor: 'pointer !important',
    fontFamily: 'inherit',
    lineHeight: '22px',
    padding: '5px 10px',
    position: 'relative',
    textDecoration: 'none !important'
};

var iconButtonStyle = {
    width: "45px",
    lineHeight: 1.5
};

var buttonStyle = {};

var inlineStyle = {
    display: 'inline-block'
};

var SpeakingBtn = React.createClass({
    displayName: "SpeakingBtn",

    render: function render() {
        var btnIconCLass = classNames({
            'fa fa-2x': true,
            'fa-microphone': !this.state.recognizing,
            'fa fa-spinner fa-spin fa-fw': this.state.recognizing
        });
        return React.createElement(
            "div",
            { style: inlineStyle },
            !!this.state.recognition ? React.createElement(
                "button",
                { style: buttonStyle, onClick: this.startRecognizeOnClick, className: "simple-button orange" },
                React.createElement("i", { style: iconButtonStyle, className: btnIconCLass })
            ) : React.createElement(
                "div",
                null,
                React.createElement(
                    "button",
                    { style: buttonStyle, onClick: this.resetOnClick, className: "simple-button orange" },
                    React.createElement("i", { style: iconButtonStyle, className: "fa fa-refresh fa-2x" })
                ),
                React.createElement(
                    "span",
                    { style: infoStyle },
                    this.state.status
                )
            )
        );
    },

    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.recognizing != nextState.recognizing || this.state.status != nextState.status || this.state.recognition != nextState.recognition;
    },

    getInitialState: function getInitialState() {
        return {
            recognizing: false,
            status: "",
            recognition: null
        };
    },

    startRecognize: function startRecognize() {
        if (this.state.recognizing == false) {
            this.state.recognition.start();
        } else {
            this.state.recognition.stop();
        }
    },

    // prevent trigger checking answer when clicking button
    startRecognizeOnClick: function startRecognizeOnClick(e) {
        this.startRecognize();
        e.preventDefault();
        return false;
    },

    // ignore clicking event
    resetOnClick: function resetOnClick(e) {
        this.props.setValue('');
        e.preventDefault();
        return false;
    },
    componentWillMount: function componentWillMount() {
        var self = this;
        var os = self.getMobileOperatingSystem();
        if (self.hasSpeechRecognition()) {
            var recognition = new webkitSpeechRecognition();
            recognition.lang = 'en-US';
            recognition.continuous = false;
            recognition.interimResults = true;
            recognition.maxAlternatives = 20;
            self.setState({ recognizing: false });
            recognition.onstart = function () {
                self.setState({ recognizing: true });
                self.props.setValue('');
            };
            recognition.onend = function () {
                self.setState({ recognizing: false });
            };
            recognition.onresult = function (event) {
                var res = '';
                for (var i = event.resultIndex; i < event.results.length; i++) {
                    if (event.results[i].isFinal) {
                        for (var j = 0; j < event.results[i].length; j++) {
                            if (j != 0) {
                                res = res + '/';
                            }
                            res = res + event.results[i][j].transcript;
                            self.props.setValue(res);
                        }
                    }
                }
            };
            self.setState({ recognition: recognition });
        } else {
            if (os == 'iOS') {
                self.setState({ status: "點選上面的框框 用Siri語音輸入" });
            } else if (os == 'Android') {
                self.setState({ status: "點選上面的框框 用Google語音輸入" });
            } else {
                self.setState({ status: "請切換至Chrome瀏覽器" });
            }
        }
    },

    getMobileOperatingSystem: function getMobileOperatingSystem() {
        var userAgent = navigator.userAgent || navigator.vendor || window.opera;
        if (userAgent.match(/iPad/i) || userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) {
            return 'iOS';
        } else if (userAgent.match(/Android/i)) {
            return 'Android';
        } else {
            return userAgent;
        }
    },

    hasSpeechRecognition: function hasSpeechRecognition() {
        return 'webkitSpeechRecognition' in window;
    },

    statics: {
        displayMode: "inline-block"
    }
});

var SpeakingTextInput = React.createClass({
    displayName: "SpeakingTextInput",

    propTypes: {
        value: React.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
        return { value: "" };
    },

    getInitialState: function getInitialState() {
        return { value: this.props.value };
    },

    // compare answer when setting value to prevent generate long atempt dict
    setValue: function setValue(val) {
        val = val || '';
        var correntAns = SpeakingTextInput.parseAnswer(this.props.correct);
        var userAnsList = val.split("/");
        var correntIdx = -1;
        for (var i = 0, len = userAnsList.length; i < len; i++) {
            if (SpeakingTextInput.arrIsEqual(SpeakingTextInput.parseAnswer(userAnsList[i]), correntAns)) {
                correntIdx = i;
                break;
            }
        }
        // if the answer is wrong, set value to the first answer
        if (correntIdx == -1 || correntIdx >= this.props.correctIdxLessThen) {
            this.setState({ value: userAnsList[0] });
            this.change("value")(userAnsList[0]);
        }
        // else set value to the correct answer
        else {
                this.setState({ value: this.props.correct });
                this.change("value")(this.props.correct);
            }
    },

    mixins: [Changeable, JsonifyProps],

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(TextInput, { value: this.state.value, setValue: this.setValue }),
            React.createElement(SpeakingBtn, { setValue: this.setValue })
        );
    },

    simpleValidate: function simpleValidate(rubric) {
        return SpeakingTextInput.validate(this.toJSON(), rubric);
    },

    statics: {
        displayMode: "inline-block"
    }
});

_.extend(SpeakingTextInput, {
    parseAnswer: function parseAnswer(s) {
        var arr = s.split(" ");
        var parsedArr = [];
        for (var i = 0; i < arr.length; i++) {
            if (arr[i].length > 0) {
                parsedArr.push(arr[i].toLowerCase());
            }
        }
        return parsedArr;
    },

    arrIsEqual: function arrIsEqual(arr1, arr2) {
        if (arr1.length !== arr2.length) return false;
        for (var i = 0, len = arr1.length; i < len; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    },

    validate: function validate(state, rubric) {
        var correct = SpeakingTextInput.arrIsEqual(SpeakingTextInput.parseAnswer(rubric.correct), SpeakingTextInput.parseAnswer(state.value));
        if (state.value == '') {
            return { type: 'invalid', message: '請重新再唸一次！' };
        } else if (correct) {
            return { type: 'points', earned: 1, total: 1, message: null };
        } else {
            return { type: 'points', earned: 0, total: 1, message: null };
        }
    }
});

var SpeakingTextInputEditor = React.createClass({
    displayName: "SpeakingTextInputEditor",

    mixins: [Changeable, JsonifyProps],

    getDefaultProps: function getDefaultProps() {
        return { correct: "", correctIdxLessThen: 5 };
    },

    handleAnswerChange: function handleAnswerChange(event) {
        this.change({ correct: event.target.value });
    },

    handleCorrectIdxChange: function handleCorrectIdxChange(event) {
        this.change({
            correctIdxLessThen: parseInt(event.target.value)
        });
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u6B63\u78BA\u7B54\u6848:",
                    React.createElement("input", { value: this.props.correct, onChange: this.handleAnswerChange })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u7CBE\u6E96\u5EA6 (1-20):",
                    React.createElement("input", { value: this.props.correctIdxLessThen, onChange: this.handleCorrectIdxChange, type: "integer" })
                )
            )
        );
    }
});

module.exports = {
    name: "speaking-text-input",
    displayName: "English Speech Recognition/英文口說辨識",
    widget: SpeakingTextInput,
    editor: SpeakingTextInputEditor
};

},{"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"classnames":12,"react":246}],336:[function(require,module,exports){
"use strict";

var React = require('react');
var Changeable = require("../mixins/changeable.jsx");
var JsonifyProps = require("../mixins/jsonify-props.jsx");
var ResponsiveVoice = require('../../lib/responsivevoice.js');

var iconButtonStyle = {
    width: "45px",
    lineHeight: 1.5
};

var buttonStyle = {
    marginTop: "5px",
    marginBottom: "5px"
};

var SpeakingVoice = React.createClass({
    displayName: "SpeakingVoice",

    componentDidMount: function componentDidMount() {
        this.responsiveVoice = new ResponsiveVoice();
        this.responsiveVoice.init(); // must manually init
    },

    speak: function speak() {
        this.responsiveVoice.speak(this.props.voiceText, this.props.lang, {
            pitch: parseFloat(this.props.pitch),
            rate: parseFloat(this.props.rate),
            volume: this.props.volume
        });
    },

    // prevent trigger checking answer when clicking button
    speakOnClick: function speakOnClick(e) {
        this.speak();
        e.preventDefault();
        return false;
    },

    mixins: [Changeable, JsonifyProps],

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "button",
                { style: buttonStyle, className: "simple-button green", onClick: this.speakOnClick },
                React.createElement("i", { style: iconButtonStyle, className: "fa fa-volume-up fa-2x" })
            )
        );
    },

    simpleValidate: function simpleValidate(rubric) {
        return { type: "points", earned: 1, total: 1, message: null };
    },

    statics: {
        displayMode: "inline-block"
    }
});

var SpeakingVoiceEditor = React.createClass({
    displayName: "SpeakingVoiceEditor",

    mixins: [Changeable, JsonifyProps],

    getDefaultProps: function getDefaultProps() {
        return { voiceText: "", pitch: "1.0", rate: "1.0", volume: "1.0", lang: "US English Female" };
    },

    getInitialState: function getInitialState() {
        return { voiceText: this.props.voiceText, pitch: this.props.pitch, rate: this.props.rate, volume: this.props.volume, lang: this.props.lang };
    },

    pitchChange: function pitchChange(event) {
        this.change({ pitch: event.target.value });
        this.setState({ pitch: event.target.value });
    },

    voiceTextChange: function voiceTextChange(event) {
        this.change({ voiceText: event.target.value });
        this.setState({ voiceText: event.target.value });
    },

    rateChange: function rateChange(event) {
        this.change({ rate: event.target.value });
        this.setState({ rate: event.target.value });
    },

    langChange: function langChange(event) {
        this.change({ lang: event.target.value });
        this.setState({ lang: event.target.value });
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u5167\u5BB9:",
                    React.createElement("input", {
                        type: "text",
                        value: this.state.voiceText,
                        onChange: this.voiceTextChange
                    })
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u901F\u5EA6:",
                    React.createElement(
                        "select",
                        { value: this.state.rate, onChange: this.rateChange },
                        React.createElement(
                            "option",
                            { value: "0.1" },
                            "0.1"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.2" },
                            "0.2"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.3" },
                            "0.3"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.4" },
                            "0.4"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.5" },
                            "0.5"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.6" },
                            "0.6"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.7" },
                            "0.7"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.8" },
                            "0.8"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.9" },
                            "0.9"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.0" },
                            "1.0"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.1" },
                            "1.1"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.2" },
                            "1.2"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.3" },
                            "1.3"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.4" },
                            "1.4"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.5" },
                            "1.5"
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u97F3\u8ABF:",
                    React.createElement(
                        "select",
                        { value: this.state.pitch, onChange: this.pitchChange },
                        React.createElement(
                            "option",
                            { value: "0" },
                            "0"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.1" },
                            "0.1"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.2" },
                            "0.2"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.3" },
                            "0.3"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.4" },
                            "0.4"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.5" },
                            "0.5"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.6" },
                            "0.6"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.7" },
                            "0.7"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.8" },
                            "0.8"
                        ),
                        React.createElement(
                            "option",
                            { value: "0.9" },
                            "0.9"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.0" },
                            "1.0"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.1" },
                            "1.1"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.2" },
                            "1.2"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.3" },
                            "1.3"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.4" },
                            "1.4"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.5" },
                            "1.5"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.6" },
                            "1.6"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.7" },
                            "1.7"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.8" },
                            "1.8"
                        ),
                        React.createElement(
                            "option",
                            { value: "1.9" },
                            "1.9"
                        ),
                        React.createElement(
                            "option",
                            { value: "2" },
                            "2"
                        )
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                React.createElement(
                    "label",
                    null,
                    "\u8A9E\u8A00:",
                    React.createElement(
                        "select",
                        { value: this.state.lang, onChange: this.langChange },
                        React.createElement(
                            "option",
                            { value: "UK English Female" },
                            "UK English Female"
                        ),
                        React.createElement(
                            "option",
                            { value: "UK English Male" },
                            "UK English Male"
                        ),
                        React.createElement(
                            "option",
                            { value: "US English Female" },
                            "US English Female"
                        )
                    )
                )
            )
        );
    }
});

module.exports = {
    name: "speaking-voice",
    displayName: "English Text to Speech/英文發音工具",
    widget: SpeakingVoice,
    hidden: false,
    editor: SpeakingVoiceEditor
};

},{"../../lib/responsivevoice.js":2,"../mixins/changeable.jsx":291,"../mixins/jsonify-props.jsx":292,"react":246}],337:[function(require,module,exports){
'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var Editor = require("../editor.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var Renderer = require("../renderer.jsx");
var Util = require("../util.js");

var Table = React.createClass({
    displayName: 'Table',

    render: function render() {
        var _this = this;

        var headers = this.props.headers;
        return React.createElement(
            'table',
            { className: 'perseus-widget-table-of-values non-markdown' },
            React.createElement(
                'thead',
                null,
                React.createElement(
                    'tr',
                    null,
                    _.map(headers, function (header, i) {
                        return React.createElement(
                            'th',
                            { key: i },
                            React.createElement(Renderer, { content: header })
                        );
                    })
                )
            ),
            React.createElement(
                'tbody',
                null,
                _(this.props.rows).times(function (r) {
                    return React.createElement(
                        'tr',
                        { key: r },
                        _(_this.props.columns).times(function (c) {
                            return React.createElement(
                                'td',
                                { key: c },
                                React.createElement('input', {
                                    ref: "answer" + r + "," + c,
                                    type: 'text',
                                    onChange: _this.handleChange
                                })
                            );
                        })
                    );
                })
            )
        );
    },

    toJSON: function toJSON() {
        var self = this;
        return _.map(self.props.answers, function (answer, r) {
            return _.map(self.props.headers, function (header, c) {
                return ReactDOM.findDOMNode(self.refs["answer" + r + "," + c]).value;
            });
        });
    },

    handleChange: function handleChange() {
        // HACK: We need to know *that* the widget changed, but currently it's
        // not set up in a nice way to tell us *how* it changed
        this.props.onChange({});
    },

    simpleValidate: function simpleValidate(rubric) {
        return Table.validate(this.toJSON(), rubric);
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs["answer0,0"]).focus();
        return true;
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Table, {
    validate: function validate(state, rubric) {
        var filterNonEmpty = function filterNonEmpty(table) {
            return _.filter(table, function (row) {

                // Check if row has a cell that is nonempty
                return _.some(row, _.identity);
            });
        };
        var solution = filterNonEmpty(rubric.answers);
        var supplied = filterNonEmpty(state);
        var hasEmptyCell = _.some(supplied, function (row) {
            return _.some(row, function (cell) {
                return cell === "";
            });
        });
        if (hasEmptyCell || !supplied.length) {
            return {
                type: "invalid",
                message: null
            };
        }
        if (supplied.length !== solution.length) {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }
        var createValidator = Khan.answerTypes.number.createValidatorFunctional;
        var message = null;
        var allCorrect = _.every(solution, function (rowSolution) {
            var i;
            for (i = 0; i < supplied.length; i++) {
                var rowSupplied = supplied[i];
                var correct = _.every(rowSupplied, function (cellSupplied, i) {
                    var cellSolution = rowSolution[i];
                    var validator = createValidator(cellSolution, {
                        simplify: true
                    });
                    var result = validator(cellSupplied);
                    if (result.message) {
                        message = result.message;
                    }
                    return result.correct;
                });
                if (correct) {
                    supplied.splice(i, 1);
                    return true;
                }
            }
            return false;
        });
        return {
            type: "points",
            earned: allCorrect ? 1 : 0,
            total: 1,
            message: message
        };
    }
});

var TableEditor = React.createClass({
    displayName: 'TableEditor',

    getDefaultProps: function getDefaultProps() {
        var defaultRows = 4;
        var defaultColumns = 1;
        var blankAnswers = _(defaultRows).times(function () {
            return Util.stringArrayOfSize(defaultColumns);
        });
        return {
            headers: [""],
            rows: defaultRows,
            columns: defaultColumns,
            numRawRows: defaultRows,
            numRawColumns: defaultColumns,
            answers: blankAnswers,
            type: "set"
        };
    },

    focus: function focus() {
        ReactDOM.findDOMNode(this.refs.numberOfColumns).focus();
    },

    render: function render() {
        var self = this;
        var rows = this.props.rows;
        var cols = this.props.columns;
        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                null,
                React.createElement(
                    'label',
                    null,
                    ' ',
                    '\u6B04\u6578:',
                    ' ',
                    React.createElement('input', {
                        ref: 'numberOfColumns',
                        type: 'text',
                        value: this.props.numRawColumns,
                        onChange: this.onSizeInput
                    })
                )
            ),
            React.createElement(
                'div',
                null,
                React.createElement(
                    'label',
                    null,
                    ' ',
                    '\u5217\u6578:',
                    ' ',
                    React.createElement('input', {
                        ref: 'numberOfRows',
                        type: 'text',
                        value: this.props.numRawRows,
                        onChange: this.onSizeInput
                    })
                )
            ),
            React.createElement(
                'div',
                null,
                ' ',
                '\u7B54\u6848\u8868\u683C:',
                ' ',
                React.createElement(
                    'ul',
                    null,
                    React.createElement(
                        'li',
                        null,
                        React.createElement(
                            'label',
                            null,
                            React.createElement('input', {
                                type: 'radio',
                                checked: 'checked',
                                readOnly: true }),
                            '\u8A2D\u5B9A\u503C'
                        ),
                        React.createElement(
                            InfoTip,
                            null,
                            React.createElement(
                                'p',
                                null,
                                '\u7576\u8868\u683C\u6B04\u6578\u5927\u65BC 1 \u7684\u6642\u5019\uFF0C\u7B54\u6848\u8868\u683C\u4E2D\u7684\u6240\u6709\u6B04\u4F4D\u90FD\u9700\u6709\u503C\uFF0C\u4E5F\u5C31 \u662F\u8AAA\uFF0C\u5B78\u751F\u5728\u4F5C\u7B54\u6642\u9700\u586B\u5B8C\u6240\u6709\u7684\u6B04\u4F4D\uFF0C\u82E5\u6709\u4E0D\u9700\u586B\u5B8C\u6240\u6709\u6B04\u4F4D\u7684 \u7B54\u6848\u9700\u6C42\u6642\uFF0C\u8ACB\u518D\u53E6\u884C\u589E\u52A0\u6B04\u6578\u70BA 1 \u7684\u8868\u683C\u9032\u884C\u4F7F\u7528\u3002'
                            )
                        )
                    )
                )
            ),
            React.createElement(
                'div',
                null,
                React.createElement(
                    'table',
                    { className: 'perseus-widget-table-of-values non-markdown' },
                    React.createElement(
                        'thead',
                        null,
                        React.createElement(
                            'tr',
                            null,
                            _(cols).times(function (i) {
                                return React.createElement(
                                    'th',
                                    { key: i },
                                    React.createElement(Editor, {
                                        ref: "columnHeader" + i,
                                        content: self.props.headers[i],
                                        widgetEnabled: false,
                                        onChange: self.onHeaderChange.bind(self, i)
                                    })
                                );
                            })
                        )
                    ),
                    React.createElement(
                        'tbody',
                        null,
                        _(rows).times(function (r) {
                            return React.createElement(
                                'tr',
                                { key: r },
                                _(cols).times(function (c) {
                                    return React.createElement(
                                        'td',
                                        { key: c },
                                        React.createElement('input', {
                                            ref: "answer" + r + "," + c,
                                            type: 'text',
                                            onChange: self.onAnswerInput,
                                            value: self.props.answers[r][c]
                                        })
                                    );
                                })
                            );
                        })
                    )
                )
            )
        );
    },

    onHeaderChange: function onHeaderChange(index, newProps) {
        if (_.has(newProps, "content")) {
            var headers = this.props.headers.slice();
            headers[index] = newProps.content;
            this.props.onChange({ headers: headers });
        }
    },

    onSizeInput: function onSizeInput() {
        var numRawRows = ReactDOM.findDOMNode(this.refs.numberOfRows).value;
        var numRawCols = ReactDOM.findDOMNode(this.refs.numberOfColumns).value;
        var rows = +numRawRows || 0;
        var cols = +numRawCols || 0;
        rows = Math.min(Math.max(1, rows), 30);
        cols = Math.min(Math.max(1, cols), 6);
        var oldColumns = this.props.columns;
        var oldRows = this.props.rows;

        var answers = this.props.answers;
        if (oldRows < rows) {
            _(rows - oldRows).times(function () {
                answers.push(Util.stringArrayOfSize(oldColumns));
            });
        }

        var headers = this.props.headers;

        function fixColumnSizing(array) {
            _(cols - oldColumns).times(function () {
                array.push("");
            });
        }

        if (oldColumns < cols) {
            fixColumnSizing(headers);
            _.each(answers, fixColumnSizing);
        }

        this.props.onChange({
            rows: rows,
            columns: cols,
            numRawRows: numRawRows,
            numRawColumns: numRawCols,
            answers: answers,
            headers: headers
        });
    },

    onAnswerInput: function onAnswerInput() {
        var self = this;
        var answers = _(self.props.rows).times(function (r) {
            return _(self.props.columns).times(function (c) {
                return ReactDOM.findDOMNode(self.refs["answer" + r + "," + c]).value;
            });
        });
        this.props.onChange({ answers: answers });
    },

    toJSON: function toJSON() {
        var self = this;
        var answers = this.props.answers.slice(0, this.props.rows);
        answers = _.map(answers, function (row) {
            return row.slice(0, self.props.columns);
        });
        var json = _.pick(this.props, 'rows', 'columns');
        json.answers = answers;
        json.headers = this.props.headers.slice(0, this.props.columns);
        return json;
    }
});

module.exports = {
    name: "table",
    displayName: "Table of values/表格",
    widget: Table,
    editor: TableEditor,
    hidden: false
};

},{"../editor.jsx":275,"../renderer.jsx":298,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68,"react-dom":95}],338:[function(require,module,exports){
"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var Graph = require("../components/graph.jsx");
var GraphSettings = require("../components/graph-settings.jsx");
var InfoTip = require("react-components/js/info-tip.jsx");
var NumberInput = require("../components/number-input.jsx");
var PropCheckBox = require("../components/prop-check-box.jsx");
var TeX = require("../tex.jsx");

var ROTATE_SNAP_DEGREES = 15;
var DEGREE_SIGN = "\xB0";
var RENDER_TRANSFORM_DELAY_IN_MS = 300;
var ROTATE_HANDLE_DIST = 1.5;
var REFLECT_ROTATE_HANDLE_DIST = 2;
var REFLECT_BUTTON_SIZE = 1;

var deepEq = require("../util.js").deepEq;
var getGridStep = require("../util.js").getGridStep;
var captureScratchpadTouchStart = require("../util.js").captureScratchpadTouchStart;
var knumber = KhanUtil.knumber;
var kvector = KhanUtil.kvector;
var kpoint = KhanUtil.kpoint;
var kray = KhanUtil.kray;
var kline = KhanUtil.kline;

var defaultBoxSize = 400;
var defaultBackgroundImage = {
    url: null,
    scale: 1,
    bottom: 0,
    left: 0
};

function arraySum(array) {
    return _.reduce(array, function (memo, arg) {
        return memo + arg;
    }, 0);
}

/* Does a pluck on keys inside objects in an object
 *
 * Ex:
 * tools = {
 *     translation: {
 *         enabled: true
 *     },
 *     rotation: {
 *         enabled: false
 *     }
 * };
 * pluckObject(tools, "enabled") returns {
 *     translation: true
 *     rotation: false
 * }
 */
function pluckObject(object, subKey) {
    return _.object(_.map(object, function (value, key) {
        return [key, value[subKey]];
    }));
}

var defaultGraphProps = function defaultGraphProps(setProps, boxSize) {
    setProps = setProps || {};
    var labels = setProps.labels || ["x", "y"];
    var range = setProps.range || [[-10, 10], [-10, 10]];
    var step = setProps.step || [1, 1];
    var gridStep = setProps.gridStep || getGridStep(range, step, boxSize);
    return {
        box: [boxSize, boxSize],
        labels: labels,
        range: range,
        step: step,
        gridStep: gridStep,
        valid: true,
        backgroundImage: defaultBackgroundImage,
        markings: "grid",
        showProtractor: false
    };
};

var defaultTransformerProps = {
    gradeEmpty: false,
    graphMode: "interactive",
    listMode: "dynamic",
    tools: {
        translation: {
            enabled: true,
            required: false,
            constraints: {}
        },
        rotation: {
            enabled: true,
            required: false,
            constraints: {
                fixed: false
            },
            coord: [1, 6]
        },
        reflection: {
            enabled: true,
            required: false,
            constraints: {
                fixed: false
            },
            coords: [[2, -4], [2, 2]]
        },
        dilation: {
            enabled: true,
            required: false,
            constraints: {
                fixed: false
            },
            coord: [6, 6]
        }
    },
    drawSolutionShape: true,
    starting: {
        shape: {
            type: "polygon-3",
            coords: [[2, 2], [2, 6], [7, 2]]
        },
        transformations: []
    },
    correct: {
        shape: {
            type: "polygon-3",
            coords: [[2, 2], [2, 6], [7, 2]]
        },
        transformations: []
    }
};

function colorForTool(tool) {
    return tool.constraints.fixed ? KhanUtil.DYNAMIC : KhanUtil.INTERACTIVE;
}

/* Scales a distance from the default range of
 * [-10, 10] to a given props.range pair
 *
 * Used for sizing various transformation tools
 * (rotation handle, dilation circle)
 */
function scaleToRange(dist, range) {
    var spreadX = range[0][1] - range[0][0];
    var spreadY = range[1][1] - range[1][0];

    return dist * Math.max(spreadX, spreadY) / 20;
}

function dilatePointFromCenter(point, dilationCenter, scale) {
    var pv = KhanUtil.kvector.subtract(point, dilationCenter);
    var pvScaled = KhanUtil.kvector.scale(pv, scale);
    var transformedPoint = KhanUtil.kvector.add(dilationCenter, pvScaled);
    return transformedPoint;
}

// TODO(jack): i18nize this
function stringFromDecimal(number) {
    return String(KhanUtil.roundTo(9, number));
}

function stringFromFraction(number) {
    var frac = KhanUtil.toFraction(number, knumber.DEFAULT_TOLERANCE);
    if (frac[1] === 1) {
        return stringFromDecimal(number);
    } else {
        return stringFromDecimal(frac[0]) + "/" + stringFromDecimal(frac[1]);
    }
}

function texFromPoint(point) {
    return [React.createElement(
        TeX,
        null,
        "("
    ), stringFromDecimal(point[0]), React.createElement(
        TeX,
        null,
        ", {}"
    ), stringFromDecimal(point[1]), React.createElement(
        TeX,
        null,
        ")"
    )];
}

function texFromVector(vector) {
    return [React.createElement(
        TeX,
        null,
        "\\langle"
    ), stringFromDecimal(vector[0]), React.createElement(
        TeX,
        null,
        ", {}"
    ), stringFromDecimal(vector[1]), React.createElement(
        TeX,
        null,
        "\\rangle"
    )];
}

function texFromAngleDeg(angleDeg) {
    return stringFromDecimal(angleDeg) + DEGREE_SIGN;
}

function orderInsensitiveCoordsEqual(coords1, coords2) {
    coords1 = _.clone(coords1).sort(kpoint.compare);
    coords2 = _.clone(coords2).sort(kpoint.compare);
    return _.all(_.map(coords1, function (coord1, i) {
        var coord2 = coords2[i];
        return kpoint.equal(coord1, coord2);
    }));
}

/* Perform operations on raw transform objects */
var TransformOps = {
    apply: function apply(transform) {
        // Any transformation with empty text boxes is a no-op until
        // filled out (these show up as nulls in transform.vector/line/etc).
        // TODO (jack): Merge this just into reflections now that other
        // transforms are always valid (after merging transformation
        // collapsing, which may use isValid)
        if (!Transformations[transform.type].isValid(transform)) {
            return _.identity; // do not transform the coord
        } else {
            return Transformations[transform.type].apply(transform);
        }
    },

    append: function append(transformList, newTransform) {
        // Append newTransform to transformList, and collapse the last
        // two transforms if they are collapsable
        var results = TransformOps._appendAndCollapseLastTwo(transformList, newTransform);
        // Collapse any no-ops at the end of the transformation list
        return TransformOps._collapseFinalNoOps(results);
    },

    _collapseFinalNoOps: function _collapseFinalNoOps(transforms) {
        // Collapse no-op transformations at the end of the list
        if (transforms.length && TransformOps.isNoOp(_.last(transforms))) {
            return _.initial(transforms);
        } else {
            return transforms;
        }
    },

    _appendAndCollapseLastTwo: function _appendAndCollapseLastTwo(transformList, newTransform) {
        if (!transformList.length) {
            return [newTransform];
        } else {
            var collapsed = TransformOps.collapse(_.last(transformList), newTransform);
            return _.initial(transformList).concat(collapsed);
        }
    },

    isNoOp: function isNoOp(transform) {
        return Transformations[transform.type].isNoOp(transform);
    },

    collapse: function collapse(transform1, transform2) {
        // We can only collapse transforms that have the same type
        if (transform1.type !== transform2.type) {
            return [transform1, transform2];
        }

        // Clicking the button again removes empty transformations
        if (TransformOps.isEmpty(transform1) && TransformOps.isEmpty(transform2)) {
            return [];
        }

        // Don't collapse invalid transformations otherwise
        if (!TransformOps.isValid(transform1) || !TransformOps.isValid(transform2)) {
            return [transform1, transform2];
        }

        return TransformOps._collapseValidMonotypedTransforms(transform1, transform2);
    },

    isValid: function isValid(transform) {
        return Transformations[transform.type].isValid(transform);
    },

    isEmpty: function isEmpty(transform) {
        return Transformations[transform.type].isEmpty(transform);
    },

    _collapseValidMonotypedTransforms: function _collapseValidMonotypedTransforms(transform1, transform2) {
        var collapsed = Transformations[transform1.type].collapse(transform1, transform2);
        if (collapsed) {
            // Force all answers into an array
            if (!_.isArray(collapsed)) {
                collapsed = [collapsed];
            }
            // Add types to all transforms in the answer
            _.each(collapsed, function (transform) {
                transform.type = transform1.type;
            });
            return collapsed;
        } else {
            // These transforms can't be collapsed together
            return [transform1, transform2];
        }
    },

    toTeX: function toTeX(transform) {
        return Transformations[transform.type].toTeX(transform);
    },

    /* A react representation of this transform object */
    ListItem: React.createClass({
        displayName: "ListItem",

        render: function render() {
            if (this.props.mode === "dynamic") {
                return React.createElement(
                    "div",
                    null,
                    TransformOps.toTeX(this.props.transform)
                );
            } else if (this.props.mode === "interactive") {
                var TransformClass = Transformations[this.props.transform.type].Input;
                return React.createElement(TransformClass, _extends({
                    ref: "transform",
                    onChange: this.handleChange
                }, this.props.transform));
            } else {
                throw new Error("Invalid mode: " + this.props.mode);
            }
        },
        value: function value() {
            if (this.props.mode === "interactive") {
                return _.extend({
                    type: this.props.transform.type
                }, this.refs.transform.value());
            } else {
                return this.props.transform;
            }
        },
        handleChange: _.debounce(function () {
            this.props.onChange(this.value());
        }, RENDER_TRANSFORM_DELAY_IN_MS),
        focus: function focus() {
            this.refs.transform.focus();
        },

        statics: {
            displayMode: "block"
        }
    })
};

var Transformations = {
    translation: {
        // I18N: As in the command, "Translate the polygon"
        verbName: $._("平移"),
        nounName: $._("Translation"),
        lowerNounName: $._("translation"),
        apply: function apply(transform) {
            return function (coord) {
                return KhanUtil.kvector.add(coord, transform.vector);
            };
        },
        isValid: function isValid(transform) {
            return _.isFinite(transform.vector[0]) && _.isFinite(transform.vector[1]);
        },
        isEmpty: function isEmpty(transform) {
            return transform.vector[0] === null && transform.vector[1] === null;
        },
        isNoOp: function isNoOp(transform) {
            return kvector.equal(transform.vector, [0, 0]);
        },
        collapse: function collapse(transform1, transform2) {
            return {
                vector: kvector.add(transform1.vector, transform2.vector)
            };
        },
        toTeX: function toTeX(transform) {
            // I18N: As in the command, "Translation by <3, 1>"
            return $_({ vector: texFromVector(transform.vector) }, "平移向量 %(vector)s");
        },
        Input: React.createClass({
            displayName: "Input",

            getInitialState: function getInitialState() {
                return {
                    vector: this.props.vector || [null, null]
                };
            },
            componentDidUpdate: function componentDidUpdate(prevProps) {
                if (!deepEq(this.props, prevProps)) {
                    this.setState({ vector: this.props.vector });
                }
            },
            render: function render() {
                var _this = this;

                var vector = [React.createElement(
                    TeX,
                    null,
                    "\\langle"
                ), React.createElement(NumberInput, {
                    ref: "x",
                    placeholder: 0,
                    value: this.state.vector[0],
                    useArrowKeys: true,
                    onChange: function onChange(val0) {
                        var val1 = _this.state.vector[1];
                        _this.setState({ vector: [val0, val1] });
                        _this.props.onChange();
                    } }), React.createElement(
                    TeX,
                    null,
                    ", {}"
                ), React.createElement(NumberInput, {
                    ref: "y",
                    placeholder: 0,
                    value: this.state.vector[1],
                    useArrowKeys: true,
                    onChange: function onChange(val1) {
                        var val0 = _this.state.vector[0];
                        _this.setState({ vector: [val0, val1] });
                        _this.props.onChange();
                    } }), React.createElement(
                    TeX,
                    null,
                    "\\rangle"
                )];
                return React.createElement(
                    "div",
                    null,
                    $_({ vector: vector }, "平移向量 %(vector)s")
                );
            },
            value: function value() {
                var x = this.refs.x.getValue();
                var y = this.refs.y.getValue();
                return {
                    vector: [x, y]
                };
            },
            focus: function focus() {
                this.refs.x.focus();
            }
        })
    },

    rotation: {
        // I18N: As in the command, "Rotate the polygon"
        verbName: $._("旋轉"),
        nounName: $._("Rotation"),
        lowerNounName: $._("rotation"),
        apply: function apply(transform) {
            return function (coord) {
                return KhanUtil.kpoint.rotateDeg(coord, transform.angleDeg, transform.center);
            };
        },
        isValid: function isValid(transform) {
            return _.isFinite(transform.angleDeg) && _.isFinite(transform.center[0]) && _.isFinite(transform.center[1]);
        },
        isEmpty: function isEmpty(transform) {
            return transform.angleDeg === null && transform.center[0] === null && transform.center[1] === null;
        },
        isNoOp: function isNoOp(transform) {
            return knumber.equal(transform.angleDeg, 0);
        },
        collapse: function collapse(transform1, transform2) {
            if (!kpoint.equal(transform1.center, transform2.center)) {
                return false;
            }
            return {
                center: transform1.center,
                angleDeg: transform1.angleDeg + transform2.angleDeg
            };
        },
        toTeX: function toTeX(transform) {
            return $_({
                degrees: texFromAngleDeg(transform.angleDeg),
                point: texFromPoint(transform.center)
            }, "旋轉 %(degrees)s 度 (以 %(point)s 為中心)");
        },
        Input: React.createClass({
            displayName: "Input",

            getInitialState: function getInitialState() {
                return {
                    center: this.props.center || [null, null],
                    angleDeg: this.props.angleDeg || null
                };
            },
            componentDidUpdate: function componentDidUpdate(prevProps) {
                if (!deepEq(this.props, prevProps)) {
                    this.setState({
                        center: this.props.center,
                        angleDeg: this.props.angleDeg
                    });
                }
            },
            render: function render() {
                var _this2 = this;

                var point = [React.createElement(
                    TeX,
                    null,
                    "("
                ), React.createElement(NumberInput, {
                    ref: "centerX",
                    placeholder: 0,
                    value: this.state.center[0],
                    useArrowKeys: true,
                    onChange: function onChange(val0) {
                        var val1 = _this2.state.center[1];
                        _this2.setState({ center: [val0, val1] });
                        _this2.props.onChange();
                    } }), React.createElement(
                    TeX,
                    null,
                    ", {}"
                ), React.createElement(NumberInput, {
                    ref: "centerY",
                    placeholder: 0,
                    value: this.state.center[1],
                    useArrowKeys: true,
                    onChange: function onChange(val1) {
                        var val0 = _this2.state.center[0];
                        _this2.setState({ center: [val0, val1] });
                        _this2.props.onChange();
                    } }), React.createElement(
                    TeX,
                    null,
                    ")"
                )];
                var degrees = [React.createElement(NumberInput, {
                    ref: "angleDeg",
                    placeholder: 0,
                    value: this.state.angleDeg,
                    useArrowKeys: true,
                    onChange: function onChange(val) {
                        _this2.setState({ angleDeg: val });
                        _this2.props.onChange();
                    } }), DEGREE_SIGN];
                // I18N: %(point)s must come before %(degrees)s in this phrase
                var text = $_({ point: point, degrees: degrees }, "Rotation about %(point)s by %(degrees)s");

                return React.createElement(
                    "div",
                    null,
                    text
                );
            },
            value: function value() {
                var angleDeg = this.refs.angleDeg.getValue();
                var centerX = this.refs.centerX.getValue();
                var centerY = this.refs.centerY.getValue();
                return {
                    angleDeg: angleDeg,
                    center: [centerX, centerY]
                };
            },
            focus: function focus() {
                this.refs.centerX.focus();
            }
        })
    },

    reflection: {
        // I18N: As in the command, "Reflect the polygon"
        verbName: $._("鏡射"),
        nounName: $._("Reflection"),
        lowerNounName: $._("reflection"),
        apply: function apply(transform) {
            return function (coord) {
                return KhanUtil.kpoint.reflectOverLine(coord, transform.line);
            };
        },
        isValid: function isValid(transform) {
            // A bit hacky, but we'll also define reflecting over a
            // single point as a no-op, to avoid NaN fun.
            return _.all(_.flatten(transform.line), _.isFinite) && !kpoint.equal(transform.line[0], transform.line[1]);
        },
        isEmpty: function isEmpty(transform) {
            return _.all(_.flatten(transform.line), _.isNull);
        },
        isNoOp: function isNoOp(transform) {
            // Invalid transforms are implicitly no-ops, so we don't
            // have to catch that case here.
            return false;
        },
        collapse: function collapse(transform1, transform2) {
            if (!kline.equal(transform1.line, transform2.line)) {
                return false;
            }
            return [];
        },
        toTeX: function toTeX(transform) {
            var point1 = transform.line[0];
            var point2 = transform.line[1];
            return $_({
                point1: texFromPoint(point1),
                point2: texFromPoint(point2)
            }, "對應從 %(point1)s 至 %(point2)s 的線做鏡射");
        },
        Input: React.createClass({
            displayName: "Input",

            getInitialState: function getInitialState() {
                return {
                    line: this.props.line || [[null, null], [null, null]]
                };
            },
            componentDidUpdate: function componentDidUpdate(prevProps) {
                if (!deepEq(this.props, prevProps)) {
                    this.setState({ line: this.props.line });
                }
            },
            render: function render() {
                var point1 = [React.createElement(
                    TeX,
                    null,
                    "("
                ), React.createElement(NumberInput, {
                    ref: "x1",
                    value: this.state.line[0][0],
                    useArrowKeys: true,
                    onChange: this.changePoint.bind(this, 0, 0) }), React.createElement(
                    TeX,
                    null,
                    ", {}"
                ), React.createElement(NumberInput, {
                    ref: "y1",
                    value: this.state.line[0][1],
                    useArrowKeys: true,
                    onChange: this.changePoint.bind(this, 0, 1) }), React.createElement(
                    TeX,
                    null,
                    ")"
                )];
                var point2 = [React.createElement(
                    TeX,
                    null,
                    "("
                ), React.createElement(NumberInput, {
                    ref: "x2",
                    value: this.state.line[1][0],
                    useArrowKeys: true,
                    onChange: this.changePoint.bind(this, 1, 0) }), React.createElement(
                    TeX,
                    null,
                    ", {}"
                ), React.createElement(NumberInput, {
                    ref: "y2",
                    value: this.state.line[1][1],
                    useArrowKeys: true,
                    onChange: this.changePoint.bind(this, 1, 1) }), React.createElement(
                    TeX,
                    null,
                    ")"
                )];
                return React.createElement(
                    "div",
                    null,
                    $_({ point1: point1, point2: point2 }, "對應從 %(point1)s 至 %(point2)s 的線做鏡射")
                );
            },
            changePoint: function changePoint(i, j, val) {
                var line = _.map(this.state.line, _.clone);
                line[i][j] = val;
                this.setState({ line: line });
                this.props.onChange();
            },
            value: function value() {
                var x1 = this.refs.x1.getValue();
                var y1 = this.refs.y1.getValue();
                var x2 = this.refs.x2.getValue();
                var y2 = this.refs.y2.getValue();
                return {
                    line: [[x1, y1], [x2, y2]]
                };
            },
            focus: function focus() {
                this.refs.x1.focus();
            }
        })
    },

    dilation: {
        // I18N: As in the command, "Dilate the polygon"
        verbName: $._("放大"),
        nounName: $._("Dilation"),
        lowerNounName: $._("dilation"),
        apply: function apply(transform) {
            return function (coord) {
                return dilatePointFromCenter(coord, transform.center, transform.scale);
            };
        },
        isValid: function isValid(transform) {
            return _.isFinite(transform.scale) && _.isFinite(transform.center[0]) && _.isFinite(transform.center[1]);
        },
        isEmpty: function isEmpty(transform) {
            return transform.scale === null && transform.center[0] === null && transform.center[1] === null;
        },
        isNoOp: function isNoOp(transform) {
            return knumber.equal(transform.scale, 1);
        },
        collapse: function collapse(transform1, transform2) {
            if (!kpoint.equal(transform1.center, transform2.center)) {
                return false;
            }
            return {
                center: transform1.center,
                scale: transform1.scale * transform2.scale
            };
        },
        toTeX: function toTeX(transform) {
            var scaleString = stringFromFraction(transform.scale);
            return $_({
                scale: scaleString,
                point: texFromPoint(transform.center)
            }, "放大 %(scale)s 倍 (以 %(point)s 為中心)");
        },
        Input: React.createClass({
            displayName: "Input",

            getInitialState: function getInitialState() {
                return {
                    center: this.props.center || [null, null],
                    scale: this.props.scale || null
                };
            },
            componentDidUpdate: function componentDidUpdate(prevProps) {
                if (!deepEq(this.props, prevProps)) {
                    this.setState({
                        center: this.props.center,
                        scale: this.props.scale
                    });
                }
            },
            render: function render() {
                var _this3 = this;

                var point = [React.createElement(
                    TeX,
                    null,
                    "("
                ), React.createElement(NumberInput, {
                    ref: "x",
                    placeholder: 0,
                    value: this.state.center[0],
                    useArrowKeys: true,
                    onChange: function onChange(val0) {
                        var val1 = _this3.state.center[1];
                        _this3.setState({ center: [val0, val1] });
                        _this3.props.onChange();
                    } }), React.createElement(
                    TeX,
                    null,
                    ", {}"
                ), React.createElement(NumberInput, {
                    ref: "y",
                    placeholder: 0,
                    value: this.state.center[1],
                    useArrowKeys: true,
                    onChange: function onChange(val1) {
                        var val0 = _this3.state.center[0];
                        _this3.setState({ center: [val0, val1] });
                        _this3.props.onChange();
                    } }), React.createElement(
                    TeX,
                    null,
                    ")"
                )];
                var scale = React.createElement(NumberInput, {
                    ref: "scale",
                    placeholder: 1,
                    value: this.state.scale,
                    useArrowKeys: true,
                    onChange: function onChange(val) {
                        _this3.setState({ scale: val });
                        _this3.props.onChange();
                    } });
                return React.createElement(
                    "div",
                    null,
                    $_({ point: point, scale: scale }, "Dilation about %(point)s by %(scale)s")
                );
            },
            value: function value() {
                var scale = this.refs.scale.getValue();
                var x = this.refs.x.getValue();
                var y = this.refs.y.getValue();
                return {
                    scale: scale,
                    center: [x, y]
                };
            },
            focus: function focus() {
                this.refs.x.focus();
            }
        })
    }
};

/* Various functions to deal with different shape types */
var ShapeTypes = {
    getPointCountForType: function getPointCountForType(type) {
        var splitType = type.split("-");
        if (splitType[0] === "polygon") {
            return splitType[1] || 3;
        } else if (splitType[0] === "line" || splitType[0] === "lineSegment") {
            return 2;
        } else if (splitType[0] === "angle") {
            return 3;
        } else if (splitType[0] === "circle") {
            return 2;
        } else if (splitType[0] === "point") {
            return 1;
        }
    },

    addMovableShape: function addMovableShape(graphie, options) {
        if (options.editable && options.translatable) {
            throw new Error("It doesn't make sense to have a movable shape " + "where you can stretch the points and translate them " + "simultaneously. options: " + JSON.stringify(options));
        }

        var shape;
        var points = _.map(options.shape.coords, function (coord) {
            var currentPoint;
            var isMoving = false;
            var previousCoord = coord;

            var onMove = function onMove(x, y) {
                if (!isMoving) {
                    previousCoord = currentPoint.coord;
                    isMoving = true;
                }

                var moveVector = KhanUtil.kvector.subtract([x, y], currentPoint.coord);

                // Translate from (x, y) semantics to (dX, dY) semantics
                // This is more useful for translations on multiple points,
                // where we care about how the points moved, not where any
                // individual point ended up
                if (options.onMove) {
                    moveVector = options.onMove(moveVector[0], moveVector[1]);
                }

                // Perform a translation on all points in this shape when
                // any point moves
                if (options.translatable) {
                    _.each(points, function (point) {
                        // The point itself will be updated by the
                        // movablePoint class, so only translate the other
                        // points
                        if (point !== currentPoint) {
                            point.setCoord(KhanUtil.kvector.add(point.coord, moveVector));
                        }
                    });
                }

                // Update our shape and our currentPoint
                // Without this, some shapes (circles, angles) appear
                // "bouncy" as they are updated with currentPoint at the
                // current mouse coordinate (oldCoord), rather than newCoord
                var oldCoord = currentPoint.coord;
                var newCoord = KhanUtil.kvector.add(currentPoint.coord, moveVector);
                // Temporarily change our coordinate so that
                // shape.update() sees the new coordinate
                currentPoint.coord = newCoord;
                shape.update();
                // ...But don't break onMove, which assumes it
                // is the only thing changing our coord
                currentPoint.coord = oldCoord;
                return newCoord;
            };

            var onMoveEnd = function onMoveEnd() {
                // onMove isn't guaranteed to be called before onMoveEnd, so
                // we have to take into account that we may not have moved and
                // set previousCoord.
                if (options.onMoveEnd && isMoving) {
                    isMoving = false;
                    // We don't use the supplied x and y parameters here
                    // because MovablePoint's onMoveEnd semantics suck.
                    // It returns the mouseX, mouseY without processing them
                    // through onMove, leaving us with weird fractional moves
                    var change = KhanUtil.kvector.subtract(currentPoint.coord, previousCoord);
                    options.onMoveEnd(change[0], change[1]);
                }
                shape.update();
            };

            currentPoint = graphie.addMovablePoint({
                coord: coord,
                normalStyle: options.normalPointStyle,
                highlightStyle: options.highlightPointStyle,
                constraints: {
                    fixed: !options.translatable && !options.editable
                },
                visible: options.showPoints,
                snapX: options.snap && options.snap[0] || 0,
                snapY: options.snap && options.snap[1] || 0,
                bounded: false, // Don't bound it when placing it on the graph
                onMove: onMove,
                onMoveEnd: onMoveEnd
            });

            // Bound it when moving
            // We can't set this earlier, because doing so would mean any
            // points outside of the graph would be moved into a moved into
            // a position that doesn't preserve the shape
            currentPoint.bounded = true;

            return currentPoint;
        });

        shape = ShapeTypes.addShape(graphie, options, points);
        var removeShapeWithoutPoints = shape.remove;
        shape.remove = function () {
            removeShapeWithoutPoints.apply(shape);
            _.invoke(points, "remove");
        };
        return shape;
    },

    addShape: function addShape(graphie, options, points) {
        points = points || options.shape.coords;

        var types = ShapeTypes._typesOf(options.shape);
        var typeOptions = options.shape.options || ShapeTypes.defaultOptions(types);

        var shapes = ShapeTypes._mapTypes(types, points, function (type, points, i) {
            var shapeOptions = _.extend({}, options, typeOptions[i]);
            return ShapeTypes._addType(graphie, type, points, shapeOptions);
        });

        var updateFuncs = _.filter(_.pluck(shapes, "update"), _.identity);
        var update = function update() {
            _.invoke(updateFuncs, "call");
        };

        var removeFuncs = _.filter(_.pluck(shapes, "remove"), _.identity);
        var remove = function remove() {
            _.invoke(removeFuncs, "call");
        };

        var getOptions = function getOptions() {
            return _.map(shapes, function (shape) {
                if (shape.getOptions) {
                    return shape.getOptions();
                } else {
                    return {};
                }
            });
        };

        var toJSON = function toJSON() {
            var coords = _.map(points, function (pt) {
                if (_.isArray(pt)) {
                    return pt;
                } else {
                    return pt.coord;
                }
            });
            return {
                type: types,
                coords: coords,
                options: getOptions()
            };
        };

        return {
            type: types,
            points: points,
            update: update,
            remove: remove,
            toJSON: toJSON,
            getOptions: getOptions
        };
    },

    equal: function equal(shape1, shape2) {
        var types1 = ShapeTypes._typesOf(shape1);
        var types2 = ShapeTypes._typesOf(shape2);
        if (types1.length !== types2.length) {
            return false;
        }
        var shapes1 = ShapeTypes._mapTypes(types1, shape1.coords, ShapeTypes._combine);
        var shapes2 = ShapeTypes._mapTypes(types2, shape2.coords, ShapeTypes._combine);
        return _.all(_.map(shapes1, function (partialShape1, i) {
            var partialShape2 = shapes2[i];
            if (partialShape1.type !== partialShape2.type) {
                return false;
            }
            return ShapeTypes._forType(partialShape1.type).equal(partialShape1.coords, partialShape2.coords);
        }));
    },

    _typesOf: function _typesOf(shape) {
        var types = shape.type;
        if (!_.isArray(types)) {
            types = [types];
        }
        return _.map(types, function (type) {
            if (type === "polygon") {
                return "polygon-3";
            } else {
                return type;
            }
        });
    },

    defaultOptions: function defaultOptions(types) {
        return _.map(types, function (type) {
            var typeDefaultOptions = ShapeTypes._forType(type).defaultOptions;
            return _.extend({}, typeDefaultOptions);
        });
    },

    _forType: function _forType(type) {
        var baseType = type.split("-")[0];
        return ShapeTypes[baseType];
    },

    _mapTypes: function _mapTypes(types, points, func, context) {
        return _.map(types, function (type, i) {
            var pointCount = ShapeTypes.getPointCountForType(type);
            var currentPoints = _.first(points, pointCount);
            points = _.rest(points, pointCount);
            return func.call(context, type, currentPoints, i);
        });
    },

    _addType: function _addType(graphie, type, points, options) {
        var lineCoords = _.isArray(points[0]) ? {
            coordA: points[0],
            coordZ: points[1]
        } : {
            pointA: points[0],
            pointZ: points[1]
        };

        type = type.split("-")[0];
        if (type === "polygon") {
            var polygon = graphie.addMovablePolygon(_.extend({}, options, {
                fixed: !options.editable,
                snapX: options.snap && options.snap[0] || 0,
                snapY: options.snap && options.snap[1] || 0,
                points: points,
                constrainToGraph: false
            }));
            return {
                update: polygon.transform.bind(polygon),
                remove: polygon.remove.bind(polygon)
            };
        } else if (type === "line" || type === "lineSegment") {
            var line = graphie.addMovableLineSegment(_.extend({}, options, lineCoords, {
                movePointsWithLine: true,
                fixed: true,
                constraints: {
                    fixed: true
                },
                extendLine: type === "line"
            }));

            // TODO(jack): Hide points on uneditable lines when translation
            // is a vector.
            // We can't just remove the points yet, because they are the
            // translation handle for the line.
            return {
                update: line.transform.bind(line, true),
                remove: line.remove.bind(line)
            };
        } else if (type === "angle") {
            // If this angle is editable, we want to be able to make angles
            // both larger and smaller than 180 degrees.
            // If this angle is not editable, it should always maintain
            // it's angle measure, even if it is reflected (causing the
            // clockwise-ness of the points to change)
            var shouldChangeReflexivity = options.editable ? null : false;

            var angle = graphie.addMovableAngle({
                angleLabel: "$deg0",
                fixed: true,
                points: points,
                normalStyle: options.normalStyle,
                reflex: options.reflex
            });

            // Hide non-vertex points on uneditable angles
            if (!_.isArray(points[0]) && !options.editable) {
                points[0].remove();
                points[2].remove();
            }
            return {
                update: angle.update.bind(angle, shouldChangeReflexivity),
                remove: angle.remove.bind(angle),
                getOptions: function getOptions() {
                    return {
                        reflex: angle.isReflex()
                    };
                }
            };
        } else if (type === "circle") {
            var perimeter = {
                // temporary object for the first removal
                remove: _.identity
            };
            var redrawPerim = function redrawPerim() {
                var coord0 = points[0].coord || points[0];
                var coord1 = points[1].coord || points[1];
                var radius = kpoint.distanceToPoint(coord0, coord1);
                perimeter.remove();
                perimeter = graphie.circle(coord0, radius, _.extend({
                    stroke: KhanUtil.DYNAMIC,
                    "stroke-width": 2
                }, options.normalStyle));
            };

            redrawPerim();
            if (points[1].remove && !options.editable) {
                points[1].remove();
            }

            return {
                update: redrawPerim,
                remove: function remove() {
                    // Not _.bind because the remove function changes
                    // when the perimeter is redrawn
                    perimeter.remove();
                }
            };
        } else if (type === "point") {
            // do nothing
            return {
                update: null,
                remove: null
            };
        } else {
            throw new Error("Invalid shape type " + type);
        }
    },

    _combine: function _combine(type, coords) {
        return {
            type: type,
            coords: coords
        };
    },

    polygon: {
        equal: orderInsensitiveCoordsEqual
    },

    line: {
        equal: kline.equal
    },

    lineSegment: {
        equal: orderInsensitiveCoordsEqual
    },

    angle: {
        equal: function equal(points1, points2) {
            if (!kpoint.equal(points1[1], points2[1])) {
                return false;
            }

            var line1_0 = [points1[1], points1[0]];
            var line1_2 = [points1[1], points1[2]];
            var line2_0 = [points2[1], points2[0]];
            var line2_2 = [points2[1], points2[2]];

            var equalUnflipped = kray.equal(line1_0, line2_0) && kray.equal(line1_2, line2_2);
            var equalFlipped = kray.equal(line1_0, line2_2) && kray.equal(line1_2, line2_0);

            return equalUnflipped || equalFlipped;
        },

        defaultOptions: {
            reflex: false
        }
    },

    circle: {
        equal: function equal(points1, points2) {
            var radius1 = kpoint.distanceToPoint(points1[0], points1[1]);
            var radius2 = kpoint.distanceToPoint(points2[0], points2[1]);
            return kpoint.equal(points1[0], points2[0]) && knumber.equal(radius1, radius2);
        }
    },

    point: {
        equal: kpoint.equal
    }
};

var ToolSettings = React.createClass({
    displayName: "ToolSettings",

    getDefaultProps: function getDefaultProps() {
        return {
            allowFixed: true
        };
    },

    render: function render() {
        return React.createElement(
            "div",
            null,
            this.props.name,
            ":",
            ' ',
            " ",
            React.createElement(PropCheckBox, {
                label: "\u958B\u555F:",
                enabled: this.props.settings.enabled,
                onChange: this.props.onChange }),
            " ",
            this.props.settings.enabled && React.createElement(PropCheckBox, {
                label: "\u5FC5\u8981:",
                required: this.props.settings.required,
                onChange: this.props.onChange }),
            this.props.settings.enabled && React.createElement(
                InfoTip,
                null,
                "\u52FE\u9078\"\u5FC5\u8981\"\u8868\u793A\u5B78\u751F\u81F3\u5C11\u8981\u7528\u904E\u6B64\u8F49\u63DB\u4E00\u6B21\u3002"
            ),
            " ",
            this.props.allowFixed && this.props.settings.enabled && React.createElement(PropCheckBox, {
                label: "\u56FA\u5B9A:",
                fixed: this.props.settings.constraints.fixed,
                onChange: this.changeConstraints }),
            this.props.allowFixed && this.props.settings.enabled && React.createElement(
                InfoTip,
                null,
                "\u52FE\u9078\"\u56FA\u5B9A\"\u53EF\u9632\u6B62\u5B78\u751F\u91CD\u65B0\u5B9A\u4F4D\u6B64\u5DE5\u5177\u3002"
            )
        );
    },

    changeConstraints: function changeConstraints(changed) {
        var newConstraints = _.extend({}, this.props.constraints, changed);
        this.props.onChange({
            constraints: newConstraints
        });
    }
});

var TransformationExplorerSettings = React.createClass({
    displayName: "TransformationExplorerSettings",

    render: function render() {

        return React.createElement(
            "div",
            { className: "transformer-settings" },
            React.createElement(
                "div",
                null,
                ' ',
                "\u6A21\u5F0F:",
                ' ',
                React.createElement(
                    "select",
                    { value: this.getMode(),
                        onChange: this.changeMode },
                    React.createElement(
                        "option",
                        { value: "interactive,dynamic" },
                        ' ',
                        "\u986F\u793A\u8F49\u63DB\u7684\u904E\u7A0B",
                        ' '
                    ),
                    React.createElement(
                        "option",
                        { value: "interactive,static" },
                        ' ',
                        "\u4E0D\u986F\u793A\u8F49\u63DB\u7684\u904E\u7A0B",
                        ' '
                    ),
                    React.createElement(
                        "option",
                        { value: "dynamic,interactive" },
                        ' ',
                        "\u6307\u5B9A\u8F49\u63DB\u53C3\u6578\u4E26\u5373\u6642\u986F\u793A",
                        ' '
                    ),
                    React.createElement(
                        "option",
                        { value: "static,interactive" },
                        ' ',
                        "\u6307\u5B9A\u8F49\u63DB\u53C3\u6578\u4F46\u4E0D\u5373\u6642\u986F\u793A",
                        ' '
                    )
                ),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "ul",
                        null,
                        React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "b",
                                null,
                                "\u6307\u5B9A\u8F49\u63DB\u53C3\u6578\u4E26\u5373\u6642\u986F\u793A:"
                            ),
                            " \u5B78\u751F\u53EF\u81EA\u884C\u6307\u5B9A\u8F49\u63DB\u6240\u9700\u53C3\u6578\uFF0C \u800C\u5716\u5F62\u53EF\u5373\u6642\u986F\u793A\u8F49\u63DB\u5F8C\u7684\u7D50\u679C\u3002",
                            ' '
                        ),
                        React.createElement(
                            "li",
                            null,
                            React.createElement(
                                "b",
                                null,
                                "\u6307\u5B9A\u8F49\u63DB\u53C3\u6578\u4F46\u4E0D\u5373\u6642\u986F\u793A:"
                            ),
                            " \u5B78\u751F\u53EF\u81EA\u884C\u6307\u5B9A\u8F49\u63DB\u6240\u9700\u53C3\u6578\uFF0C \u4F46\u5716\u5F62\u4E0D\u5373\u6642\u986F\u793A\u8F49\u63DB\u5F8C\u7684\u7D50\u679C\u3002",
                            ' '
                        )
                    )
                )
            ),
            React.createElement(ToolSettings, {
                name: "\u5E73\u79FB",
                settings: this.props.tools.translation,
                allowFixed: false,
                onChange: this.changeHandlerFor("translation") }),
            React.createElement(ToolSettings, {
                name: "\u65CB\u8F49",
                settings: this.props.tools.rotation,
                onChange: this.changeHandlerFor("rotation") }),
            React.createElement(ToolSettings, {
                name: "\u93E1\u5C04",
                settings: this.props.tools.reflection,
                onChange: this.changeHandlerFor("reflection") }),
            React.createElement(ToolSettings, {
                name: "\u653E\u5927",
                settings: this.props.tools.dilation,
                onChange: this.changeHandlerFor("dilation") }),
            React.createElement(PropCheckBox, {
                label: "\u756B\u51FA\u7B54\u6848:",
                drawSolutionShape: this.props.drawSolutionShape,
                onChange: this.props.onChange })
        );
    },

    getMode: function getMode() {
        return this.props.graphMode + "," + this.props.listMode;
    },

    changeMode: function changeMode(e) {
        var selected = e.target.value;
        var modes = selected.split(",");

        this.props.onChange({
            graphMode: modes[0],
            listMode: modes[1]
        });
    },

    changeHandlerFor: function changeHandlerFor(toolName) {
        var _this4 = this;

        return function (change) {
            var newTools = _.clone(_this4.props.tools);
            newTools[toolName] = _.extend({}, _this4.props.tools[toolName], change);

            _this4.props.onChange({
                tools: newTools
            });
        };
    }
});

var TransformationsShapeEditor = React.createClass({
    displayName: "TransformationsShapeEditor",

    render: function render() {
        return React.createElement(
            "div",
            null,
            React.createElement(Graph, {
                ref: "graph",
                box: this.props.graph.box,
                range: this.props.graph.range,
                labels: this.props.graph.labels,
                step: this.props.graph.step,
                gridStep: this.props.graph.gridStep,
                markings: this.props.graph.markings,
                backgroundImage: this.props.graph.backgroundImage,
                onGraphieUpdated: this.setupGraphie }),
            React.createElement(
                "select",
                {
                    key: "type-select",
                    value: this.getTypeString(this.props.shape.type),
                    onChange: this.changeType },
                React.createElement(
                    "option",
                    { value: "polygon-3" },
                    "\u4E09\u89D2\u5F62"
                ),
                React.createElement(
                    "option",
                    { value: "polygon-4" },
                    "\u56DB\u908A\u5F62"
                ),
                React.createElement(
                    "option",
                    { value: "polygon-5" },
                    "\u4E94\u908A\u5F62"
                ),
                React.createElement(
                    "option",
                    { value: "polygon-6" },
                    "\u516D\u908A\u5F62"
                ),
                React.createElement(
                    "option",
                    { value: "line" },
                    "\u7DDA"
                ),
                React.createElement(
                    "option",
                    { value: "line,line" },
                    "2 \u7DDA"
                ),
                React.createElement(
                    "option",
                    { value: "lineSegment" },
                    "\u7DDA\u6BB5"
                ),
                React.createElement(
                    "option",
                    { value: "lineSegment,lineSegment" },
                    ' ',
                    "2 \u7DDA\u6BB5",
                    ' '
                ),
                React.createElement(
                    "option",
                    { value: "angle" },
                    "\u89D2\u5EA6"
                ),
                React.createElement(
                    "option",
                    { value: "circle" },
                    "\u5713\u5F62"
                )
            )
        );
    },

    /* Return the option string for a given type */
    getTypeString: function getTypeString(type) {
        if (_.isArray(type)) {
            return _.map(type, this.getTypeString).join(",");
        } else if (type === "polygon") {
            return "polygon-" + this.props.shape.coords.length;
        } else {
            return type;
        }
    },

    /* Change the type on the window event e
     *
     * e.target.value is the new type string
     */
    changeType: function changeType(e) {
        var types = String(e.target.value).split(",");
        var pointCount = arraySum(_.map(types, ShapeTypes.getPointCountForType));

        var radius = scaleToRange(4, this.refs.graph.props.range);
        var offset = (1 / 2 - 1 / pointCount) * 180;
        var coords = _.times(pointCount, function (i) {
            return KhanUtil.kpoint.rotateDeg([radius, 0], 360 * i / pointCount + offset);
        });

        this.props.onChange({
            shape: {
                type: types,
                coords: coords,
                options: ShapeTypes.defaultOptions(types)
            }
        });
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        if (!deepEq(prevProps.shape, this.props.shape)) {
            this.refs.graph.reset();
        }
    },

    updateCoords: function updateCoords() {
        this.props.onChange({
            shape: this.shape.toJSON()
        });
    },

    setupGraphie: function setupGraphie(graphie) {
        this.shape = ShapeTypes.addMovableShape(graphie, {
            editable: true,
            snap: graphie.snap,
            shape: this.props.shape,
            onMoveEnd: this.updateCoords
        });
    }

});

var TransformationListItem = TransformOps.ListItem;

var TransformationList = React.createClass({
    displayName: "TransformationList",

    render: function render() {
        if (this.props.mode === "static") {
            return React.createElement("span", null); // don't render anything
        }

        var transformationList = _.map(this.props.transformations, function (transform, i) {
            return React.createElement(TransformationListItem, {
                ref: "transformation" + i,
                key: "transformation" + i,
                transform: transform,
                mode: this.props.mode,
                onChange: this.handleChange });
        }, this);

        return React.createElement(
            "div",
            { className: "perseus-transformation-list" },
            transformationList
        );
    },

    _transformationRefs: function _transformationRefs() {
        var _this5 = this;

        return _.times(this.props.transformations.length, function (i) {
            return _this5.refs["transformation" + i];
        });
    },

    value: function value() {
        return _.invoke(this._transformationRefs(), "value");
    },

    handleChange: function handleChange() {
        this.props.onChange(this.value());
    },

    focusLast: function focusLast() {
        var transformationRefs = this._transformationRefs();
        if (transformationRefs.length !== 0) {
            _.last(transformationRefs).focus();
        }
    }
});

var ToolButton = React.createClass({
    displayName: "ToolButton",

    render: function render() {
        var classes = this.props.toggled ? "simple-button exercise-orange toggled highlighted-tool-button" : "simple-button";

        return React.createElement(
            "button",
            {
                type: "button",
                className: classes,
                onClick: this.props.onClick,
                onTouchStart: captureScratchpadTouchStart },
            this.props.children
        );
    }
});

var ToolsBar = React.createClass({
    displayName: "ToolsBar",

    getInitialState: function getInitialState() {
        return {
            selected: null
        };
    },

    render: function render() {
        var tools = _.map(Transformations, function (tool, type) {
            if (this.props.enabled[type]) {
                return React.createElement(
                    ToolButton,
                    {
                        key: type,
                        toggled: this.state.selected === type,
                        onClick: this.changeSelected.bind(this, type) },
                    tool.verbName
                );
            }
        }, this);

        return React.createElement(
            "div",
            { className: "transformer-tools-bar" },
            React.createElement(
                "span",
                { className: "simple-button-group" },
                tools
            ),
            React.createElement(
                "button",
                {
                    className: "transformer-undo-button simple-button",
                    type: "button",
                    onClick: this.props.onUndoClick,
                    onTouchStart: captureScratchpadTouchStart },
                React.createElement("span", { className: "icon-undo" }),
                " ",
                "\u56DE\u5FA9"
            ),
            React.createElement("div", { className: "clear" })
        );
    },

    changeSelected: function changeSelected(tool) {
        this.props.removeTool(this.state.selected);

        if (!tool || tool === this.state.selected) {
            this.setState({
                selected: null
            });
        } else {
            this.props.addTool(tool);
            this.setState({
                selected: tool
            });
        }
    }
});

var AddTransformBar = React.createClass({
    displayName: "AddTransformBar",

    render: function render() {
        var tools = _.map(Transformations, function (tool, type) {
            if (this.props.enabled[type]) {
                return React.createElement(
                    ToolButton,
                    {
                        key: type,
                        toggled: false,
                        onClick: this.changeSelected.bind(this, type) },
                    React.createElement("span", { className: "icon-plus" }),
                    " ",
                    tool.nounName
                );
            }
        }, this);

        return React.createElement(
            "div",
            { className: "transformer-tools-bar" },
            tools,
            React.createElement(
                "button",
                {
                    className: "transformer-undo-button simple-button",
                    type: "button",
                    onClick: this.props.onUndoClick,
                    onTouchStart: captureScratchpadTouchStart },
                React.createElement("span", { className: "icon-undo" }),
                " ",
                "\u56DE\u5FA9"
            ),
            React.createElement("div", { className: "clear" })
        );
    },

    changeSelected: function changeSelected(tool) {
        if (tool) {
            this.props.addTool(tool);
        }
    }
});

var Transformer = React.createClass({
    displayName: "Transformer",

    // TODO (jack): These should be refactored into a nice object at the top
    // so that we don't have all this duplication
    getDefaultProps: function getDefaultProps() {
        return _.defaults({
            graph: {},
            transformations: []
        }, defaultTransformerProps);
    },

    render: function render() {
        // Fill in any missing value in this.props.graph
        // this can happen because the graph json doesn't include
        // box, for example
        var graph = _.extend(defaultGraphProps(this.props.graph, defaultBoxSize), this.props.graph);

        var interactiveToolsMode = this.props.graphMode === "interactive";

        var ToolsBarClass = interactiveToolsMode ? ToolsBar : AddTransformBar;

        // This style is applied inline because it is dependent on the
        // size of the graph as set by the graph.box prop, and this also
        // lets us specify it in the same place the graph's width is
        // specified.
        var toolsBar = React.createElement(
            "div",
            { style: { width: graph.box[0] } },
            React.createElement(ToolsBarClass, {
                ref: "toolsBar",
                enabled: pluckObject(this.props.tools, "enabled"),
                addTool: this.addTool,
                removeTool: this.removeTool,
                onUndoClick: this.handleUndoClick })
        );

        return React.createElement(
            "div",
            { className: "perseus-widget " + "perseus-widget-transformer" },
            React.createElement(Graph, {
                ref: "graph",
                box: graph.box,
                range: graph.range,
                labels: graph.labels,
                step: graph.step,
                gridStep: graph.gridStep,
                markings: graph.markings,
                backgroundImage: graph.backgroundImage,
                showProtractor: graph.showProtractor,
                showRuler: graph.showRuler,
                onGraphieUpdated: this.setupGraphie }),
            !interactiveToolsMode && "Add transformations below:",
            this.props.graphMode === "static" && [React.createElement("br", { key: "static-br" }), React.createElement(
                "em",
                { key: "static-nomove" },
                ' ',
                "Note: For this question, the shape will not move.",
                ' '
            )],
            interactiveToolsMode && toolsBar,
            React.createElement(TransformationList, {
                ref: "transformationList",
                mode: this.props.listMode,
                transformations: this.props.transformations,
                onChange: this.setTransformationProps }),
            !interactiveToolsMode && toolsBar
        );
    },

    componentDidMount: function componentDidMount() {
        this.setupGraphie(this.graphie());
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
        if (this.shouldSetupGraphie(this.props, prevProps)) {
            this.refs.graph.reset();
        } else if (!deepEq(this.props.transformations, this.transformations)) {
            this.setTransformations(this.props.transformations);
        }
    },

    shouldSetupGraphie: function shouldSetupGraphie(nextProps, prevProps) {
        if (!deepEq(prevProps.starting, nextProps.starting)) {
            return true;
        } else if (prevProps.graphMode !== nextProps.graphMode) {
            return true;
        } else if (prevProps.listMode !== nextProps.listMode) {
            return true;
        } else if (prevProps.drawSolutionShape !== nextProps.drawSolutionShape) {
            return true;
        } else if (nextProps.drawSolutionShape && !deepEq(prevProps.correct.shape, nextProps.correct.shape)) {
            return true;
        } else if (!deepEq(this.tools, nextProps.tools)) {
            return true;
        } else {
            return false;
        }
    },

    graphie: function graphie() {
        return this.refs.graph.graphie();
    },

    setupGraphie: function setupGraphie(graphie) {
        // A background image of our solution:
        if (this.props.drawSolutionShape && this.props.correct.shape && this.props.correct.shape.coords) {
            ShapeTypes.addShape(graphie, {
                fixed: true,
                shape: this.props.correct.shape,
                normalStyle: {
                    stroke: KhanUtil.GRAY,
                    "stroke-dasharray": "",
                    "stroke-width": 2
                }
            });
        }

        this.currentTool = null;
        this.refs.toolsBar.changeSelected(null);
        this.addTransformerShape(this.props.starting.shape,
        /* translatable */false);
        this.setTransformations(this.props.transformations);

        // Save a copy of our tools so that we can check future
        // this.props.tools changes against them
        // This seems weird, but gives us an easy way to tell whether
        // props changes were self-inflicted (for which a graphie reset
        // is not required, and is in fact a bad idea right now because
        // of resetting the size of the dilation tool).
        // TODO (jack): A deepClone method would be nice here
        this.tools = {
            translation: _.clone(this.props.tools.translation),
            rotation: _.clone(this.props.tools.rotation),
            reflection: _.clone(this.props.tools.reflection),
            dilation: _.clone(this.props.tools.dilation)
        };
    },

    /* Applies all transformations in `transformations`
     * to the starting shape, and updates this.transformations
     * to reflect this
     *
     * Usually called with this.props.transformations
     */
    setTransformations: function setTransformations(transformations) {
        this.resetCoords();
        this.transformations = _.clone(transformations);
        _.each(this.transformations, this.applyTransform);
    },

    // the polygon that we transform
    addTransformerShape: function addTransformerShape(shape, translatable) {
        var self = this;
        var graphie = this.graphie();

        this.shape = ShapeTypes.addMovableShape(graphie, {
            shape: shape,
            editable: false,
            showPoints: this.props.graphMode !== "static",
            translatable: translatable,
            onMove: function onMove(dX, dY) {
                dX = KhanUtil.roundToNearest(graphie.snap[0], dX);
                dY = KhanUtil.roundToNearest(graphie.snap[1], dY);
                self.addTransform({
                    type: "translation",
                    vector: [dX, dY]
                });
                return [dX, dY];
            },
            normalPointStyle: {
                fill: translatable ? KhanUtil.INTERACTIVE : KhanUtil.DYNAMIC,
                stroke: translatable ? KhanUtil.INTERACTIVE : KhanUtil.DYNAMIC
            },
            highlightPointStyle: {
                fill: KhanUtil.INTERACTING,
                stroke: KhanUtil.INTERACTING
            }
        });
    },

    addTool: function addTool(toolId) {
        var self = this;

        if (this.props.graphMode === "interactive") {
            if (toolId === "translation") {
                this.currentTool = this.addTranslationTool();
            } else if (toolId === "rotation") {
                this.currentTool = this.addRotationTool();
            } else if (toolId === "reflection") {
                this.currentTool = this.addReflectionTool();
            } else if (toolId === "dilation") {
                this.currentTool = this.addDilationTool();
            } else {
                throw new Error("Invalid tool id: " + toolId);
            }
        } else {
            var transform;
            if (toolId === "translation") {
                transform = {
                    type: toolId,
                    vector: [null, null]
                };
            } else if (toolId === "rotation") {
                transform = {
                    type: toolId,
                    center: [null, null],
                    angleDeg: null
                };
            } else if (toolId === "reflection") {
                // Reflections with nulls in them won't be applied until
                // fills in the blanks
                transform = {
                    type: toolId,
                    line: [[null, null], [null, null]]
                };
            } else if (toolId === "dilation") {
                transform = {
                    type: toolId,
                    center: [null, null],
                    scale: null
                };
            } else {
                throw new Error("Invalid tool id: " + toolId);
            }

            this.doTransform(transform, function () {
                self.refs.transformationList.focusLast();
            });
        }
    },

    removeTool: function removeTool(toolId) {
        if (this.currentTool) {
            this.currentTool.remove();
        }
        this.currentTool = null;
    },

    addTranslationTool: function addTranslationTool() {
        var self = this;
        this.shape.remove();
        this.addTransformerShape(this.shape.toJSON(),
        /* translatable */true);

        return {
            remove: function remove() {
                self.shape.remove();
                self.addTransformerShape(self.shape.toJSON(),
                /* translatable */false);
            }
        };
    },

    // Snaps a coord to this.graphie()'s snap
    snapCoord: function snapCoord(coord) {
        var graphie = this.graphie();
        return _.map(coord, function (val, dim) {
            return KhanUtil.roundToNearest(graphie.snap[dim], val);
        });
    },

    // Normalize the coords into something that fits the new 45 degree
    // reflection line.
    normalizeReflectionCoords: function normalizeReflectionCoords(messyCoords) {
        var midpoint = this.snapCoord(kline.midpoint(messyCoords));
        var origDirectionPolar = kvector.polarDegFromCart(kvector.subtract(messyCoords[0], messyCoords[1]));
        var directionPolar = [1, KhanUtil.roundToNearest(45, origDirectionPolar[1])];
        var direction = kvector.cartFromPolarDeg(directionPolar);
        var coords = _.map([-1, 1], function (directionCoefficient) {
            var coord = kvector.add(midpoint, kvector.scale(direction, directionCoefficient * this.scaleToCurrentRange(REFLECT_ROTATE_HANDLE_DIST)));
            return this.snapCoord(coord);
        }, this);
        return coords;
    },

    addReflectionTool: function addReflectionTool() {
        var options = this.props.tools.reflection;
        if (!options.enabled) {
            return;
        }
        var self = this;
        var graphie = this.refs.graph.graphie();

        var updateReflectionTool = function updateReflectionTool() {
            self.changeTool("reflection", {
                coords: _.pluck(reflectPoints, "coord")
            });
        };

        var coords = this.normalizeReflectionCoords(options.coords);

        // The points defining the line of reflection; hidden from the
        // user.
        var reflectPoints = _.map(coords, function (coord) {
            return graphie.addMovablePoint({
                coord: coord,
                visible: false
            });
        }, this);

        // the line of reflection
        // TODO(jack): graphie.style here is a hack to prevent the dashed
        // style from leaking into the rest of the shapes. Remove when
        // graphie.addMovableLineSegment doesn't leak styles anymore.
        var reflectLine;
        var normalColor = colorForTool(options);
        graphie.style({}, function () {
            reflectLine = graphie.addMovableLineSegment({
                fixed: options.constraints.fixed,
                constraints: options.constraints,
                pointA: reflectPoints[0],
                pointZ: reflectPoints[1],
                snapX: graphie.snap[0],
                snapY: graphie.snap[1],
                extendLine: true,
                normalStyle: {
                    "stroke": normalColor,
                    "stroke-width": 2,
                    "stroke-dasharray": "- "
                },
                highlightStyle: {
                    "stroke": KhanUtil.INTERACTING,
                    "stroke-width": 2,
                    "stroke-dasharray": "- " // TODO(jack) solid doesn't
                    // work here, but would be
                    // nicer
                },
                movePointsWithLine: true,
                onMoveEnd: updateReflectionTool
            });
        });

        // the "button" point in the center of the line of reflection
        var reflectButton = graphie.addReflectButton({
            fixed: options.constraints.fixed,
            line: reflectLine,
            size: this.scaleToCurrentRange(REFLECT_BUTTON_SIZE),
            onClick: function onClick() {
                self.doTransform({
                    type: "reflection",
                    line: _.pluck(reflectPoints, "coord")
                });
                if (reflectRotateHandle) {
                    // flip the rotation handle
                    reflectRotateHandle.setCoord(kvector.add(reflectButton.coord, kvector.subtract(reflectButton.coord, reflectRotateHandle.coord)));
                    reflectRotateHandle.update();
                }
            },
            normalStyle: {
                stroke: normalColor,
                "stroke-width": 2,
                fill: normalColor
            },
            highlightStyle: {
                stroke: KhanUtil.INTERACTING,
                "stroke-width": 3,
                fill: KhanUtil.INTERACTING
            },
            onMoveEnd: updateReflectionTool
        });

        var reflectRotateHandle = null;
        if (!options.constraints.fixed) {
            // The rotation handle for rotating the line of reflection
            var initRotateHandleAngle = kvector.polarDegFromCart(kvector.subtract(reflectPoints[1].coord, reflectPoints[0].coord))[1] + 90; // 90 degrees off of the line
            reflectRotateHandle = graphie.addRotateHandle({
                center: reflectButton,
                radius: this.scaleToCurrentRange(REFLECT_ROTATE_HANDLE_DIST),
                angleDeg: initRotateHandleAngle,
                width: this.scaleToCurrentRange(0.24),
                hoverWidth: this.scaleToCurrentRange(0.4),
                lengthAngle: 17,
                onMove: function onMove(newAngle) {
                    return KhanUtil.roundToNearest(45, newAngle);
                },
                onMoveEnd: updateReflectionTool
            });
        }

        // Move the reflectButton and reflectRotateHandle with the line
        $(reflectLine).on("move", function () {
            reflectButton.update();
            $(reflectButton).trigger("move"); // update the rotation handle,
            // which watches for this in ke/utils/interactive.js.
        });

        // Update the line and reflect button when the reflectRotateHandle is
        // rotated
        if (reflectRotateHandle) {
            $(reflectRotateHandle).on("move", function () {
                var rotateHandleApprox = self.snapCoord(reflectRotateHandle.coord);

                var rotateVector = kvector.subtract(rotateHandleApprox, reflectButton.coord);

                var flipped = reflectButton.isFlipped() ? 1 : 0;
                reflectPoints[flipped].setCoord(kvector.add(reflectButton.coord, kvector.rotateDeg(rotateVector, 90)));
                reflectPoints[1 - flipped].setCoord(kvector.add(reflectButton.coord, kvector.rotateDeg(rotateVector, -90)));

                reflectLine.transform(true);
                reflectButton.update();
            });
        }

        return {
            remove: function remove() {
                reflectButton.remove();
                if (reflectRotateHandle) {
                    reflectRotateHandle.remove();
                }
                reflectLine.remove();
                reflectPoints[0].remove();
                reflectPoints[1].remove();
            }
        };
    },

    /* Scales a distance from the default range of
     * [-10, 10] to the current this.props.graph.range
     *
     * Used for sizing various transformation tools
     * (rotation handle, dilation circle)
     */
    scaleToCurrentRange: function scaleToCurrentRange(dist) {
        return scaleToRange(dist, this.refs.graph.props.range);
    },

    addRotationTool: function addRotationTool() {
        var options = this.props.tools.rotation;
        if (!options.enabled) {
            return;
        }
        var self = this;
        var graphie = this.refs.graph.graphie();

        var pointColor = colorForTool(options);
        // The center of our rotation, which can be moved to change the
        // center of rotation
        this.rotatePoint = graphie.addMovablePoint({
            constraints: options.constraints,
            coord: options.coord,
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            normalStyle: { // ugh, this seems to be a global and
                "stroke-dasharray": "", // is set to dash above
                stroke: pointColor,
                fill: pointColor
            },
            highlightStyle: {
                "stroke-dasharray": "",
                stroke: KhanUtil.INTERACTING,
                fill: KhanUtil.INTERACTING
            }
        });

        // The point that we move around the center of rotation to actually
        // cause rotations
        this.rotateHandle = graphie.addRotateHandle({
            center: this.rotatePoint,
            radius: this.scaleToCurrentRange(ROTATE_HANDLE_DIST),
            width: this.scaleToCurrentRange(0.24),
            hoverWidth: this.scaleToCurrentRange(0.4),
            onMove: function onMove(newAngle, oldAngle) {
                var transform = self.getRotationTransformFromAngle(self.rotatePoint.coord, newAngle - oldAngle);

                // Rotate polygon with rotateHandle
                self.doTransform(transform);

                return oldAngle + transform.angleDeg;
            }
        });

        // Update tools.rotation.coord
        this.rotatePoint.onMoveEnd = function (x, y) {
            self.changeTool("rotation", {
                coord: [x, y]
            });
        };

        return {
            remove: function remove() {
                self.rotateHandle.remove();
                self.rotatePoint.remove();
            }
        };
    },

    addDilationTool: function addDilationTool() {
        var options = this.props.tools.dilation;
        if (!options.enabled) {
            return;
        }
        var self = this;
        var graphie = this.refs.graph.graphie();

        var pointColor = colorForTool(options);
        // the circle for causing dilation transforms
        self.dilationCircle = graphie.addCircleGraph({
            centerConstraints: options.constraints,
            center: options.coord,
            radius: self.scaleToCurrentRange(2),
            snapX: graphie.snap[0],
            snapY: graphie.snap[1],
            minRadius: self.scaleToCurrentRange(1),
            snapRadius: self.scaleToCurrentRange(0.5),
            onResize: function onResize(newRadius, oldRadius) {
                self.doTransform({
                    type: "dilation",
                    center: self.dilationCircle.centerPoint.coord,
                    scale: newRadius / oldRadius
                });
            },
            circleNormalStyle: {
                "stroke": pointColor,
                "stroke-width": 2,
                "stroke-dasharray": "- ",
                "fill-opacity": 0
            },
            circleHighlightStyle: {
                "stroke": KhanUtil.INTERACTING,
                "stroke-width": 2,
                "stroke-dasharray": "",
                "fill": KhanUtil.INTERACTING,
                "fill-opacity": 0.05
            },
            centerNormalStyle: {
                "stroke": pointColor,
                "fill": pointColor,
                "stroke-width": 2,
                "stroke-dasharray": ""
            },
            centerHighlightStyle: {
                "stroke": pointColor,
                "fill": pointColor,
                "stroke-width": 2,
                "stroke-dasharray": ""
            }
        });

        var origOnMoveEnd = this.dilationCircle.centerPoint.onMoveEnd;
        this.dilationCircle.centerPoint.onMoveEnd = function () {
            if (origOnMoveEnd) {
                origOnMoveEnd.apply(this, _.toArray(arguments));
            }
            self.changeTool("dilation", {
                coord: self.dilationCircle.centerPoint.coord
            });
        };

        return {
            remove: function remove() {
                self.dilationCircle.remove();
            }
        };
    },

    // returns a transformation object representing a rotation
    // rounds the angle to the nearest 15 degrees
    getRotationTransformFromAngle: function getRotationTransformFromAngle(center, angleChanged) {
        angleChanged = (angleChanged + 360) % 360;
        if (angleChanged > 180) {
            angleChanged -= 360;
        }
        var roundedAngle = Math.round(angleChanged / ROTATE_SNAP_DEGREES) * ROTATE_SNAP_DEGREES;

        return {
            type: "rotation",
            center: center,
            angleDeg: roundedAngle
        };
    },

    // apply and save a transform
    doTransform: function doTransform(transform, callback) {
        this.applyTransform(transform);
        this.addTransform(transform, callback);
    },

    // apply a transform to our polygon (without modifying our transformation
    // list)
    applyTransform: function applyTransform(transform) {
        if (this.props.graphMode !== "static") {
            var transformFunc = TransformOps.apply(transform);
            this.applyCoordTransformation(transformFunc);
        }
    },

    // transform our polygon by transforming each point using a given function
    applyCoordTransformation: function applyCoordTransformation(pointTransform) {
        _.each(this.shape.points, function (point) {
            var newCoord = pointTransform(point.coord);
            point.setCoord(newCoord);
        });
        this.shape.update();
    },

    resetCoords: function resetCoords() {
        var startCoords = this.props.starting.shape.coords;
        _.each(this.shape.points, function (point, i) {
            point.setCoord(startCoords[i]);
        });
        this.shape.update();
    },

    // Remove the last transformation
    handleUndoClick: function handleUndoClick() {
        this.refs.toolsBar.changeSelected(null);
        if (this.props.transformations.length) {
            this.props.onChange({
                transformations: _.initial(this.props.transformations)
            });
        }
    },

    setTransformationProps: function setTransformationProps(newTransfomationList) {
        this.props.onChange({
            transformations: newTransfomationList
        });
    },

    // add a transformation to our props list of transformation
    addTransform: function addTransform(transform, callback) {
        this.transformations = TransformOps.append(this.transformations, transform);
        this.props.onChange({
            transformations: _.clone(this.transformations)
        }, callback);
    },

    changeTool: function changeTool(tool, changes) {
        var newTools = _.clone(this.props.tools);
        newTools[tool] = _.extend({}, this.props.tools[tool], changes);
        this.tools[tool] = _.clone(newTools[tool]);
        this.props.onChange({
            tools: newTools
        });
    },

    simpleValidate: function simpleValidate(rubric) {
        return Transformer.validate(this.toJSON(), rubric);
    },

    /**
     * Calculate where the coordinates would be if they were
     * moved, even if we're in formal mode with no movement
     * (and thus the actual movablepoints may not have moved
     */
    getCoords: function getCoords() {
        var startCoords = this.props.starting.shape.coords;
        var transforms = this.props.transformations;
        return _.reduce(transforms, function (coords, transform) {
            return _.map(coords, TransformOps.apply(transform));
        }, startCoords);
    },

    toJSON: function toJSON() {
        var json = _.pick(this.props, "grading", "starting", "graphMode", "listMode", "tools", "drawSolutionShape", "gradeEmpty");
        json.graph = this.refs.graph.toJSON();
        json.answer = {
            transformations: this.props.transformations,
            // This doesn't call this.shape.toJSON() because that doesn't
            // handle coordinates in formal mode without movement, since
            // the movablepoints never move
            shape: {
                type: this.shape.type,
                coords: this.getCoords(),
                options: this.shape.getOptions()
            }
        };
        json.version = 1.2; // Give us some safety to change the format
        // when we realize that I wrote
        // a horrible json spec for this widget
        return json;
    },

    statics: {
        displayMode: "block"
    }
});

_.extend(Transformer, {
    validate: function validate(guess, rubric) {
        // Check for any required transformations
        for (var type in Transformations) {
            if (rubric.tools[type].required) {
                var isUsed = _.any(_.map(guess.answer.transformations, function (transform) {
                    // Required transformations must appear in the
                    // transformation list, and must not be no-ops
                    return transform.type === type && !TransformOps.isEmpty(transform) && !TransformOps.isNoOp(transform);
                }));

                if (!isUsed) {
                    return {
                        type: "invalid",
                        message: $._("Your transformation must use a " + "%(type)s.", {
                            type: Transformations[type].lowerNounName
                        })
                    };
                }
            }
        }

        // Compare shapes
        if (ShapeTypes.equal(guess.answer.shape, rubric.correct.shape)) {
            return {
                type: "points",
                earned: 1,
                total: 1,
                message: null
            };
        } else if (!rubric.gradeEmpty && deepEq(guess.answer.shape.coords, rubric.starting.shape.coords)) {
            return {
                type: "invalid",
                message: $._("Use the interactive graph to define a " + "correct transformation.")
            };
        } else {
            return {
                type: "points",
                earned: 0,
                total: 1,
                message: null
            };
        }
    }
});

var TransformerEditor = React.createClass({
    displayName: "TransformerEditor",

    // TODO (jack): These should be refactored into a nice object at the top
    // so that we don't have all this duplication
    getDefaultProps: function getDefaultProps() {
        return _.defaults({
            graph: defaultGraphProps(null, 340)
        }, defaultTransformerProps);
    },

    render: function render() {
        // Fill in any missing value in this.props.graph
        // this can happen because the graph json doesn't include
        // box, for example
        var graph = _.extend(defaultGraphProps(null, 340), this.props.graph);

        return React.createElement(
            "div",
            null,
            React.createElement(
                "div",
                null,
                React.createElement(PropCheckBox, {
                    label: "\u5C07\u7A7A\u7684\u7B54\u6848\u8996\u70BA\u932F\u8AA4:",
                    gradeEmpty: this.props.gradeEmpty,
                    onChange: this.props.onChange }),
                React.createElement(
                    InfoTip,
                    null,
                    React.createElement(
                        "p",
                        null,
                        "\u57FA\u672C\u4E0A\u6211\u5011\u4E26\u4E0D\u5141\u8A31\u7B54\u6848\u70BA\u7A7A\uFF0C\u4F46\u5728\u5177\u6709\u591A\u91CD\u586B\u7B54\u9700\u6C42\u7684\u554F\u984C\u4E2D (\u53E6\u4E00\u500B widget)\uFF0C\u6B64\u529F\u80FD\u662F\u9700\u8981\u7684\u3002"
                    )
                )
            ),
            React.createElement(
                "div",
                null,
                "\u5716\u5F62\u8A2D\u5B9A:"
            ),
            React.createElement(GraphSettings, {
                box: graph.box,
                labels: graph.labels,
                range: graph.range,
                step: graph.step,
                gridStep: graph.gridStep,
                valid: graph.valid,
                backgroundImage: graph.backgroundImage,
                markings: graph.markings,
                showProtractor: graph.showProtractor,
                showRuler: graph.showRuler,
                onChange: this.changeGraph }),
            React.createElement(
                "div",
                null,
                "\u8B8A\u63DB\u8A2D\u5B9A:"
            ),
            React.createElement(TransformationExplorerSettings, {
                ref: "transformationSettings",
                graphMode: this.props.graphMode,
                listMode: this.props.listMode,
                tools: this.props.tools,
                drawSolutionShape: this.props.drawSolutionShape,
                onChange: this.props.onChange }),
            React.createElement(
                "div",
                null,
                "\u8D77\u59CB\u4F4D\u7F6E:"
            ),
            React.createElement(TransformationsShapeEditor, {
                ref: "shapeEditor",
                graph: graph,
                shape: this.props.starting.shape,
                onChange: this.changeStarting }),
            React.createElement(
                "div",
                null,
                "\u7B54\u6848:"
            ),
            React.createElement(Transformer, {
                ref: "explorer",
                graph: graph,
                graphMode: this.props.graphMode,
                listMode: this.props.listMode,
                gradeEmpty: this.props.gradeEmpty,
                tools: this.props.tools,
                drawSolutionShape: this.props.drawSolutionShape,
                starting: this.props.starting,
                correct: this.props.starting,
                transformations: this.props.correct.transformations,
                onChange: this.changeTransformer })
        );
    },

    // propagate a props change on our graph settings to
    // this.props.graph
    changeGraph: function changeGraph(graphChanges, callback) {
        var newGraph = _.extend({}, this.props.graph, graphChanges);
        this.props.onChange({
            graph: newGraph
        }, callback);
    },

    // propagate a props change on our starting graph to
    // this.props.starting
    changeStarting: function changeStarting(startingChanges) {
        var newStarting = _.extend({}, this.props.starting, startingChanges);
        this.props.onChange({
            starting: newStarting
        });
    },

    // propagate a transformations change onto correct.transformations
    changeTransformer: function changeTransformer(changes, callback) {
        if (changes.transformations) {
            changes.correct = {
                transformations: changes.transformations
            };
            delete changes.transformations;
        }
        this.props.onChange(changes, callback);
    },

    toJSON: function toJSON() {
        var json = this.refs.explorer.toJSON();
        json.correct = json.answer;
        delete json.answer;
        return json;
    }
});

module.exports = {
    name: "transformer",
    displayName: "Transformer/圖形變換",
    widget: Transformer,
    editor: TransformerEditor,
    hidden: false
};

},{"../components/graph-settings.jsx":253,"../components/graph.jsx":254,"../components/number-input.jsx":261,"../components/prop-check-box.jsx":262,"../tex.jsx":302,"../util.js":303,"react":246,"react-components/js/info-tip.jsx":68}]},{},[295])(295)
});