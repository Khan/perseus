import"./underscore-U-AHniOr.js";import{o as C,x as T}from"./core-widget-registry-2tCIH_GM.js";import{B as L}from"./index-CYrfVekP.js";import{V as m}from"./index-CskvhqFA.js";import{S as W,O}from"./answer-choices-DVQOAvoJ.js";import{I as y}from"./index-CfqIx-dS.js";import{S as p,a as X}from"./index-B-CZbs2J.js";import{c as g,s}from"./index-C9RM_t1w.js";import{L as b,a as S}from"./index-CbNKSLRm.js";import{p as E,L as G}from"./locked-figure-aria-BvRGGr0Z.js";import{n as F}from"./no-important-DlFk8a1I.js";import{r as n}from"./index-C6mWTJJr.js";import{C as H,L as Q,a as Y}from"./locked-label-settings-yDTs91kU.js";import{P as q}from"./trash-bold-CHX2KdYF.js";import{C as Z}from"./color-select-C8JPGQ7w.js";import{L as J}from"./labeled-switch-y9wDHKkx.js";import{L as K}from"./line-stroke-select-CYm4pbHo.js";import{g as ee,j as ne,a as x,b as te}from"./util-D1_6LeEu.js";const re=""+new URL("arrow-fat-down-Bfm634Ub.svg",import.meta.url).href,ae=""+new URL("arrow-fat-left-vG4eNh8n.svg",import.meta.url).href,oe=""+new URL("arrow-fat-right-LGRtshLE.svg",import.meta.url).href,le=""+new URL("arrow-fat-up-BqHZ5poh.svg",import.meta.url).href,ie=""+new URL("minus-circle-D0QptBrx.svg",import.meta.url).href,A=d=>{const{color:l,fillStyle:u,strokeStyle:w}=d;return n.createElement(m,{"aria-label":`${l}, stroke ${w}, fill ${u}`,style:[P.container,{border:`4px ${w} ${C[l]}`}]},n.createElement(m,{style:[P.innerSquare,{backgroundColor:C[l],opacity:u==="white"?0:T[u]}]}))},P=F.StyleSheet.create({container:{outline:`2px solid ${g.offWhite}`,width:s.large_24,height:s.large_24,backgroundColor:g.white,alignItems:"center",justifyContent:"center"},innerSquare:{width:20,height:20}});A.__docgenInfo={description:"",methods:[],displayName:"PolygonSwatch",props:{color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},fillStyle:{required:!0,tsType:{name:"union",raw:'"none" | "white" | "translucent" | "solid"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"white"'},{name:"literal",value:'"translucent"'},{name:"literal",value:'"solid"'}]},description:""},strokeStyle:{required:!0,tsType:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}]},description:""}}};const se=d=>{const{points:l,color:u,showVertices:w,fillStyle:v,strokeStyle:f,labels:t,ariaLabel:$,expanded:R,onToggle:z,onChangeProps:i,onMove:B,onRemove:_}=d;async function I(){let e=`Polygon${await ne(t)} with ${l.length} sides, vertices at `;const o=await Promise.all(l.map(async([k,j])=>{const D=await x(`$${k}$`),N=await x(`$${j}$`);return`${D} comma ${N}`}));e+=o.join(", ");const c=te(u,f,v);return e+=c,e}function M(r){const e={color:r};e.labels=t==null?void 0:t.map(o=>({...o,color:r})),i(e)}function h(r){switch(r){case"up":i({points:l.map(([e,o])=>[e,o+1]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0],e.coord[1]+1]}))});break;case"down":i({points:l.map(([e,o])=>[e,o-1]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0],e.coord[1]-1]}))});break;case"left":i({points:l.map(([e,o])=>[e-1,o]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0]-1,e.coord[1]]}))});break;case"right":i({points:l.map(([e,o])=>[e+1,o]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0]+1,e.coord[1]]}))});break}}function U(r,e){if(!t)return;const o=[...t];o[e]={...t[e],...r},i({labels:o})}function V(r){if(!t)return;const e=t.filter((o,c)=>c!==r);i({labels:e})}return n.createElement(q,{expanded:R,onToggle:z,header:n.createElement(m,{style:a.row},n.createElement(b,null,`Polygon, ${l.length} sides`),n.createElement(p,{size:s.xSmall_8}),n.createElement(A,{color:u,fillStyle:v,strokeStyle:f}))},n.createElement(m,{style:[a.row,a.spaceUnder]},n.createElement(Z,{selectedValue:u,onChange:M}),n.createElement(p,{size:s.medium_16}),n.createElement(S,{tag:"label",style:[a.row,a.truncatedWidth]},"fill",n.createElement(p,{size:s.xxSmall_6}),n.createElement(W,{selectedValue:v,onChange:r=>i({fillStyle:r}),placeholder:""},Object.keys(T).map(r=>n.createElement(O,{key:r,value:r,label:r}))))),n.createElement(K,{selectedValue:f,onChange:r=>i({strokeStyle:r})}),n.createElement(J,{label:"show vertices",checked:w,onChange:r=>i({showVertices:r}),style:a.spaceUnder}),n.createElement(q,{header:n.createElement(b,null,"Points"),expanded:!0,containerStyle:a.pointAccordionContainer,panelStyle:a.pointAccordionPanel},l.map((r,e)=>{const o=String.fromCharCode(65+e);return n.createElement(m,{key:`locked-polygon-point-index-${e}`,style:[a.row,a.spaceUnder]},n.createElement(b,null,`${o}:`),n.createElement(p,{size:s.medium_16}),n.createElement(H,{coord:r,labels:["x","y"],onChange:c=>{const k=[...l];k[e]=c,d.onChangeProps({points:k})}}),l.length>3&&n.createElement(y,{"aria-label":`Delete polygon point ${o}`,icon:ie,color:"destructive",onClick:()=>{const c=[...l];c.splice(e,1),d.onChangeProps({points:c})},style:a.icon}))}),n.createElement(m,{style:[a.row,a.polygonActionsContainer]},n.createElement(L,{kind:"tertiary",startIcon:E,onClick:()=>{d.onChangeProps({points:[...l,[0,0]]})}},"Add point"),n.createElement(X,null),n.createElement(m,{style:a.movementButtonsContainer},n.createElement(y,{"aria-label":"Move polygon up",style:a.iconButton,size:"small",icon:le,onClick:()=>h("up")}),n.createElement(m,{style:a.row},n.createElement(y,{"aria-label":"Move polygon left",style:a.iconButton,size:"small",icon:ae,onClick:()=>h("left")}),n.createElement(y,{"aria-label":"Move polygon down",style:a.iconButton,size:"small",icon:re,onClick:()=>h("down")}),n.createElement(y,{"aria-label":"Move polygon right",style:a.iconButton,size:"small",icon:oe,onClick:()=>h("right")}))))),n.createElement(p,{size:s.small_12}),n.createElement(m,{style:a.horizontalRule}),n.createElement(G,{ariaLabel:$,getPrepopulatedAriaLabel:I,onChangeProps:r=>{i(r)}}),n.createElement(p,{size:s.xxxSmall_4}),n.createElement(m,{style:a.horizontalRule}),n.createElement(p,{size:s.small_12}),n.createElement(S,null,"Visible labels"),t==null?void 0:t.map((r,e)=>n.createElement(Q,{...r,key:e,expanded:!0,onChangeProps:o=>{U(o,e)},onRemove:()=>{V(e)},containerStyle:a.labelContainer})),n.createElement(L,{kind:"tertiary",startIcon:E,onClick:()=>{const r={...ee("label"),coord:[l[0][0],l[0][1]-((t==null?void 0:t.length)??0)],color:u};i({labels:[...t??[],r]})},style:a.addButton},"Add visible label"),n.createElement(Y,{figureType:d.type,onMove:B,onRemove:_}))},a=F.StyleSheet.create({row:{display:"flex",flexDirection:"row",alignItems:"center"},pointAccordionContainer:{backgroundColor:g.white},pointAccordionPanel:{alignItems:"start"},icon:{marginInlineStart:s.xxxSmall_4},polygonActionsContainer:{width:"100%"},iconButton:{margin:0},movementButtonsContainer:{display:"flex",flexDirection:"column",alignItems:"center",minWidth:"fit-content"},spaceUnder:{marginBottom:s.xSmall_8},truncatedWidth:{minWidth:0},addButton:{alignSelf:"start"},labelContainer:{backgroundColor:g.white},horizontalRule:{height:1,backgroundColor:g.offBlack16}});se.__docgenInfo={description:"",methods:[],displayName:"LockedPolygonSettings",props:{onMove:{required:!0,tsType:{name:"signature",type:"function",raw:"(movement: LockedFigureSettingsMovementType) => void",signature:{arguments:[{type:{name:"union",raw:`| "back"
| "backward"
| "forward"
| "front"`,elements:[{name:"literal",value:'"back"'},{name:"literal",value:'"backward"'},{name:"literal",value:'"forward"'},{name:"literal",value:'"front"'}]},name:"movement"}],return:{name:"void"}}},description:"Called when a movement button (top, up, down, bottom) is pressed."},onRemove:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when the delete button is pressed."},expanded:{required:!1,tsType:{name:"boolean"},description:"Whether this accordion is expanded."},onToggle:{required:!1,tsType:{name:"signature",type:"function",raw:"(expanded: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"expanded"}],return:{name:"void"}}},description:"Called when the accordion is expanded or collapsed."},type:{required:!0,tsType:{name:"literal",value:'"polygon"'},description:""},points:{required:!0,tsType:{name:"ReadonlyArray",elements:[{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}]}],raw:"ReadonlyArray<Coord>"},description:""},color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},showVertices:{required:!0,tsType:{name:"boolean"},description:""},fillStyle:{required:!0,tsType:{name:"union",raw:'"none" | "white" | "translucent" | "solid"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"white"'},{name:"literal",value:'"translucent"'},{name:"literal",value:'"solid"'}]},description:""},strokeStyle:{required:!0,tsType:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}]},description:""},labels:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]"},description:""},ariaLabel:{required:!1,tsType:{name:"string"},description:""},onChangeProps:{required:!0,tsType:{name:"signature",type:"function",raw:"(newProps: Partial<LockedPolygonType>) => void",signature:{arguments:[{type:{name:"Partial",elements:[{name:"signature",type:"object",raw:`{
    type: "polygon";
    points: ReadonlyArray<Coord>;
    color: LockedFigureColor;
    showVertices: boolean;
    fillStyle: LockedFigureFillType;
    strokeStyle: LockedLineStyle;
    labels?: LockedLabelType[];
    ariaLabel?: string;
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"polygon"',required:!0}},{key:"points",value:{name:"ReadonlyArray",elements:[{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}],raw:"ReadonlyArray<Coord>",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"showVertices",value:{name:"boolean",required:!0}},{key:"fillStyle",value:{name:"union",raw:'"none" | "white" | "translucent" | "solid"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"white"'},{name:"literal",value:'"translucent"'},{name:"literal",value:'"solid"'}],required:!0}},{key:"strokeStyle",value:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}],required:!0}},{key:"labels",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]",required:!1}},{key:"ariaLabel",value:{name:"string",required:!1}}]}}],raw:"Partial<LockedPolygonType>"},name:"newProps"}],return:{name:"void"}}},description:"Called when the props (coords, color, etc.) are updated."}}};export{se as L};
