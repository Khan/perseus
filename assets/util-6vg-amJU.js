import"./util-Q3BXsyUV.js";import"./index-default-4_ZsnO94.js";import{l as d,s as l}from"./svg-image-XQpw6aYj.js";import{e as p,f as m,h as f,i as y,j as x,k as C}from"./article-renderer-8i7l1cTv.js";import"./version-akiLXZts.js";import"./dependencies-9B_Bv_mA.js";import"./perseus-api-cFDIds9P.js";import"./multi-renderer-faZQx5xE.js";import"./hints-renderer-UVaycCrD.js";import"./renderer-2sKNXKym.js";import"./base-radio-DUASWsXF.js";import"./button-group-KR3umc1e.js";import"./graph-Em1MPHW3.js";import"./hud-CJYktPgf.js";import"./icon-TA3bBVIW.js";import"./index-unb9_VrH.js";import"./inline-icon-QIU9thzn.js";import"./math-input-NQxFBc18.js";import"./multi-button-group-AxfQn4Cq.js";import"./number-input-qa6WcWGj.js";import"./prop-check-box-f7I2HerX.js";import"./range-input-8CEPNQ51.js";import"./text-input-Q1V0RBx1.js";import"./text-list-editor-A-LpoxgU.js";import"./jquery-5v7aFUvu.js";import"./i18n-context-DsDGD6dy.js";import{w as g}from"./index-J2t_5nK1.js";function _(t){t.focus({preventScroll:!0})}const s="grayH";function a(t){switch(t){case"point":return{type:"point",coord:[0,0],color:s,filled:!0};case"line":return{type:"line",kind:"line",points:[a("point"),{...a("point"),coord:[2,2]}],color:s,lineStyle:"solid",showPoint1:!1,showPoint2:!1};case"vector":return{type:"vector",points:[[0,0],[2,2]],color:s};case"ellipse":return{type:"ellipse",center:[0,0],radius:[1,1],angle:0,color:s,fillStyle:"none",strokeStyle:"solid"};case"polygon":return{type:"polygon",points:[[0,2],[-1,0],[1,0]],color:s,showVertices:!1,fillStyle:"none",strokeStyle:"solid"};case"function":return{type:"function",color:s,strokeStyle:"solid",equation:"x^2",directionalAxis:"x"};default:throw new g(t)}}function J(t){return t/180*Math.PI}function K(t){return t/Math.PI*180}function N(t,o,r){switch(t.type){case"linear":case"ray":return C({...t,startCoords:void 0},o,r);case"segment":return x({...t,startCoords:void 0},o,r);case"linear-system":return y({...t,startCoords:void 0},o,r);case"circle":const e=f({...t,startCoords:void 0}),i=d(l(e.radiusPoint,e.center));return{center:e.center,radius:i};case"sinusoid":return m({...t,startCoords:void 0},o,r);case"quadratic":return p({...t,startCoords:void 0},o,r);default:return}}const X=t=>{const o=t[0],r=t[1],e=r[1]-o[1],i=Math.PI/(2*(r[0]-o[0])),n=o[0]*i,c=o[1];return"y = "+e.toFixed(3)+"sin("+i.toFixed(3)+"x - "+n.toFixed(3)+") + "+c.toFixed(3)},Y=t=>{const o=t[0],r=t[1],e=t[2],i=(o[0]-r[0])*(o[0]-e[0])*(r[0]-e[0]);if(i===0)return"Division by zero error";const n=(e[0]*(r[1]-o[1])+r[0]*(o[1]-e[1])+o[0]*(e[1]-r[1]))/i,c=(e[0]*e[0]*(o[1]-r[1])+r[0]*r[0]*(e[1]-o[1])+o[0]*o[0]*(r[1]-e[1]))/i,u=(r[0]*e[0]*(r[0]-e[0])*o[1]+e[0]*o[0]*(e[0]-o[0])*r[1]+o[0]*r[0]*(o[0]-r[0])*e[1])/i;return"y = "+n.toFixed(3)+"x^2 + "+c.toFixed(3)+"x + "+u.toFixed(3)};export{Y as a,X as b,N as c,J as d,_ as f,a as g,K as r};
