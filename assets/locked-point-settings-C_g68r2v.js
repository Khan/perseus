import{B as A}from"./index-DpD-xBMx.js";import{V as f}from"./index-CskvhqFA.js";import{S as p}from"./index-D-mrA-Lm.js";import{s as i,c as b}from"./index-CC9jxhwQ.js";import{L as B,a as R}from"./index-CbNKSLRm.js";import{L as D,p as M}from"./locked-figure-aria-NWcvHPCL.js";import{n as j}from"./no-important-DlFk8a1I.js";import{r as e}from"./index-C6mWTJJr.js";import{C as N,L as V,a as O}from"./locked-label-settings-KRHBneK8.js";import{P as U}from"./trash-bold-BTlK448C.js";import{C as X}from"./color-select-C17j9UGb.js";import{C as I,g as W,j as Y,a as L,b as G}from"./util-OOvqVT1Z.js";import{L as C}from"./labeled-switch-CngeYfqr.js";const H=k=>{const{headerLabel:x,coord:l,color:c,filled:w=!0,labels:r,ariaLabel:q,onChangeProps:s,onMove:h,onRemove:g,showPoint:y,error:P,expanded:T,onTogglePoint:v,onToggle:S}=k,u=!h&&!g;async function E(){const n=await Y(r),a=await L(`$${l[0]}$`),t=await L(`$${l[1]}$`);let m=`Point${n} at ${a} comma ${t}`;const d=G(c);return m+=d,m}function F(n){const a={color:n};r&&(a.labels=r.map(t=>({...t,color:n}))),s(a)}function _(n){const a=n[0]-l[0],t=n[1]-l[1],m={coord:n};r&&(m.labels=r.map(d=>({...d,coord:[d.coord[0]+a,d.coord[1]+t]}))),s(m)}function $(n,a){if(!r)return;const t=[...r];t[a]={...r[a],...n},s({labels:t})}function z(n){if(!r)return;const a=r.filter((t,m)=>m!==n);s({labels:a})}return e.createElement(U,{expanded:T,onToggle:S,containerStyle:u?o.definingContainer:void 0,panelStyle:u?o.definingPanel:void 0,header:e.createElement(f,{style:o.row},e.createElement(B,null,`${x||"Point"} (${l[0]}, ${l[1]})`),e.createElement(p,{size:i.xSmall_8}),e.createElement(I,{color:c,filled:w}))},e.createElement(N,{coord:l,style:o.spaceUnder,onChange:_,error:!!P}),v&&e.createElement(C,{label:"show point on graph",checked:!!y,style:y&&o.spaceUnder,onChange:v}),(!u||y)&&e.createElement(e.Fragment,null,e.createElement(X,{selectedValue:c,onChange:F,style:o.spaceUnder}),e.createElement(C,{label:"open point",checked:!w,onChange:n=>{s({filled:!n})}})),!u&&e.createElement(e.Fragment,null,e.createElement(p,{size:i.small_12}),e.createElement(f,{style:o.horizontalRule}),e.createElement(D,{ariaLabel:q,getPrepopulatedAriaLabel:E,onChangeProps:n=>{s(n)}})),e.createElement(p,{size:i.xxxSmall_4}),e.createElement(f,{style:o.horizontalRule}),e.createElement(p,{size:i.small_12}),e.createElement(R,null,"Visible labels"),r==null?void 0:r.map((n,a)=>e.createElement(V,{...n,key:a,containerStyle:!u&&o.lockedPointLabelContainer,expanded:!0,onChangeProps:t=>{$(t,a)},onRemove:()=>{z(a)}})),e.createElement(A,{kind:"tertiary",startIcon:M,onClick:()=>{const n={...W("label"),coord:[l[0]+.5,l[1]-1*((r==null?void 0:r.length)??0)],color:c};s({labels:[...r??[],n]})},style:o.addButton},"Add visible label"),g&&e.createElement(O,{figureType:k.type,onMove:h,onRemove:g}))},o=j.StyleSheet.create({definingContainer:{marginTop:i.xSmall_8,marginBottom:0,marginLeft:-i.xxxSmall_4,marginRight:-i.xxxSmall_4,backgroundColor:b.white},definingPanel:{paddingBottom:i.xxSmall_6},lockedPointLabelContainer:{backgroundColor:b.white},row:{flexDirection:"row",alignItems:"center"},spaceUnder:{marginBottom:i.xSmall_8},addButton:{alignSelf:"start"},horizontalRule:{height:1,backgroundColor:b.offBlack16}});H.__docgenInfo={description:"",methods:[],displayName:"LockedPointSettings",props:{type:{required:!0,tsType:{name:"literal",value:'"point"'},description:""},coord:{required:!0,tsType:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}]},description:""},color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},filled:{required:!0,tsType:{name:"boolean"},description:""},labels:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]"},description:""},ariaLabel:{required:!1,tsType:{name:"string"},description:""},headerLabel:{required:!1,tsType:{name:"string"},description:`Optional label for the point to display in the header summary.
Defaults to "Point".`},showPoint:{required:!1,tsType:{name:"boolean"},description:"Whether the extra point settings are toggled open."},error:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"Optional error message to display."},onTogglePoint:{required:!1,tsType:{name:"signature",type:"function",raw:"(newValue) => void",signature:{arguments:[{name:"newValue"}],return:{name:"void"}}},description:"Called when the extra settings toggle switch is changed."},onChangeProps:{required:!0,tsType:{name:"signature",type:"function",raw:"(newProps: Partial<LockedPointType>) => void",signature:{arguments:[{type:{name:"Partial",elements:[{name:"signature",type:"object",raw:`{
    type: "point";
    coord: Coord;
    color: LockedFigureColor;
    filled: boolean;
    labels?: LockedLabelType[];
    ariaLabel?: string;
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"point"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"filled",value:{name:"boolean",required:!0}},{key:"labels",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]",required:!1}},{key:"ariaLabel",value:{name:"string",required:!1}}]}}],raw:"Partial<LockedPointType>"},name:"newProps"}],return:{name:"void"}}},description:"Called when the props (coords, color, etc.) are updated."},expanded:{required:!1,tsType:{name:"boolean"},description:"Whether this accordion is expanded."},onToggle:{required:!1,tsType:{name:"signature",type:"function",raw:"(expanded: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"expanded"}],return:{name:"void"}}},description:"Called when the accordion is expanded or collapsed."},onMove:{required:!1,tsType:{name:"signature",type:"function",raw:"(movement: LockedFigureSettingsMovementType) => void",signature:{arguments:[{type:{name:"union",raw:`| "back"
| "backward"
| "forward"
| "front"`,elements:[{name:"literal",value:'"back"'},{name:"literal",value:'"backward"'},{name:"literal",value:'"forward"'},{name:"literal",value:'"front"'}]},name:"movement"}],return:{name:"void"}}},description:"Called when the point is moved."},onRemove:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when the point is removed."}}};export{H as L};
