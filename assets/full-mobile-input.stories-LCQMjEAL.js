import{j as t,S as K,u as y,r as n,M as j,v as S}from"./iframe-C-wjKudE.js";const{action:T}=__STORYBOOK_MODULE_ACTIONS__,I={title:"math-input/Full Mobile MathInput",parameters:{backgrounds:{default:"light background",values:[{name:"light background",value:"lightgrey",default:!0}]}}},M=({keypadElement:e,setKeypadElement:a})=>{const[x,h]=n.useState(""),[o,v]=n.useState(!1),[i,f]=n.useState(!0),[c,g]=n.useState(!0),m=n.useRef(null),C=i?"CDOT":"TIMES";return n.useEffect(()=>{e==null||e.configure({keypadType:o?"EXPRESSION":"FRACTION",extraKeys:o?["x","y","PI","THETA"]:[],times:i},()=>{})},[e,o,i]),t.jsxs("div",{style:{padding:"1rem 2rem"},children:[t.jsxs("div",{children:[t.jsx("div",{children:"NOTE: To properly test the input interaction, you will need to simulate a device using the dev tools. MathInput requires touch events (not click events)."}),t.jsxs("div",{style:{padding:"1rem 0"},children:[t.jsx("button",{onClick:()=>v(!o),children:`Use ${o?"Fraction":"Expression"} Keypad`}),t.jsx("button",{onClick:()=>g(!c),children:`Use ${c?"Legacy":"New"} Keypad`}),t.jsx("button",{onClick:()=>f(!i),children:"Toggle to "+C})]})]}),t.jsx(j,{value:x,ref:m,keypadElement:e,onChange:(s,u)=>{h(s),u==null||u()},onFocus:()=>{e==null||e.activate()},onBlur:()=>{e==null||e.dismiss()},ariaLabel:"Mobile input"}),t.jsx(S,{onElementMounted:s=>{s&&a(s)},onDismiss:()=>{},onAnalyticsEvent:async s=>T("onAnalyticsEvent")(s)})]})};function r(){return t.jsx(K,{children:t.jsx(y.Consumer,{children:({keypadElement:e,setKeypadElement:a})=>t.jsx(M,{keypadElement:e,setKeypadElement:a})})})}r.__docgenInfo={description:"",methods:[],displayName:"Wrapped"};var d,p,l;r.parameters={...r.parameters,docs:{...(d=r.parameters)==null?void 0:d.docs,source:{originalSource:`function Wrapped() {
  return <StatefulKeypadContextProvider>
            <KeypadContext.Consumer>
                {({
        keypadElement,
        setKeypadElement
      }) => <Basic keypadElement={keypadElement} setKeypadElement={setKeypadElement} />}
            </KeypadContext.Consumer>
        </StatefulKeypadContextProvider>;
}`,...(l=(p=r.parameters)==null?void 0:p.docs)==null?void 0:l.source}}};const O=["Wrapped"];export{r as Wrapped,O as __namedExportsOrder,I as default};
