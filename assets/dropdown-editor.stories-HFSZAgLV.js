import{j as m}from"./iframe-CvVra0N4.js";import{E as p}from"./editor-page-with-storybook-preview-Ckjsq5F-.js";import{c,r as d}from"./register-all-widgets-and-editors-for-testing-CUEK8wak.js";import"./changeable-nFy8X6Em.js";import"./article-renderer-wDvWitxg.js";import"./server-item-renderer-B7KiDeS-.js";import"./hints-renderer-Bcb7GYXj.js";import"./content-preview-CM1VbVZ8.js";import"./editor-page-BCGZ6e9E.js";import"./components-BH71sfte.js";import"./viewport-resizer-BO9a087P.js";import"./image-widget-generator-BkbJOfbU.js";import"./tex-error-view-Bh0T_R-U.js";import"./item-extras-editor-D8oVAKM3.js";import"./preview-panel-DgpZrCnp.js";import"./editor-jsonify-BvdWZVWl.js";import"./blur-input-vAUnS1t5.js";import"./free-response-editor-CVUyiwne.js";import"./input-number-editor-Dad8fT3U.js";import"./Popper-PRGrAOCB.js";import"./label-image-editor-C5lKu4kN.js";import"./form-wrapped-text-field-d4cuVU5b.js";import"./global-colors-DSS4FaUr.js";import"./answer-choices-JJ_0ApjJ.js";import"./behavior-DezUoNPu.js";import"./question-markers-zAL8dldR.js";import"./marker-NOU75x2i.js";import"./select-image-BpzPCqoE.js";import"./matcher-editor-zojsYp4K.js";import"./number-line-editor-CyIN_NxO.js";import"./phet-simulation-editor-CSuYBz9f.js";import"./plotter-editor-D7zkmeQK.js";import"./python-program-editor-NAwEQyWi.js";import"./sorter-editor-C6RfLeEE.js";const g={content:"The total number of boxes the forklift can carry is [[â˜ƒ dropdown 1]] $60$.",images:{},widgets:{"dropdown 1":{type:"dropdown",alignment:"default",static:!1,graded:!0,options:{static:!1,placeholder:"greater/less than or equal to",choices:[{content:"greater than or equal to",correct:!1},{content:"less than or equal to",correct:!0}]},version:{major:0,minor:0}}}},{action:l}=__STORYBOOK_MODULE_ACTIONS__;d();const H={title:"Widgets/Dropdown/Editor Demo",component:c,tags:["!dev"]},o={args:{onChange:l("onChange")}},t={render:()=>m.jsx(p,{question:g})};var r,e,i;o.parameters={...o.parameters,docs:{...(r=o.parameters)==null?void 0:r.docs,source:{originalSource:`{
  args: {
    onChange: action("onChange")
  }
}`,...(i=(e=o.parameters)==null?void 0:e.docs)==null?void 0:i.source}}};var a,s,n;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`{
  render: (): React.ReactElement => <EditorPageWithStorybookPreview question={question} />
}`,...(n=(s=t.parameters)==null?void 0:s.docs)==null?void 0:n.source}}};const J=["Default","WithinEditorPage"];export{o as Default,t as WithinEditorPage,J as __namedExportsOrder,H as default};
