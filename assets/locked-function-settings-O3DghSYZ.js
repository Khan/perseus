import{r as v,j as e,V as c,n as q,bA as X,y as o,s as l,bp as C,aF as f,L as N,z as Y,e as y,h as I}from"./iframe-DGYxWGXi.js";import{C as Z,S as _,O as L}from"./color-select-qxpSuDK6.js";import{p as K}from"./plus-circle-DsgEZe2H.js";import{P as M}from"./trash-bold-Cl2ZlcI8.js";import{L as Q}from"./line-stroke-select-CZdq4v8S.js";import{L as ee}from"./line-swatch-CJEV8Hpu.js";import{L as ae}from"./line-weight-select-DO6LI0tY.js";import{L as ne}from"./locked-figure-aria-BuJD-gae.js";import{L as te,a as ie}from"./locked-label-settings-BwJBfJiH.js";import{g as re,j as le,b as oe}from"./util-BK3DfBSJ.js";const se=""+new URL("copy-ChcUWZci.svg",import.meta.url).href,ue=""+new URL("note-pencil-CqqXva0w.svg",import.meta.url).href,R={linear:["x + 5","1/2x - 2"],polynomial:["1/2x^2 + 3x - 4","(1/3)x^3 - 2x^2 + 3x - 4"],trigonometric:["sin(x) * 3","arctan(2x) + 4"]},de=d=>{const{color:p,strokeStyle:m,equation:x,directionalAxis:h,domain:r,weight:S,ariaLabel:B,onChangeProps:s,onMove:E,onRemove:$}=d,u=d.labels,T=h==="x"?"y=":"x=",D=`Function (${T}${x})`,F=a=>[Number.isFinite(a[0])?a[0].toString():"",Number.isFinite(a[1])?a[1].toString():""],[k,z]=v.useState(F(r)),[g,W]=v.useState("");v.useEffect(()=>{z(F(r))},[r]);async function V(){let t=`Function${await le(u)} with equation ${T}${x}`;(Number.isFinite(r[0])||Number.isFinite(r[1]))&&(t+=`, domain from ${r[0]} to ${r[1]}`);const i=oe(p,m,void 0,S);return t+=i,t}function b(a,t){const i={};i[a]=t,s(i)}function P(a,t){const i=[...k];i[a]=t,z(i);const w=[...r];let j=parseFloat(t);t===""&&a===0?j=-1/0:t===""&&a===1&&(j=1/0),w[a]=j,s({domain:w})}const O=Object.keys(R),A=g!=="",H=A?R[g]:["Select category to see example equations"];function G(a){const t={color:a};t.labels=u.map(i=>({...i,color:a})),s(t)}function J(a,t){const i=[...u];i[t]={...u[t],...a},s({labels:i})}function U(a){const t=u.filter((i,w)=>w!==a);s({labels:t})}return e.jsxs(M,{expanded:d.expanded,onToggle:d.onToggle,header:e.jsxs(c,{style:n.row,children:[e.jsx(N,{style:n.accordionHeader,children:D}),e.jsx(o,{size:l.xSmall_8}),e.jsx(ee,{color:p,lineStyle:m})]}),children:[e.jsxs(c,{style:[n.row,{marginBottom:X.size_080}],children:[e.jsx(Z,{selectedValue:p,onChange:G}),e.jsx(o,{size:l.small_12}),e.jsx(Q,{selectedValue:m,onChange:a=>{b("strokeStyle",a)}})]}),e.jsx(ae,{selectedValue:S,onChange:a=>s({weight:a})}),e.jsxs(c,{style:[n.row,n.rowSpace],children:[e.jsxs(_,{selectedValue:h,onChange:a=>{b("directionalAxis",a)},"aria-label":"equation prefix",style:[n.dropdownLabel,n.axisMenu],placeholder:"",children:[e.jsx(L,{value:"x",label:"y ="}),e.jsx(L,{value:"y",label:"x ="})]}),e.jsx(o,{size:l.xSmall_8}),e.jsx(C,{type:"text","aria-label":"equation",value:x,onChange:a=>{b("equation",a)},style:[n.textField]})]}),e.jsxs(c,{style:[n.row,n.rowSpace],children:[e.jsxs(f,{tag:"label",style:[n.dropdownLabel,n.domainMin],children:["domain min",e.jsx(o,{size:l.xxSmall_6}),e.jsx(C,{type:"number",style:n.domainMinField,value:k[0],onChange:a=>{P(0,a)}})]}),e.jsx(o,{size:l.medium_16}),e.jsxs(f,{tag:"label","aria-label":"domain max",style:[n.dropdownLabel,n.domainMax],children:["max",e.jsx(o,{size:l.xxSmall_6}),e.jsx(C,{type:"number",style:n.domainMaxField,value:k[1],onChange:a=>{P(1,a)}})]})]}),e.jsxs(M,{header:e.jsx(N,{children:"Example Functions"}),expanded:!1,containerStyle:n.exampleWorkspace,panelStyle:n.exampleAccordionPanel,children:[e.jsxs(f,{tag:"label",style:n.dropdownLabel,children:["Choose a category",e.jsx(o,{size:l.xxSmall_6}),e.jsx(_,{selectedValue:g,onChange:W,placeholder:"examples",children:O.map(a=>e.jsx(L,{value:a,label:a},a))})]}),A&&e.jsx("ul",{className:q.css(n.exampleContainer),children:H.map((a,t)=>e.jsx(me,{category:g,example:a,index:t,pasteEquationFn:b},t))})]}),e.jsx(o,{size:l.small_12}),e.jsx(c,{style:n.horizontalRule}),e.jsx(ne,{ariaLabel:B,getPrepopulatedAriaLabel:V,onChangeProps:a=>{s(a)}}),e.jsx(o,{size:l.xxxSmall_4}),e.jsx(c,{style:n.horizontalRule}),e.jsx(o,{size:l.small_12}),e.jsx(f,{children:"Visible labels"}),u.map((a,t)=>e.jsx(te,{...a,expanded:!0,onChangeProps:i=>{J(i,t)},onRemove:()=>{U(t)},containerStyle:n.labelContainer},t)),e.jsx(Y,{kind:"tertiary",startIcon:K,onClick:()=>{const a={...re("label"),coord:[0,-u.length],color:p};s({labels:[...u,a]})},style:n.addButton,children:"Add visible label"}),e.jsx(ie,{figureType:d.type,onMove:E,onRemove:$})]})},me=d=>{const{category:p,example:m,index:x,pasteEquationFn:h}=d,r=v.useId();return e.jsxs("li",{className:q.css(n.exampleRow),children:[e.jsx(I,{icon:ue,kind:"tertiary","aria-label":"paste example","aria-describedby":r,onClick:()=>h("equation",m),size:"medium",style:n.copyPasteButton}),e.jsx(I,{icon:se,kind:"tertiary","aria-label":"copy example","aria-describedby":r,onClick:()=>navigator.clipboard.writeText(m),size:"medium",style:n.copyPasteButton}),e.jsx(o,{size:l.xxxSmall_4}),e.jsx(c,{style:n.exampleContent,id:r,children:m})]},`${p}-${x}`)},n=q.StyleSheet.create({accordionHeader:{textOverflow:"ellipsis",maxWidth:"calc(100% - 64px)",overflow:"hidden",whiteSpace:"nowrap"},axisMenu:{minWidth:"auto"},copyPasteButton:{flexShrink:"0",margin:"0 2px"},domainMin:{justifyContent:"space-between",width:"calc(((100% - 141px) / 2) + 88.7px)",textWrap:"nowrap"},domainMinField:{width:"calc(100% - 88.7px)"},domainMax:{width:"calc(((100% - 141px) / 2) + 36.2px)"},domainMaxField:{width:"calc(100% - 36.2px)"},dropdownLabel:{alignItems:"center",display:"flex"},exampleAccordionPanel:{alignItems:"start",paddingBottom:"12px",flexDirection:"row",flexWrap:"wrap"},exampleContainer:{background:"white",border:`1px solid ${y.fadedOffBlack16}`,borderRadius:"4px",flexGrow:"1",listStyleType:"none",maxHeight:"88px",margin:"8px 0 0 0",overflowY:"scroll",padding:"4px 12px 4px 4px"},exampleContent:{fontFamily:'"Lato", sans-serif',flexGrow:"1",color:y.offBlack},exampleRow:{alignItems:"center",display:"flex",flexDirection:"row",minHeight:"44px"},exampleWorkspace:{background:y.white50},rowSpace:{marginTop:l.xSmall_8},row:{display:"flex",flexDirection:"row",alignItems:"center"},textField:{flexGrow:"1"},addButton:{alignSelf:"start"},horizontalRule:{height:1,backgroundColor:y.offBlack16},labelContainer:{backgroundColor:y.white}});de.__docgenInfo={description:"",methods:[],displayName:"LockedFunctionSettings",props:{type:{required:!0,tsType:{name:"literal",value:'"function"'},description:""},color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},strokeStyle:{required:!0,tsType:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}]},description:""},weight:{required:!0,tsType:{name:"union",raw:'"thin" | "medium" | "thick"',elements:[{name:"literal",value:'"thin"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"thick"'}]},description:""},equation:{required:!0,tsType:{name:"string"},description:"This is the user-defined equation (as it was typed)"},directionalAxis:{required:!0,tsType:{name:"union",raw:'"x" | "y"',elements:[{name:"literal",value:'"x"'},{name:"literal",value:'"y"'}]},description:"The independent variable of this function"},domain:{required:!0,tsType:{name:"tuple",raw:"[min: number, max: number]",elements:[{name:"unknown"},{name:"unknown"}]},description:"The minimum and maximum values along the `directionalAxis` at which\nthis function should be graphed. Values of -Infinity and Infinity are\nallowed. Note that infinite values are serialized as `null` in JSON."},labels:{required:!0,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]"},description:""},ariaLabel:{required:!1,tsType:{name:"string"},description:""},onMove:{required:!0,tsType:{name:"signature",type:"function",raw:"(movement: LockedFigureSettingsMovementType) => void",signature:{arguments:[{type:{name:"union",raw:`| "back"
| "backward"
| "forward"
| "front"`,elements:[{name:"literal",value:'"back"'},{name:"literal",value:'"backward"'},{name:"literal",value:'"forward"'},{name:"literal",value:'"front"'}]},name:"movement"}],return:{name:"void"}}},description:"Called when a movement button (top, up, down, bottom) is pressed."},onRemove:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when the delete button is pressed."},expanded:{required:!1,tsType:{name:"boolean"},description:"Whether this accordion is expanded."},onToggle:{required:!1,tsType:{name:"signature",type:"function",raw:"(expanded: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"expanded"}],return:{name:"void"}}},description:"Called when the accordion is expanded or collapsed."},onChangeProps:{required:!0,tsType:{name:"signature",type:"function",raw:"(newProps: Partial<LockedFunctionType>) => void",signature:{arguments:[{type:{name:"Partial",elements:[{name:"signature",type:"object",raw:`{
    type: "function";
    color: LockedFigureColor;
    strokeStyle: LockedLineStyle;
    weight: StrokeWeight;
    /**
     * This is the user-defined equation (as it was typed)
     */
    equation: string;
    /**
     * The independent variable of this function
     */
    directionalAxis: "x" | "y";
    /**
     * The minimum and maximum values along the \`directionalAxis\` at which
     * this function should be graphed. Values of -Infinity and Infinity are
     * allowed. Note that infinite values are serialized as \`null\` in JSON.
     */
    domain: [min: number, max: number];
    labels: LockedLabelType[];
    ariaLabel?: string;
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"function"',required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"strokeStyle",value:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}],required:!0}},{key:"weight",value:{name:"union",raw:'"thin" | "medium" | "thick"',elements:[{name:"literal",value:'"thin"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"thick"'}],required:!0}},{key:"equation",value:{name:"string",required:!0},description:"This is the user-defined equation (as it was typed)"},{key:"directionalAxis",value:{name:"union",raw:'"x" | "y"',elements:[{name:"literal",value:'"x"'},{name:"literal",value:'"y"'}],required:!0},description:"The independent variable of this function"},{key:"domain",value:{name:"tuple",raw:"[min: number, max: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0},description:"The minimum and maximum values along the `directionalAxis` at which\nthis function should be graphed. Values of -Infinity and Infinity are\nallowed. Note that infinite values are serialized as `null` in JSON."},{key:"labels",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]",required:!0}},{key:"ariaLabel",value:{name:"string",required:!1}}]}}],raw:"Partial<LockedFunctionType>"},name:"newProps"}],return:{name:"void"}}},description:"Called when the props (points, color, etc.) are updated."}}};export{de as L};
