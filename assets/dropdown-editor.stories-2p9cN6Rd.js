import{j as m}from"./iframe-Drd1SmRq.js";import{E as p}from"./editor-page-with-storybook-preview-Qpy0fPEU.js";import{c,r as d}from"./register-all-widgets-and-editors-for-testing-BgZGgTkj.js";import"./changeable-DTjDaQev.js";import"./article-renderer-QWMa5iwH.js";import"./server-item-renderer-DSCwYT3W.js";import"./hints-renderer-nULHa8p5.js";import"./content-preview-BYs4RIzR.js";import"./editor-page-DlW7EeTM.js";import"./components-DkrwPn-v.js";import"./viewport-resizer-Cq-hymee.js";import"./image-widget-generator-BkbJOfbU.js";import"./tex-error-view-JrPzo621.js";import"./item-extras-editor-BYECs2-u.js";import"./preview-panel-DrkZklUa.js";import"./editor-jsonify-BNgEg5rS.js";import"./blur-input-CBPzOSSp.js";import"./free-response-editor-Bo-10nVB.js";import"./input-number-editor-BjLHg5Mn.js";import"./Popper-Ci4RRPxU.js";import"./label-image-editor-BPb4bhn2.js";import"./form-wrapped-text-field-DSgvgUNZ.js";import"./global-colors-DSS4FaUr.js";import"./answer-choices-d0Kbt_VK.js";import"./behavior-ZvKw_qMa.js";import"./question-markers-Db4v2q9U.js";import"./marker-BkopM5oq.js";import"./select-image-Uw6c824k.js";import"./matcher-editor-CcyvlOgy.js";import"./number-line-editor-5AjxYjHY.js";import"./phet-simulation-editor-BQXoTWTr.js";import"./plotter-editor-DMo0Rf_P.js";import"./python-program-editor-B-P-ZQAv.js";import"./sorter-editor-ChyMzF96.js";const g={content:"The total number of boxes the forklift can carry is [[â˜ƒ dropdown 1]] $60$.",images:{},widgets:{"dropdown 1":{type:"dropdown",alignment:"default",static:!1,graded:!0,options:{static:!1,placeholder:"greater/less than or equal to",choices:[{content:"greater than or equal to",correct:!1},{content:"less than or equal to",correct:!0}]},version:{major:0,minor:0}}}},{action:l}=__STORYBOOK_MODULE_ACTIONS__;d();const H={title:"Widgets/Dropdown/Editor Demo",component:c,tags:["!dev"]},o={args:{onChange:l("onChange")}},t={render:()=>m.jsx(p,{question:g})};var r,e,i;o.parameters={...o.parameters,docs:{...(r=o.parameters)==null?void 0:r.docs,source:{originalSource:`{
  args: {
    onChange: action("onChange")
  }
}`,...(i=(e=o.parameters)==null?void 0:e.docs)==null?void 0:i.source}}};var a,s,n;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`{
  render: (): React.ReactElement => <EditorPageWithStorybookPreview question={question} />
}`,...(n=(s=t.parameters)==null?void 0:s.docs)==null?void 0:n.source}}};const J=["Default","WithinEditorPage"];export{o as Default,t as WithinEditorPage,J as __namedExportsOrder,H as default};
