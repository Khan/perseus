import{S as E,a as x,M as h}from"./mobile-keypad-Aug0c_8m.js";import{a as S}from"./chunk-D5ZWXAHU-vR62DWf0.js";import{r as e}from"./index-6oxdNXpR.js";import{M}from"./prop-types-l_dZIZXG.js";import"./key-translator-Jsz9R8wR.js";import"./button-assets-EM7_DRcB.js";import{K as u}from"./enums-x5qaTru7.js";import"./underscore-885MUNGo.js";import"./random-util-taBURWXy.js";import"./no-important-xCWWYXQR.js";import"./_commonjsHelpers-4gQjN7DL.js";import"./index-9gkyvru-.js";import"./index-OQMtW1Q1.js";import"./index-J2t_5nK1.js";import"./index-iTGWTR8W.js";import"./assertThisInitialized-4q6YPdh3.js";import"./index-k8usAFZT.js";import"./tiny-invariant-bHgPayXn.js";import"./index-QHkT31Yt.js";import"./tabbar-zpu-45Sc.js";import"./item-Q2jDffTR.js";import"./keypad-button-2XNiOZPV.js";import"./operators-page-Mdb6mtEZ.js";import"./navigation-pad-hurLKoEP.js";import"./v4-yQnnJER4.js";import"./index-o42urCig.js";import"./get-decimal-separator-c07pHhM9.js";const k={title:"math-input/Full Mobile MathInput",parameters:{backgrounds:{default:"light background",values:[{name:"light background",value:"lightgrey",default:!0}]}}},T=({keypadElement:t,setKeypadElement:s})=>{const[d,f]=e.useState(""),[o,v]=e.useState(!1),[i,g]=e.useState(!0),[p,y]=e.useState(!0),K=e.useRef(null),C=i?"CDOT":"TIMES";return e.useEffect(()=>{t==null||t.configure({keypadType:o?u.EXPRESSION:u.FRACTION,extraKeys:o?["x","y","PI","THETA"]:[],times:i},()=>{})},[t,o,i]),e.createElement("div",{style:{padding:"1rem 2rem"}},e.createElement("div",null,e.createElement("div",null,"NOTE: To properly test the input interaction, you will need to simulate a device using the dev tools. MathInput requires touch events (not click events)."),e.createElement("div",{style:{padding:"1rem 0"}},e.createElement("button",{onClick:()=>v(!o)},`Use ${o?"Fraction":"Expression"} Keypad`),e.createElement("button",{onClick:()=>y(!p)},`Use ${p?"Legacy":"New"} Keypad`),e.createElement("button",{onClick:()=>g(!i)},"Toggle to "+C))),e.createElement(M,{value:d,ref:K,keypadElement:t,onChange:(r,a)=>{f(r),a==null||a()},onFocus:()=>{t==null||t.activate()},onBlur:()=>{t==null||t.dismiss()},ariaLabel:"Mobile input"}),e.createElement(h,{onElementMounted:r=>{r&&s(r)},onDismiss:()=>{},onAnalyticsEvent:async r=>S("onAnalyticsEvent")(r)}))};function n(){return e.createElement(E,null,e.createElement(x.Consumer,null,({keypadElement:t,setKeypadElement:s})=>e.createElement(T,{keypadElement:t,setKeypadElement:s})))}n.__docgenInfo={description:"",methods:[],displayName:"Wrapped"};var m,c,l;n.parameters={...n.parameters,docs:{...(m=n.parameters)==null?void 0:m.docs,source:{originalSource:`function Wrapped() {
  return <StatefulKeypadContextProvider>
            <KeypadContext.Consumer>
                {({
        keypadElement,
        setKeypadElement
      }) => <Basic keypadElement={keypadElement} setKeypadElement={setKeypadElement} />}
            </KeypadContext.Consumer>
        </StatefulKeypadContextProvider>;
}`,...(l=(c=n.parameters)==null?void 0:c.docs)==null?void 0:l.source}}};const ee=["Wrapped"];export{n as Wrapped,ee as __namedExportsOrder,k as default};
