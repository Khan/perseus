import"./all-widgets-h_JU0P37.js";import"./phet-simulation-PcZBIYg8.js";import{_ as o}from"./underscore-885MUNGo.js";import{b as p}from"./random-util-d2bWv_si.js";import"./dependencies-CP7Uh8Kq.js";import"./perseus-api-Y55S7ZPk.js";import"./server-item-renderer-_HGcDZtC.js";import"./article-renderer-3RbpUDRm.js";import"./hints-renderer-1Odbc-EM.js";import"./renderer-4HkLLeN8.js";import"./base-radio-KrJ5PhvC.js";import{c as u}from"./components-PFamG7MY.js";import{a as m}from"./i18n-context-Q5gDzbF3.js";import{U as s,i as c}from"./util-GC63bR_8.js";import"./svg-image-mgEvHBk_.js";import"./jquery-5v7aFUvu.js";import"./index-smZ6iCr_.js";import{r as e}from"./index-6oxdNXpR.js";import{B as d}from"./blur-input-OAUAq3Aj.js";const{InfoTip:i}=u,n=class n extends e.Component{constructor(){super(...arguments),this.input=e.createRef(),this.handleAnswerChange=t=>{const r=s.firstNumericalParse(t,this.context.strings)||0;this.props.onChange({value:r})},this.focus=()=>{var t;return(t=this.input.current)==null||t.focus(),!0},this.serialize=()=>({value:this.props.value,simplify:this.props.simplify,size:this.props.size,inexact:this.props.inexact,maxError:this.props.maxError,answerType:this.props.answerType,rightAlign:this.props.rightAlign})}render(){const t=o.map(c,function(r,a){return e.createElement("option",{value:a,key:a},r.name)},this);return e.createElement("div",null,e.createElement("div",null,e.createElement("label",null,"Correct answer:"," ",e.createElement(d,{value:""+this.props.value,onChange:this.handleAnswerChange,ref:this.input}))),e.createElement("div",null,e.createElement("label",null,"Unsimplified answers"," ",e.createElement("select",{value:this.props.simplify,onChange:r=>{this.props.onChange({simplify:r.target.value})}},e.createElement("option",{value:"required"},"will not be graded"),e.createElement("option",{value:"optional"},"will be accepted"),e.createElement("option",{value:"enforced"},"will be marked wrong"))),e.createElement(i,null,e.createElement("p",null,'Normally select "will not be graded". This will give the user a message saying the answer is correct but not simplified. The user will then have to simplify it and re-enter, but will not be penalized. (5th grade and anything after)'),e.createElement("p",null,'Select "will be accepted" only if the user is not expected to know how to simplify fractions yet. (Anything prior to 5th grade)'),e.createElement("p",null,'Select "will be marked wrong" only if we are specifically assessing the ability to simplify.'))),e.createElement("div",null,e.createElement("label",null,e.createElement("input",{type:"checkbox",checked:this.props.inexact,onChange:r=>{this.props.onChange({inexact:r.target.checked})}})," ","Allow inexact answers"),e.createElement("label",null,e.createElement("input",{type:"checkbox",style:{visibility:"hidden"}}),"Max error:"," ",e.createElement("input",{type:"text",disabled:!this.props.inexact,defaultValue:this.props.maxError,"aria-label":"Max error",onBlur:r=>{const a=""+(s.firstNumericalParse(r.target.value,this.context.strings)||0);r.target.value=a,this.props.onChange({maxError:a})}}))),e.createElement("div",null,"Answer type:"," ",e.createElement("select",{value:this.props.answerType,onChange:r=>{this.props.onChange({answerType:r.target.value})},"aria-label":"Answer type"},t),e.createElement(i,null,e.createElement("p",null,'Use the default "Numbers" unless the answer must be in a specific form (e.g., question is about converting decimals to fractions).'))),e.createElement("div",null,e.createElement("label",null,"Width"," ",e.createElement("select",{value:this.props.size,onChange:r=>{this.props.onChange({size:r.target.value})}},e.createElement("option",{value:"normal"},"Normal (80px)"),e.createElement("option",{value:"small"},"Small (40px)"))),e.createElement(i,null,e.createElement("p",null,'Use size "Normal" for all text boxes, unless there are multiple text boxes in one line and the answer area is too narrow to fit them.'))),e.createElement("div",null,e.createElement("label",null,e.createElement("input",{type:"checkbox",checked:this.props.rightAlign,onChange:r=>{this.props.onChange({rightAlign:r.target.checked})}})," ","Right alignment")))}};n.contextType=m,n.widgetName="input-number",n.defaultProps=p.defaultWidgetOptions;let l=n;l.__docgenInfo={description:"",methods:[{name:"handleAnswerChange",docblock:null,modifiers:[],params:[{name:"str",optional:!1,type:null}],returns:null},{name:"focus",docblock:null,modifiers:[],params:[],returns:null},{name:"serialize",docblock:null,modifiers:[],params:[],returns:null}],displayName:"InputNumberEditor",props:{value:{required:!1,tsType:{name:"number"},description:"",defaultValue:{value:"0",computed:!1}},simplify:{required:!1,tsType:{name:"union",raw:'PerseusInputNumberWidgetOptions["simplify"]'},description:"",defaultValue:{value:'"required"',computed:!1}},size:{required:!1,tsType:{name:"union",raw:'PerseusInputNumberWidgetOptions["size"]'},description:"",defaultValue:{value:'"normal"',computed:!1}},inexact:{required:!1,tsType:{name:"boolean",raw:'PerseusInputNumberWidgetOptions["inexact"]'},description:"",defaultValue:{value:"false",computed:!1}},maxError:{required:!1,tsType:{name:"union",raw:'PerseusInputNumberWidgetOptions["maxError"]'},description:"",defaultValue:{value:"0.1",computed:!1}},answerType:{required:!1,tsType:{name:"union",raw:'PerseusInputNumberWidgetOptions["answerType"]'},description:"",defaultValue:{value:'"number"',computed:!1}},rightAlign:{required:!1,tsType:{name:"boolean",raw:'PerseusInputNumberWidgetOptions["rightAlign"]'},description:"",defaultValue:{value:"false",computed:!1}},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:`(arg1: {
    value?: ParsedValue | 0;
    simplify?: Props["simplify"];
    size?: Props["size"];
    inexact?: Props["inexact"];
    maxError?: Props["maxError"];
    answerType?: Props["answerType"];
    rightAlign?: Props["rightAlign"];
}) => void`,signature:{arguments:[{type:{name:"signature",type:"object",raw:`{
    value?: ParsedValue | 0;
    simplify?: Props["simplify"];
    size?: Props["size"];
    inexact?: Props["inexact"];
    maxError?: Props["maxError"];
    answerType?: Props["answerType"];
    rightAlign?: Props["rightAlign"];
}`,signature:{properties:[{key:"value",value:{name:"union",raw:"ParsedValue | 0",elements:[{name:"signature",type:"object",raw:`{
    value: number;
    exact: boolean;
}`,signature:{properties:[{key:"value",value:{name:"number",required:!0}},{key:"exact",value:{name:"boolean",required:!0}}]}},{name:"literal",value:"0"}],required:!1}},{key:"simplify",value:{name:"union",raw:'Props["simplify"]',required:!1}},{key:"size",value:{name:"union",raw:'Props["size"]',required:!1}},{key:"inexact",value:{name:"boolean",raw:'Props["inexact"]',required:!1}},{key:"maxError",value:{name:"union",raw:'Props["maxError"]',required:!1}},{key:"answerType",value:{name:"union",raw:'Props["answerType"]',required:!1}},{key:"rightAlign",value:{name:"boolean",raw:'Props["rightAlign"]',required:!1}}]}},name:"arg1"}],return:{name:"void"}}},description:""}}};export{l as I};
