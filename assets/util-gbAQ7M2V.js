import"./util-Q3BXsyUV.js";import"./index-default-4_ZsnO94.js";import{l,s as u}from"./svg-image-1N9MukZl.js";import{e as d,f as p,h as m,i as f,j as y}from"./article-renderer-E86MsmYt.js";import"./version-akiLXZts.js";import"./dependencies-9B_Bv_mA.js";import"./perseus-api-cFDIds9P.js";import"./multi-renderer-ENRTVs-3.js";import"./hints-renderer-cyjup-_j.js";import"./renderer-JrrbFnUG.js";import"./base-radio-jjzrjL5j.js";import"./button-group-KR3umc1e.js";import"./graph-xQwCqgdo.js";import"./hud-CJYktPgf.js";import"./icon-TA3bBVIW.js";import"./info-tip-7k4XWhfR.js";import"./inline-icon-QIU9thzn.js";import"./math-input-NQxFBc18.js";import"./multi-button-group-AxfQn4Cq.js";import"./number-input-qa6WcWGj.js";import"./prop-check-box-f7I2HerX.js";import"./range-input-8CEPNQ51.js";import"./text-input-Q1V0RBx1.js";import"./text-list-editor-A-LpoxgU.js";import"./jquery-5v7aFUvu.js";import"./i18n-context-DsDGD6dy.js";import{w as C}from"./index-J2t_5nK1.js";function _(o){o.focus({preventScroll:!0})}const e="grayH";function n(o){switch(o){case"point":return{type:"point",coord:[0,0],color:e,filled:!0};case"line":return{type:"line",kind:"line",points:[n("point"),{...n("point"),coord:[2,2]}],color:e,lineStyle:"solid",showPoint1:!1,showPoint2:!1};case"vector":return{type:"vector",points:[[0,0],[2,2]],color:e};case"ellipse":return{type:"ellipse",center:[0,0],radius:[1,1],angle:0,color:e,fillStyle:"none",strokeStyle:"solid"};case"polygon":return{type:"polygon",points:[[0,2],[-1,0],[1,0]],color:e,showVertices:!1,fillStyle:"none",strokeStyle:"solid"};case"function":return{type:"function",color:e,strokeStyle:"solid",equation:"x^2",directionalAxis:"x"};default:throw new C(o)}}function z(o){return o/180*Math.PI}function J(o){return o/Math.PI*180}function K(o,t,r){switch(o.type){case"linear":case"ray":return y({...o,startCoords:void 0},t,r);case"segment":return f({...o,startCoords:void 0},t,r);case"linear-system":return m({...o,startCoords:void 0},t,r);case"circle":const i=p({...o,startCoords:void 0}),s=l(u(i.radiusPoint,i.center));return{center:i.center,radius:s};case"sinusoid":return d({...o,startCoords:void 0},t,r);default:return}}const N=o=>{const t=o[0],r=o[1],i=r[1]-t[1],s=Math.PI/(2*(r[0]-t[0])),a=t[0]*s,c=t[1];return"y = "+i.toFixed(3)+"sin("+s.toFixed(3)+"x - "+a.toFixed(3)+") + "+c.toFixed(3)};export{N as a,K as b,z as d,_ as f,n as g,J as r};
