import{j as e,a as i}from"./jsx-runtime-BGVbfQ2Z.js";import"./article-renderer-CoVPrcH6.js";import"./unit-kRJG92HA.js";import"./index-eZ2N530f.js";import"./index-V35CFGao.js";import{r as o}from"./index-qhcEwEpg.js";import"./fixed-to-responsive-G5J_wmel.js";import"./dependencies-fnqF3NiV.js";import"./video-transcript-link-ZVuMBlt5.js";import{_ as m}from"./index-default-4_ZsnO94.js";import"./perseus-api-Ly41NhN4.js";import"./multi-renderer-_lM1Ddlh.js";import"./hints-renderer-Pp94f6-t.js";import"./renderer-5pP6mMDw.js";import"./base-radio-t-geqYlD.js";import{c as u}from"./components-oAXBQsxz.js";import{U as p}from"./util-8OTwBtQh.js";import"./jquery-5v7aFUvu.js";import{B as d}from"./blur-input-0MWX_AIX.js";const{InfoTip:s}=u,c={number:{name:"Numbers",forms:"integer, decimal, proper, improper, mixed"},decimal:{name:"Decimals",forms:"decimal"},integer:{name:"Integers",forms:"integer"},rational:{name:"Fractions and mixed numbers",forms:"integer, proper, improper, mixed"},improper:{name:"Improper numbers (no mixed)",forms:"integer, proper, improper"},mixed:{name:"Mixed numbers (no improper)",forms:"integer, proper, mixed"},percent:{name:"Numbers or percents",forms:"integer, decimal, proper, improper, mixed, percent"},pi:{name:"Numbers with pi",forms:"pi"}},l=class l extends o.Component{constructor(){super(...arguments),this.input=o.createRef(),this.handleAnswerChange=n=>{const r=p.firstNumericalParse(n)||0;this.props.onChange({value:r})},this.focus=()=>{var n;return(n=this.input.current)==null||n.focus(),!0},this.serialize=()=>({value:this.props.value,simplify:this.props.simplify,size:this.props.size,inexact:this.props.inexact,maxError:this.props.maxError,answerType:this.props.answerType,rightAlign:this.props.rightAlign})}render(){const n=m.map(c,function(r,a){return e("option",{value:a,children:r.name},a)},this);return i("div",{children:[e("div",{children:i("label",{children:["Correct answer:"," ",e(d,{value:""+this.props.value,onChange:this.handleAnswerChange,ref:this.input})]})}),i("div",{children:[i("label",{children:["Unsimplified answers"," ",i("select",{value:this.props.simplify,onChange:r=>{this.props.onChange({simplify:r.target.value})},children:[e("option",{value:"required",children:"will not be graded"}),e("option",{value:"optional",children:"will be accepted"}),e("option",{value:"enforced",children:"will be marked wrong"})]})]}),i(s,{children:[e("p",{children:'Normally select "will not be graded". This will give the user a message saying the answer is correct but not simplified. The user will then have to simplify it and re-enter, but will not be penalized. (5th grade and anything after)'}),e("p",{children:'Select "will be accepted" only if the user is not expected to know how to simplify fractions yet. (Anything prior to 5th grade)'}),e("p",{children:'Select "will be marked wrong" only if we are specifically assessing the ability to simplify.'})]})]}),i("div",{children:[i("label",{children:[e("input",{type:"checkbox",checked:this.props.inexact,onChange:r=>{this.props.onChange({inexact:r.target.checked})}})," ","Allow inexact answers"]}),i("label",{children:[e("input",{type:"checkbox",style:{visibility:"hidden"}}),"Max error:"," ",e("input",{type:"text",disabled:!this.props.inexact,defaultValue:this.props.maxError,"aria-label":"Max error",onBlur:r=>{const a=""+(p.firstNumericalParse(r.target.value)||0);r.target.value=a,this.props.onChange({maxError:a})}})]})]}),i("div",{children:["Answer type:"," ",e("select",{value:this.props.answerType,onChange:r=>{this.props.onChange({answerType:r.target.value})},"aria-label":"Answer type",children:n}),e(s,{children:e("p",{children:'Use the default "Numbers" unless the answer must be in a specific form (e.g., question is about converting decimals to fractions).'})})]}),i("div",{children:[i("label",{children:["Width"," ",i("select",{value:this.props.size,onChange:r=>{this.props.onChange({size:r.target.value})},children:[e("option",{value:"normal",children:"Normal (80px)"}),e("option",{value:"small",children:"Small (40px)"})]})]}),e(s,{children:e("p",{children:'Use size "Normal" for all text boxes, unless there are multiple text boxes in one line and the answer area is too narrow to fit them.'})})]}),e("div",{children:i("label",{children:[e("input",{type:"checkbox",checked:this.props.rightAlign,onChange:r=>{this.props.onChange({rightAlign:r.target.checked})}})," ","Right alignment"]})})]})}};l.widgetName="input-number",l.defaultProps={value:0,simplify:"required",size:"normal",inexact:!1,maxError:.1,answerType:"number",rightAlign:!1};let t=l;try{t.displayName="InputNumberEditor",t.__docgenInfo={description:"",displayName:"InputNumberEditor",props:{value:{defaultValue:{value:"0"},description:"",name:"value",required:!1,type:{name:"number"}},simplify:{defaultValue:{value:"required"},description:"",name:"simplify",required:!1,type:{name:"enum",value:[{value:'"required"'},{value:'"optional"'},{value:'"enforced"'}]}},size:{defaultValue:{value:"normal"},description:"",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"normal"'}]}},inexact:{defaultValue:{value:"false"},description:"",name:"inexact",required:!1,type:{name:"boolean"}},maxError:{defaultValue:{value:"0.1"},description:"",name:"maxError",required:!1,type:{name:"string | number"}},answerType:{defaultValue:{value:"number"},description:"",name:"answerType",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"decimal"'},{value:'"integer"'},{value:'"rational"'},{value:'"improper"'},{value:'"mixed"'},{value:'"percent"'},{value:'"pi"'}]}},rightAlign:{defaultValue:{value:"false"},description:"",name:"rightAlign",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"",name:"onChange",required:!0,type:{name:'(arg1: { value?: 0 | ParsedValue | undefined; simplify?: "required" | "optional" | "enforced" | undefined; size?: "small" | "normal" | undefined; inexact?: boolean | undefined; maxError?: string | ... 1 more ... | undefined; answerType?: "number" | ... 7 more ... | undefined; rightAlign?: boolean | undefined; }) => ...'}}}}}catch{}export{t as I};
