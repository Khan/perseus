import{a as r,j as e}from"./jsx-runtime-5BUNAZ9W.js";import"./article-renderer-rCLm7fhA.js";import{_ as p}from"./index-default-4_ZsnO94.js";import"./util-hMu2nkBL.js";import"./unit-3x0ZR6Ko.js";import"./version-akiLXZts.js";import"./dependencies-9B_Bv_mA.js";import"./perseus-api-7QXTiCE7.js";import"./multi-renderer-QCPzVA7S.js";import"./hints-renderer-UX03BjI0.js";import"./renderer-BDe3lowH.js";import"./base-radio-SLROWHH4.js";import{c}from"./components-PKIqP9to.js";import"./jquery-5v7aFUvu.js";import"./index-k-0mNqHS.js";import"./i18n-context-3gTlIcWM.js";import{P as i}from"./index-0C4KXdeC.js";import{r as m}from"./index-4g5l5LRQ.js";const{InfoTip:o,PropCheckBox:d,TextListEditor:h}=c,s=class s extends m.Component{constructor(){super(...arguments),this.onLabelChange=(t,a)=>{const l=p.clone(this.props.labels);l[t]=a.target.value,this.props.onChange({labels:l})},this.getSaveWarnings=()=>this.props.left.length!==this.props.right.length?["The two halves of the matcher have different numbers of cards."]:[],this.serialize=()=>p.pick(this.props,"left","right","labels","orderMatters","padding")}render(){return r("div",{className:"perseus-matcher-editor",children:[r("div",{children:[" ","Correct answer:"," ",e(o,{children:e("p",{children:"Enter the correct answers here. The preview on the right will show the cards in a randomized order, which is how the student will see them."})})]}),r("div",{className:"perseus-clearfix",children:[e(h,{options:this.props.left,onChange:(t,a)=>{this.props.onChange({left:t},a)},layout:"vertical"}),e(h,{options:this.props.right,onChange:(t,a)=>{this.props.onChange({right:t},a)},layout:"vertical"})]}),r("span",{children:[" ","Labels:"," ",e(o,{children:e("p",{children:"These are entirely optional."})})]}),r("div",{children:[e("input",{type:"text",defaultValue:this.props.labels[0],onChange:this.onLabelChange.bind(this,0)}),e("input",{type:"text",defaultValue:this.props.labels[1],onChange:this.onLabelChange.bind(this,1)})]}),r("div",{children:[e(d,{label:"Order of the matched pairs matters:",orderMatters:this.props.orderMatters,onChange:this.props.onChange}),r(o,{children:[e("p",{children:"With this option enabled, only the order provided above will be treated as correct. This is useful when ordering is significant, such as in the context of a proof."}),e("p",{children:"If disabled, pairwise matching is sufficient. To make this clear, the left column becomes fixed in the provided order and only the cards in the right column can be moved."})]})]}),r("div",{children:[e(d,{label:"Padding:",padding:this.props.padding,onChange:this.props.onChange}),e(o,{children:e("p",{children:"Padding is good for text, but not needed for images."})})]})]})}};s.propTypes={left:i.array,right:i.array,labels:i.array,orderMatters:i.bool,padding:i.bool},s.widgetName="matcher",s.defaultProps={left:["$x$","$y$","$z$"],right:["$1$","$2$","$3$"],labels:["test","label"],orderMatters:!1,padding:!0};let n=s;n.__docgenInfo={description:"",methods:[{name:"onLabelChange",docblock:null,modifiers:[],params:[{name:"index",optional:!1,type:null},{name:"e",optional:!1,type:null}],returns:null},{name:"getSaveWarnings",docblock:null,modifiers:[],params:[],returns:null},{name:"serialize",docblock:null,modifiers:[],params:[],returns:null}],displayName:"MatcherEditor",props:{left:{defaultValue:{value:'["$x$", "$y$", "$z$"]',computed:!1},description:"",type:{name:"array"},required:!1},right:{defaultValue:{value:'["$1$", "$2$", "$3$"]',computed:!1},description:"",type:{name:"array"},required:!1},labels:{defaultValue:{value:'["test", "label"]',computed:!1},description:"",type:{name:"array"},required:!1},orderMatters:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},padding:{defaultValue:{value:"true",computed:!1},description:"",type:{name:"bool"},required:!1}}};export{n as M};
