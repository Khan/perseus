import"./all-widgets-jOUcstV-.js";import"./phet-simulation-CRP1AVh1.js";import{_ as s}from"./underscore-U-AHniOr.js";import{m}from"./core-widget-registry-2tCIH_GM.js";import"./dependencies-BsVPGK1s.js";import"./perseus-api-DmwU2RjF.js";import"./server-item-renderer-BPjEh1Qz.js";import"./article-renderer-D4HJITCY.js";import"./hints-renderer-TqV6n1QR.js";import"./renderer-DOOqq4LB.js";import"./base-radio-DfLbTTDj.js";import{c as h}from"./components-M2i0BlZK.js";import"./i18n-context-glBZFVwC.js";import"./util-C98KaClM.js";import"./svg-image-lxb6cAXo.js";import"./jquery-CkHB0_Mt.js";import"./index-Dd-cahjY.js";import{C as p}from"./index-DaA-XyhK.js";import{P as a}from"./index-CrGd2QqM.js";import{r as e}from"./index-C6mWTJJr.js";const{InfoTip:n,TextListEditor:d}=h,l=class l extends e.Component{constructor(){super(...arguments),this.onLabelChange=(t,r)=>{const i=s.clone(this.props.labels);i[t]=r.target.value,this.props.onChange({labels:i})},this.getSaveWarnings=()=>this.props.left.length!==this.props.right.length?["The two halves of the matcher have different numbers of cards."]:[],this.serialize=()=>s.pick(this.props,"left","right","labels","orderMatters","padding")}render(){return e.createElement("div",{className:"perseus-matcher-editor"},e.createElement("div",null," ","Correct answer:"," ",e.createElement(n,null,e.createElement("p",null,"Enter the correct answers here. The preview on the right will show the cards in a randomized order, which is how the student will see them."))),e.createElement("div",{className:"perseus-clearfix"},e.createElement(d,{options:this.props.left,onChange:(t,r)=>{this.props.onChange({left:t},r)},layout:"vertical"}),e.createElement(d,{options:this.props.right,onChange:(t,r)=>{this.props.onChange({right:t},r)},layout:"vertical"})),e.createElement("span",null," ","Labels:"," ",e.createElement(n,null,e.createElement("p",null,"These are entirely optional."))),e.createElement("div",null,e.createElement("input",{type:"text",defaultValue:this.props.labels[0],onChange:this.onLabelChange.bind(this,0)}),e.createElement("input",{type:"text",defaultValue:this.props.labels[1],onChange:this.onLabelChange.bind(this,1)})),e.createElement("div",null,e.createElement(p,{label:"Order of the matched pairs matters:",checked:this.props.orderMatters,onChange:t=>{this.props.onChange({orderMatters:t})}}),e.createElement(n,null,e.createElement("p",null,"With this option enabled, only the order provided above will be treated as correct. This is useful when ordering is significant, such as in the context of a proof."),e.createElement("p",null,"If disabled, pairwise matching is sufficient. To make this clear, the left column becomes fixed in the provided order and only the cards in the right column can be moved."))),e.createElement("div",null,e.createElement(p,{label:"Padding:",checked:this.props.padding,onChange:t=>{this.props.onChange({padding:t})}}),e.createElement(n,null,e.createElement("p",null,"Padding is good for text, but not needed for images."))))}};l.propTypes={left:a.array,right:a.array,labels:a.array,orderMatters:a.bool,padding:a.bool},l.widgetName="matcher",l.defaultProps=m.defaultWidgetOptions;let o=l;o.__docgenInfo={description:"",methods:[{name:"onLabelChange",docblock:null,modifiers:[],params:[{name:"index",optional:!1,type:null},{name:"e",optional:!1,type:null}],returns:null},{name:"getSaveWarnings",docblock:null,modifiers:[],params:[],returns:null},{name:"serialize",docblock:null,modifiers:[],params:[],returns:null}],displayName:"MatcherEditor",props:{left:{defaultValue:{value:'["$x$", "$y$", "$z$"]',computed:!1},description:"",type:{name:"array"},required:!1},right:{defaultValue:{value:'["$1$", "$2$", "$3$"]',computed:!1},description:"",type:{name:"array"},required:!1},labels:{defaultValue:{value:'["test", "label"]',computed:!1},description:"",type:{name:"array"},required:!1},orderMatters:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},padding:{defaultValue:{value:"true",computed:!1},description:"",type:{name:"bool"},required:!1}}};export{o as M};
