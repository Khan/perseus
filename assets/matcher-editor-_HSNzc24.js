import{j as e}from"./jsx-runtime-63Ea5SlK.js";import"./article-renderer-ixTRxHTM.js";import"./phet-simulation--DntLPhv.js";import{_ as l}from"./index-default-4_ZsnO94.js";import{m as h}from"./core-widget-registry-uiKfW1Am.js";import"./dependencies-CP7Uh8Kq.js";import"./perseus-api-DO0X8arb.js";import"./server-item-renderer-QWYWnrVU.js";import"./hints-renderer-bbLMg98a.js";import"./renderer-sKOnMOkh.js";import"./base-radio-pX3PPP3a.js";import{c}from"./components-vtvUtHgI.js";import"./i18n-context-dE2bX2K_.js";import"./util-BtPxNFcx.js";import"./svg-image-gIyesq-y.js";import"./jquery-5v7aFUvu.js";import"./index-smZ6iCr_.js";import{C as p}from"./index-DQJhbslN.js";import{P as s}from"./index-o42urCig.js";import{r as m}from"./index-6oxdNXpR.js";const{InfoTip:a,TextListEditor:d}=c,i=class i extends m.Component{constructor(){super(...arguments),this.onLabelChange=(t,r)=>{const n=l.clone(this.props.labels);n[t]=r.target.value,this.props.onChange({labels:n})},this.getSaveWarnings=()=>this.props.left.length!==this.props.right.length?["The two halves of the matcher have different numbers of cards."]:[],this.serialize=()=>l.pick(this.props,"left","right","labels","orderMatters","padding")}render(){return e.jsxs("div",{className:"perseus-matcher-editor",children:[e.jsxs("div",{children:[" ","Correct answer:"," ",e.jsx(a,{children:e.jsx("p",{children:"Enter the correct answers here. The preview on the right will show the cards in a randomized order, which is how the student will see them."})})]}),e.jsxs("div",{className:"perseus-clearfix",children:[e.jsx(d,{options:this.props.left,onChange:(t,r)=>{this.props.onChange({left:t},r)},layout:"vertical"}),e.jsx(d,{options:this.props.right,onChange:(t,r)=>{this.props.onChange({right:t},r)},layout:"vertical"})]}),e.jsxs("span",{children:[" ","Labels:"," ",e.jsx(a,{children:e.jsx("p",{children:"These are entirely optional."})})]}),e.jsxs("div",{children:[e.jsx("input",{type:"text",defaultValue:this.props.labels[0],onChange:this.onLabelChange.bind(this,0)}),e.jsx("input",{type:"text",defaultValue:this.props.labels[1],onChange:this.onLabelChange.bind(this,1)})]}),e.jsxs("div",{children:[e.jsx(p,{label:"Order of the matched pairs matters:",checked:this.props.orderMatters,onChange:t=>{this.props.onChange({orderMatters:t})}}),e.jsxs(a,{children:[e.jsx("p",{children:"With this option enabled, only the order provided above will be treated as correct. This is useful when ordering is significant, such as in the context of a proof."}),e.jsx("p",{children:"If disabled, pairwise matching is sufficient. To make this clear, the left column becomes fixed in the provided order and only the cards in the right column can be moved."})]})]}),e.jsxs("div",{children:[e.jsx(p,{label:"Padding:",checked:this.props.padding,onChange:t=>{this.props.onChange({padding:t})}}),e.jsx(a,{children:e.jsx("p",{children:"Padding is good for text, but not needed for images."})})]})]})}};i.propTypes={left:s.array,right:s.array,labels:s.array,orderMatters:s.bool,padding:s.bool},i.widgetName="matcher",i.defaultProps=h.defaultWidgetOptions;let o=i;o.__docgenInfo={description:"",methods:[{name:"onLabelChange",docblock:null,modifiers:[],params:[{name:"index",optional:!1,type:null},{name:"e",optional:!1,type:null}],returns:null},{name:"getSaveWarnings",docblock:null,modifiers:[],params:[],returns:null},{name:"serialize",docblock:null,modifiers:[],params:[],returns:null}],displayName:"MatcherEditor",props:{left:{defaultValue:{value:'["$x$", "$y$", "$z$"]',computed:!1},description:"",type:{name:"array"},required:!1},right:{defaultValue:{value:'["$1$", "$2$", "$3$"]',computed:!1},description:"",type:{name:"array"},required:!1},labels:{defaultValue:{value:'["test", "label"]',computed:!1},description:"",type:{name:"array"},required:!1},orderMatters:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},padding:{defaultValue:{value:"true",computed:!1},description:"",type:{name:"bool"},required:!1}}};export{o as M};
