import{a as p,j as n,F as D}from"./jsx-runtime-FVsy8kgq.js";import"./util-XcxTwqb0.js";import{e as E}from"./svg-image-Rjw-_QTV.js";import{B as K}from"./choice-E4eyMygy.js";import{V as v}from"./index-6h5t6F0w.js";import{S as N,O as P}from"./answer-choices-vbrLThK4.js";import{S}from"./index-qUyqkRvh.js";import{s as u,c as k}from"./index-deFLJwr4.js";import{L as W,a as q}from"./index-h_CiYGGb.js";import{p as Z}from"./plus-circle-JCxQSzSv.js";import{l as G}from"./index-awljIyHI.js";import{v as h}from"./index-IIMKO4_x.js";import{P as H,L as J}from"./locked-figure-settings-actions-WSW3YvFI.js";import{C as Q}from"./color-select-fOeWuxUj.js";import{L as X}from"./line-stroke-select-ZTaE76uS.js";import{L as Y}from"./line-swatch-57L5JE-q.js";import{L as ee}from"./locked-label-settings-uTnIvSeL.js";import{L as z}from"./locked-point-settings-6Ys-Byq1.js";import{g as oe}from"./util-t3MP3QwD.js";const x="The line cannot have length 0.",B=f=>{var F;const{flags:g,kind:b,points:s,color:L,lineStyle:C="solid",showPoint1:A,showPoint2:I,labels:o,onChangeProps:a,onMove:M,onRemove:R}=f,[c,m]=s,$=`${b.charAt(0).toUpperCase()+b.slice(1)} (${c.coord[0]},
        ${c.coord[1]}), (${m.coord[0]}, ${m.coord[1]})`,y=E(c.coord,m.coord);function T(e,r){const t=[...s];t[r]={...s[r],...e};const d=h.midpoint(s[0].coord,s[1].coord),i=h.midpoint(t[0].coord,t[1].coord),_=[i[0]-d[0],i[1]-d[1]],U=o==null?void 0:o.map((w,te)=>({...w,coord:[w.coord[0]+_[0],w.coord[1]+_[1]]}));a({points:t,labels:U})}function V(e){var t,d;const r=o==null?void 0:o.map(i=>({...i,color:e}));a({color:e,points:[{...c,color:e,labels:(t=c.labels)==null?void 0:t.map(i=>({...i,color:e}))},{...m,color:e,labels:(d=m.labels)==null?void 0:d.map(i=>({...i,color:e}))}],labels:r})}function O(e,r){if(!o)return;const t=[...o];t[r]={...o[r],...e},a({labels:t})}function j(e){if(!o)return;const r=o.filter((t,d)=>d!==e);a({labels:r})}return p(H,{expanded:f.expanded,onToggle:f.onToggle,header:p(v,{style:l.row,children:[n(W,{children:$}),n(S,{size:u.xSmall_8}),n(Y,{color:L,lineStyle:C})]}),children:[p(q,{tag:"label",style:[l.row,l.spaceUnder],children:["kind",n(S,{size:u.xxxSmall_4}),p(N,{selectedValue:b,onChange:e=>a({kind:e}),placeholder:"",children:[n(P,{value:"line",label:"line"}),n(P,{value:"ray",label:"ray"}),n(P,{value:"segment",label:"segment"})]})]}),p(v,{style:l.row,children:[n(Q,{selectedValue:L,onChange:V}),n(S,{size:u.small_12}),n(X,{selectedValue:C,onChange:e=>a({lineStyle:e})})]}),y&&n(q,{style:l.errorText,children:x}),n(z,{flags:g,headerLabel:"Point 1",expanded:!0,showPoint:A,error:y?x:null,...c,onTogglePoint:e=>a({showPoint1:e}),onChangeProps:e=>T(e,0)}),n(z,{flags:g,headerLabel:"Point 2",expanded:!0,showPoint:I,error:y?x:null,...m,onTogglePoint:e=>a({showPoint2:e}),onChangeProps:e=>T(e,1)}),((F=g==null?void 0:g.mafs)==null?void 0:F["locked-line-labels"])&&p(D,{children:[n(v,{style:l.horizontalRule}),o==null?void 0:o.map((e,r)=>n(ee,{...e,expanded:!0,onChangeProps:t=>{O(t,r)},onRemove:()=>{j(r)},containerStyle:l.labelContainer})),n(K,{kind:"tertiary",startIcon:Z,onClick:()=>{const e=[0,-1],r=h.add(h.scale(e,(o==null?void 0:o.length)??0),h.midpoint(s[0].coord,s[1].coord)),t={...oe("label"),coord:r,color:L};a({labels:[...o??[],t]})},style:l.addButton,children:"Add visible label"})]}),n(J,{figureType:f.type,onMove:M,onRemove:R})]})},l=G.StyleSheet.create({row:{display:"flex",flexDirection:"row",alignItems:"center"},spaceUnder:{marginBottom:u.xSmall_8},errorText:{color:k.red},addButton:{alignSelf:"start"},horizontalRule:{marginTop:u.small_12,marginBottom:u.xxxSmall_4,height:1,backgroundColor:k.offBlack16},labelContainer:{backgroundColor:k.white}}),Se=B;B.__docgenInfo={description:"",methods:[],displayName:"LockedLineSettings",props:{flags:{required:!1,tsType:{name:'APIOptions["flags"]',raw:'APIOptions["flags"]'},description:""},showLabelsFlag:{required:!1,tsType:{name:"boolean"},description:""},onMove:{required:!0,tsType:{name:"signature",type:"function",raw:"(movement: LockedFigureSettingsMovementType) => void",signature:{arguments:[{type:{name:"union",raw:`| "back"
| "backward"
| "forward"
| "front"`,elements:[{name:"literal",value:'"back"'},{name:"literal",value:'"backward"'},{name:"literal",value:'"forward"'},{name:"literal",value:'"front"'}]},name:"movement"}],return:{name:"void"}}},description:"Called when a movement button (top, up, down, bottom) is pressed."},onRemove:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when the delete button is pressed."},expanded:{required:!1,tsType:{name:"boolean"},description:"Whether this accordion is expanded."},onToggle:{required:!1,tsType:{name:"signature",type:"function",raw:"(expanded: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"expanded"}],return:{name:"void"}}},description:"Called when the accordion is expanded or collapsed."},onChangeProps:{required:!0,tsType:{name:"signature",type:"function",raw:"(newProps: Partial<LockedFigure>) => void",signature:{arguments:[{type:{name:"Partial",elements:[{name:"LockedFigure"}],raw:"Partial<LockedFigure>"},name:"newProps"}],return:{name:"void"}}},description:"Called when the props (points, color, etc.) are updated."}}};export{Se as L};
