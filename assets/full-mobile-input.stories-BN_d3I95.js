import{j as t,S as C,e as K,r as n,M as j,f as S}from"./iframe-BDfd20el.js";const{action:M}=__STORYBOOK_MODULE_ACTIONS__,_={title:"Math Input/Full Mobile Math Input",parameters:{backgrounds:{default:"light background",values:[{name:"light background",value:"lightgrey",default:!0}]},docs:{description:{component:"An integrated mobile-friendly math input system with a touch keyboard interface for entering mathematical expressions."}}},tags:["!dev"]},T=({keypadElement:e,setKeypadElement:a})=>{const[x,h]=n.useState(""),[o,f]=n.useState(!1),[i,m]=n.useState(!0),[c,g]=n.useState(!0),v=n.useRef(null),y=i?"CDOT":"TIMES";return n.useEffect(()=>{e==null||e.configure({keypadType:o?"EXPRESSION":"FRACTION",extraKeys:o?["x","y","PI","THETA"]:[],times:i},()=>{})},[e,o,i]),t.jsxs("div",{style:{padding:"1rem 2rem"},children:[t.jsxs("div",{children:[t.jsx("div",{children:"NOTE: To properly test the input interaction, you will need to simulate a device using the dev tools. MathInput requires touch events (not click events)."}),t.jsxs("div",{style:{padding:"1rem 0"},children:[t.jsx("button",{onClick:()=>f(!o),children:`Use ${o?"Fraction":"Expression"} Keypad`}),t.jsx("button",{onClick:()=>g(!c),children:`Use ${c?"Legacy":"New"} Keypad`}),t.jsx("button",{onClick:()=>m(!i),children:"Toggle to "+y})]})]}),t.jsx(j,{value:x,ref:v,keypadElement:e,onChange:(s,u)=>{h(s),u==null||u()},onFocus:()=>{e==null||e.activate()},onBlur:()=>{e==null||e.dismiss()},ariaLabel:"Mobile input"}),t.jsx(S,{onElementMounted:s=>{s&&a(s)},onDismiss:()=>{},onAnalyticsEvent:async s=>M("onAnalyticsEvent")(s)})]})};function r(){return t.jsx(C,{children:t.jsx(K.Consumer,{children:({keypadElement:e,setKeypadElement:a})=>t.jsx(T,{keypadElement:e,setKeypadElement:a})})})}r.__docgenInfo={description:"",methods:[],displayName:"Wrapped"};var d,p,l;r.parameters={...r.parameters,docs:{...(d=r.parameters)==null?void 0:d.docs,source:{originalSource:`function Wrapped() {
  return <StatefulKeypadContextProvider>
            <KeypadContext.Consumer>
                {({
        keypadElement,
        setKeypadElement
      }) => <Basic keypadElement={keypadElement} setKeypadElement={setKeypadElement} />}
            </KeypadContext.Consumer>
        </StatefulKeypadContextProvider>;
}`,...(l=(p=r.parameters)==null?void 0:p.docs)==null?void 0:l.source}}};const b=["Wrapped"];export{r as Wrapped,b as __namedExportsOrder,_ as default};
