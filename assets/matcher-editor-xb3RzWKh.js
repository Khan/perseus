import{a as t,j as e}from"./jsx-runtime-FVsy8kgq.js";import"./article-renderer-edV509WX.js";import{_ as p}from"./jquery-yG1GhClm.js";import"./util-F8-MDmsT.js";import"./phet-simulation-LQRU0vOo.js";import"./version-akiLXZts.js";import"./dependencies-8XILypbq.js";import"./perseus-api-mOiZT07d.js";import"./multi-renderer-LpNwEuDA.js";import"./hints-renderer-iwAzXZBl.js";import"./renderer-44HkJ58y.js";import"./base-radio-m5B9SHR4.js";import{c}from"./components-ojLC5Vkn.js";import"./index-0C4KXdeC.js";import"./i18n-context-P7VpLqM1.js";import"./svg-image-QKR8YXWf.js";import"./index-IIMKO4_x.js";import{C as d}from"./index-QCAhLhLD.js";import{P as i}from"./index-k-0mNqHS.js";import{r as m}from"./index-TT1qJ6UJ.js";const{InfoTip:o,TextListEditor:h}=c,s=class s extends m.Component{constructor(){super(...arguments),this.onLabelChange=(r,a)=>{const l=p.clone(this.props.labels);l[r]=a.target.value,this.props.onChange({labels:l})},this.getSaveWarnings=()=>this.props.left.length!==this.props.right.length?["The two halves of the matcher have different numbers of cards."]:[],this.serialize=()=>p.pick(this.props,"left","right","labels","orderMatters","padding")}render(){return t("div",{className:"perseus-matcher-editor",children:[t("div",{children:[" ","Correct answer:"," ",e(o,{children:e("p",{children:"Enter the correct answers here. The preview on the right will show the cards in a randomized order, which is how the student will see them."})})]}),t("div",{className:"perseus-clearfix",children:[e(h,{options:this.props.left,onChange:(r,a)=>{this.props.onChange({left:r},a)},layout:"vertical"}),e(h,{options:this.props.right,onChange:(r,a)=>{this.props.onChange({right:r},a)},layout:"vertical"})]}),t("span",{children:[" ","Labels:"," ",e(o,{children:e("p",{children:"These are entirely optional."})})]}),t("div",{children:[e("input",{type:"text",defaultValue:this.props.labels[0],onChange:this.onLabelChange.bind(this,0)}),e("input",{type:"text",defaultValue:this.props.labels[1],onChange:this.onLabelChange.bind(this,1)})]}),t("div",{children:[e(d,{label:"Order of the matched pairs matters:",checked:this.props.orderMatters,onChange:r=>{this.props.onChange({orderMatters:r})}}),t(o,{children:[e("p",{children:"With this option enabled, only the order provided above will be treated as correct. This is useful when ordering is significant, such as in the context of a proof."}),e("p",{children:"If disabled, pairwise matching is sufficient. To make this clear, the left column becomes fixed in the provided order and only the cards in the right column can be moved."})]})]}),t("div",{children:[e(d,{label:"Padding:",checked:this.props.padding,onChange:r=>{this.props.onChange({padding:r})}}),e(o,{children:e("p",{children:"Padding is good for text, but not needed for images."})})]})]})}};s.propTypes={left:i.array,right:i.array,labels:i.array,orderMatters:i.bool,padding:i.bool},s.widgetName="matcher",s.defaultProps={left:["$x$","$y$","$z$"],right:["$1$","$2$","$3$"],labels:["test","label"],orderMatters:!1,padding:!0};let n=s;n.__docgenInfo={description:"",methods:[{name:"onLabelChange",docblock:null,modifiers:[],params:[{name:"index",optional:!1,type:null},{name:"e",optional:!1,type:null}],returns:null},{name:"getSaveWarnings",docblock:null,modifiers:[],params:[],returns:null},{name:"serialize",docblock:null,modifiers:[],params:[],returns:null}],displayName:"MatcherEditor",props:{left:{defaultValue:{value:'["$x$", "$y$", "$z$"]',computed:!1},description:"",type:{name:"array"},required:!1},right:{defaultValue:{value:'["$1$", "$2$", "$3$"]',computed:!1},description:"",type:{name:"array"},required:!1},labels:{defaultValue:{value:'["test", "label"]',computed:!1},description:"",type:{name:"array"},required:!1},orderMatters:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},padding:{defaultValue:{value:"true",computed:!1},description:"",type:{name:"bool"},required:!1}}};export{n as M};
