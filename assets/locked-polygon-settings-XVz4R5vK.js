import"./underscore-885MUNGo.js";import{o as C,x as T}from"./random-util-9WQRKwFZ.js";import{B as L}from"./index-71P4mDMp.js";import{V as m}from"./index-hw7d7wq0.js";import{S as X,O}from"./answer-choices-d_3j1Q64.js";import{I as y}from"./index-Y1DiWZsM.js";import{S as p,a as Y}from"./index-v_a-r9JG.js";import{c as g,s}from"./index-zRqVZh6A.js";import{L as b,a as S}from"./index-jek-Xksa.js";import{p as E,L as G}from"./locked-figure-aria-E8pDiZ4E.js";import{n as F}from"./no-important-xCWWYXQR.js";import{r as n}from"./index-6oxdNXpR.js";import{C as H,L as J,a as K}from"./locked-label-settings-rChmD9zx.js";import{P as q}from"./trash-bold-ddvyNqRH.js";import{C as Q}from"./color-select-np-kSYkH.js";import{L as Z}from"./labeled-switch-1ooUsBQf.js";import{L as ee}from"./line-stroke-select-5CZ2oR5o.js";import{g as ne,j as te,a as x,b as re}from"./util-xsH2rppG.js";const ae=""+new URL("arrow-fat-down-X5ut-FGw.svg",import.meta.url).href,oe=""+new URL("arrow-fat-left-LxuHjYfJ.svg",import.meta.url).href,le=""+new URL("arrow-fat-right-CxkbbISx.svg",import.meta.url).href,ie=""+new URL("arrow-fat-up-ah2eaaIR.svg",import.meta.url).href,se=""+new URL("minus-circle-9EKbQa8X.svg",import.meta.url).href,A=d=>{const{color:l,fillStyle:u,strokeStyle:w}=d;return n.createElement(m,{"aria-label":`${l}, stroke ${w}, fill ${u}`,style:[P.container,{border:`4px ${w} ${C[l]}`}]},n.createElement(m,{style:[P.innerSquare,{backgroundColor:C[l],opacity:u==="white"?0:T[u]}]}))},P=F.StyleSheet.create({container:{outline:`2px solid ${g.offWhite}`,width:s.large_24,height:s.large_24,backgroundColor:g.white,alignItems:"center",justifyContent:"center"},innerSquare:{width:20,height:20}});A.__docgenInfo={description:"",methods:[],displayName:"PolygonSwatch",props:{color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},fillStyle:{required:!0,tsType:{name:"union",raw:'"none" | "white" | "translucent" | "solid"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"white"'},{name:"literal",value:'"translucent"'},{name:"literal",value:'"solid"'}]},description:""},strokeStyle:{required:!0,tsType:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}]},description:""}}};const $=d=>{const{points:l,color:u,showVertices:w,fillStyle:v,strokeStyle:f,labels:t,ariaLabel:R,expanded:z,onToggle:_,onChangeProps:i,onMove:B,onRemove:I}=d;async function M(){let e=`Polygon${await te(t)} with ${l.length} sides, vertices at `;const o=await Promise.all(l.map(async([h,D])=>{const N=await x(`$${h}$`),W=await x(`$${D}$`);return`${N} comma ${W}`}));e+=o.join(", ");const c=re(u,f,v);return e+=c,e}function U(r){const e={color:r};e.labels=t==null?void 0:t.map(o=>({...o,color:r})),i(e)}function k(r){switch(r){case"up":i({points:l.map(([e,o])=>[e,o+1]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0],e.coord[1]+1]}))});break;case"down":i({points:l.map(([e,o])=>[e,o-1]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0],e.coord[1]-1]}))});break;case"left":i({points:l.map(([e,o])=>[e-1,o]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0]-1,e.coord[1]]}))});break;case"right":i({points:l.map(([e,o])=>[e+1,o]),labels:t==null?void 0:t.map(e=>({...e,coord:[e.coord[0]+1,e.coord[1]]}))});break}}function V(r,e){if(!t)return;const o=[...t];o[e]={...t[e],...r},i({labels:o})}function j(r){if(!t)return;const e=t.filter((o,c)=>c!==r);i({labels:e})}return n.createElement(q,{expanded:z,onToggle:_,header:n.createElement(m,{style:a.row},n.createElement(b,null,`Polygon, ${l.length} sides`),n.createElement(p,{size:s.xSmall_8}),n.createElement(A,{color:u,fillStyle:v,strokeStyle:f}))},n.createElement(m,{style:[a.row,a.spaceUnder]},n.createElement(Q,{selectedValue:u,onChange:U}),n.createElement(p,{size:s.medium_16}),n.createElement(S,{tag:"label",style:[a.row,a.truncatedWidth]},"fill",n.createElement(p,{size:s.xxSmall_6}),n.createElement(X,{selectedValue:v,onChange:r=>i({fillStyle:r}),placeholder:""},Object.keys(T).map(r=>n.createElement(O,{key:r,value:r,label:r}))))),n.createElement(ee,{selectedValue:f,onChange:r=>i({strokeStyle:r})}),n.createElement(Z,{label:"show vertices",checked:w,onChange:r=>i({showVertices:r}),style:a.spaceUnder}),n.createElement(q,{header:n.createElement(b,null,"Points"),expanded:!0,containerStyle:a.pointAccordionContainer,panelStyle:a.pointAccordionPanel},l.map((r,e)=>{const o=String.fromCharCode(65+e);return n.createElement(m,{key:`locked-polygon-point-index-${e}`,style:[a.row,a.spaceUnder]},n.createElement(b,null,`${o}:`),n.createElement(p,{size:s.medium_16}),n.createElement(H,{coord:r,labels:["x","y"],onChange:c=>{const h=[...l];h[e]=c,d.onChangeProps({points:h})}}),l.length>3&&n.createElement(y,{"aria-label":`Delete polygon point ${o}`,icon:se,color:"destructive",onClick:()=>{const c=[...l];c.splice(e,1),d.onChangeProps({points:c})},style:a.icon}))}),n.createElement(m,{style:[a.row,a.polygonActionsContainer]},n.createElement(L,{kind:"tertiary",startIcon:E,onClick:()=>{d.onChangeProps({points:[...l,[0,0]]})}},"Add point"),n.createElement(Y,null),n.createElement(m,{style:a.movementButtonsContainer},n.createElement(y,{"aria-label":"Move polygon up",style:a.iconButton,size:"small",icon:ie,onClick:()=>k("up")}),n.createElement(m,{style:a.row},n.createElement(y,{"aria-label":"Move polygon left",style:a.iconButton,size:"small",icon:oe,onClick:()=>k("left")}),n.createElement(y,{"aria-label":"Move polygon down",style:a.iconButton,size:"small",icon:ae,onClick:()=>k("down")}),n.createElement(y,{"aria-label":"Move polygon right",style:a.iconButton,size:"small",icon:le,onClick:()=>k("right")}))))),n.createElement(p,{size:s.small_12}),n.createElement(m,{style:a.horizontalRule}),n.createElement(G,{ariaLabel:R,getPrepopulatedAriaLabel:M,onChangeProps:r=>{i(r)}}),n.createElement(p,{size:s.xxxSmall_4}),n.createElement(m,{style:a.horizontalRule}),n.createElement(p,{size:s.small_12}),n.createElement(S,null,"Visible labels"),t==null?void 0:t.map((r,e)=>n.createElement(J,{...r,key:e,expanded:!0,onChangeProps:o=>{V(o,e)},onRemove:()=>{j(e)},containerStyle:a.labelContainer})),n.createElement(L,{kind:"tertiary",startIcon:E,onClick:()=>{const r={...ne("label"),coord:[l[0][0],l[0][1]-((t==null?void 0:t.length)??0)],color:u};i({labels:[...t??[],r]})},style:a.addButton},"Add visible label"),n.createElement(K,{figureType:d.type,onMove:B,onRemove:I}))},a=F.StyleSheet.create({row:{display:"flex",flexDirection:"row",alignItems:"center"},pointAccordionContainer:{backgroundColor:g.white},pointAccordionPanel:{alignItems:"start"},icon:{marginInlineStart:s.xxxSmall_4},polygonActionsContainer:{width:"100%"},iconButton:{margin:0},movementButtonsContainer:{display:"flex",flexDirection:"column",alignItems:"center",minWidth:"fit-content"},spaceUnder:{marginBottom:s.xSmall_8},truncatedWidth:{minWidth:0},addButton:{alignSelf:"start"},labelContainer:{backgroundColor:g.white},horizontalRule:{height:1,backgroundColor:g.offBlack16}}),xe=$;$.__docgenInfo={description:"",methods:[],displayName:"LockedPolygonSettings",props:{onMove:{required:!0,tsType:{name:"signature",type:"function",raw:"(movement: LockedFigureSettingsMovementType) => void",signature:{arguments:[{type:{name:"union",raw:`| "back"
| "backward"
| "forward"
| "front"`,elements:[{name:"literal",value:'"back"'},{name:"literal",value:'"backward"'},{name:"literal",value:'"forward"'},{name:"literal",value:'"front"'}]},name:"movement"}],return:{name:"void"}}},description:"Called when a movement button (top, up, down, bottom) is pressed."},onRemove:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when the delete button is pressed."},expanded:{required:!1,tsType:{name:"boolean"},description:"Whether this accordion is expanded."},onToggle:{required:!1,tsType:{name:"signature",type:"function",raw:"(expanded: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"expanded"}],return:{name:"void"}}},description:"Called when the accordion is expanded or collapsed."},type:{required:!0,tsType:{name:"literal",value:'"polygon"'},description:""},points:{required:!0,tsType:{name:"ReadonlyArray",elements:[{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}]}],raw:"ReadonlyArray<Coord>"},description:""},color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},showVertices:{required:!0,tsType:{name:"boolean"},description:""},fillStyle:{required:!0,tsType:{name:"union",raw:'"none" | "white" | "translucent" | "solid"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"white"'},{name:"literal",value:'"translucent"'},{name:"literal",value:'"solid"'}]},description:""},strokeStyle:{required:!0,tsType:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}]},description:""},labels:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]"},description:""},ariaLabel:{required:!1,tsType:{name:"string"},description:""},onChangeProps:{required:!0,tsType:{name:"signature",type:"function",raw:"(newProps: Partial<LockedPolygonType>) => void",signature:{arguments:[{type:{name:"Partial",elements:[{name:"signature",type:"object",raw:`{
    type: "polygon";
    points: ReadonlyArray<Coord>;
    color: LockedFigureColor;
    showVertices: boolean;
    fillStyle: LockedFigureFillType;
    strokeStyle: LockedLineStyle;
    labels?: LockedLabelType[];
    ariaLabel?: string;
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"polygon"',required:!0}},{key:"points",value:{name:"ReadonlyArray",elements:[{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}],raw:"ReadonlyArray<Coord>",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"showVertices",value:{name:"boolean",required:!0}},{key:"fillStyle",value:{name:"union",raw:'"none" | "white" | "translucent" | "solid"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"white"'},{name:"literal",value:'"translucent"'},{name:"literal",value:'"solid"'}],required:!0}},{key:"strokeStyle",value:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}],required:!0}},{key:"labels",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]",required:!1}},{key:"ariaLabel",value:{name:"string",required:!1}}]}}],raw:"Partial<LockedPolygonType>"},name:"newProps"}],return:{name:"void"}}},description:"Called when the props (coords, color, etc.) are updated."}}};export{xe as L};
