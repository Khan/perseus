import{j as d}from"./jsx-runtime-5BUNAZ9W.js";import{e as h,U as f,K as c}from"./util-d6C3c8a_.js";import{c as y}from"./index-dnMhQZ-1.js";import{$ as g}from"./jquery-5v7aFUvu.js";import{P as s}from"./index-0C4KXdeC.js";import{r as V}from"./index-4g5l5LRQ.js";import{R as n}from"./index-jmm5gWkb.js";import{_ as o}from"./index-default-4_ZsnO94.js";import{P as v}from"./i18n-context-0unq6qj2.js";const{firstNumericalParse:u,captureScratchpadTouchStart:k}=f,p=c.toNumericString,_=c.getNumericFormat,a=class a extends V.Component{constructor(){super(...arguments),this.state={format:this.props.format},this.getValue=()=>this.parseInputValue(n.findDOMNode(this.refs.input).value),this.getStringValue=()=>n.findDOMNode(this.refs.input).value.toString(),this.parseInputValue=e=>{if(e===""){const l=this.props.placeholder;return o.isFinite(l)?+l:null}const t=u(e,this.context.strings);return o.isFinite(t)?t:this.props.value},this.focus=()=>{n.findDOMNode(this.refs.input).focus(),this._handleFocus()},this.blur=()=>{n.findDOMNode(this.refs.input).blur(),this._handleBlur()},this.setSelectionRange=(e,t)=>{n.findDOMNode(this).setSelectionRange(e,t)},this.getSelectionStart=()=>n.findDOMNode(this).selectionStart,this.getSelectionEnd=()=>n.findDOMNode(this).selectionEnd,this._checkValidity=e=>{if(e==null)return!0;const t=u(e,this.context.strings),l=this.props.checkValidity;return o.isFinite(t)&&l(t)},this._handleChange=e=>{const t=e.target.value,l=this.parseInputValue(t),r=_(t);this.props.onChange(l),r&&(this.props.onFormatChange(l,r),this.setState({format:r}))},this._handleFocus=()=>{this.props.onFocus&&this.props.onFocus()},this._handleBlur=e=>{e&&e.type==="keypress"&&e.keyCode!==13||(this._setValue(this.props.value,this.state.format),this.props.onBlur&&this.props.onBlur())},this._onKeyDown=e=>{if(this.props.onKeyDown&&this.props.onKeyDown(e),!this.props.useArrowKeys||!o.contains(["ArrowUp","ArrowDown"],e.key))return;let t=this.getValue();t===Math.floor(t)&&(e.key==="ArrowUp"?t=t+1:e.key==="ArrowDown"&&(t=t-1),this._checkValidity(t)&&this.props.onChange(t))},this._setValue=(e,t)=>{g(n.findDOMNode(this.refs.input)).val(p(e,t))}}render(){let e=y({"number-input":!0,"invalid-input":!this._checkValidity(this.props.value),mini:this.props.size==="mini",small:this.props.size==="small",normal:this.props.size==="normal"});this.props.className!=null&&(e=e+" "+this.props.className);const{onFormatChange:t,checkValidity:l,useArrowKeys:r,...m}=this.props;return d("input",{...m,className:e,type:"text",ref:"input",onChange:this._handleChange,onFocus:this._handleFocus,onBlur:this._handleBlur,onKeyPress:this._handleBlur,onKeyDown:this._onKeyDown,onTouchStart:k,defaultValue:p(this.props.value,this.state.format),value:void 0})}componentDidUpdate(e){h(this.getValue(),this.props.value)||this._setValue(this.props.value,this.state.format)}};a.contextType=v,a.propTypes={value:s.number,format:s.string,placeholder:s.oneOfType([s.string,s.number]),onChange:s.func.isRequired,onFormatChange:s.func,checkValidity:s.func,size:s.string,label:s.oneOf(["put your labels outside your inputs!"])},a.defaultProps={value:null,placeholder:null,format:null,onFormatChange:()=>null,checkValidity:()=>!0,useArrowKeys:!1};let i=a;i.__docgenInfo={description:"",methods:[{name:"getValue",docblock:null,modifiers:[],params:[],returns:null},{name:"getStringValue",docblock:null,modifiers:[],params:[],returns:null},{name:"parseInputValue",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:null}],returns:null},{name:"focus",docblock:null,modifiers:[],params:[],returns:null},{name:"blur",docblock:null,modifiers:[],params:[],returns:null},{name:"setSelectionRange",docblock:null,modifiers:[],params:[{name:"selectionStart",optional:!1,type:null},{name:"selectionEnd",optional:!1,type:null}],returns:null},{name:"getSelectionStart",docblock:null,modifiers:[],params:[],returns:null},{name:"getSelectionEnd",docblock:null,modifiers:[],params:[],returns:null},{name:"_checkValidity",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:null}],returns:null},{name:"_handleChange",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:null}],returns:null},{name:"_handleFocus",docblock:null,modifiers:[],params:[],returns:null},{name:"_handleBlur",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:null}],returns:null},{name:"_onKeyDown",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:null}],returns:null},{name:"_setValue",docblock:null,modifiers:[],params:[{name:"val",optional:!1,type:null},{name:"format",optional:!1,type:null}],returns:null}],displayName:"NumberInput",props:{value:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"number"},required:!1},placeholder:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1},format:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"string"},required:!1},onFormatChange:{defaultValue:{value:"() => null",computed:!1},description:"",type:{name:"func"},required:!1},checkValidity:{defaultValue:{value:"() => true",computed:!1},description:"",type:{name:"func"},required:!1},useArrowKeys:{defaultValue:{value:"false",computed:!1},required:!1},onChange:{description:"",type:{name:"func"},required:!0},size:{description:"",type:{name:"string"},required:!1},label:{description:"",type:{name:"enum",value:[{value:'"put your labels outside your inputs!"',computed:!1}]},required:!1}}};export{i as N};
