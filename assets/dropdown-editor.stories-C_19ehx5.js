import{j as m}from"./iframe-BxY6-TkQ.js";import{E as p}from"./editor-page-with-storybook-preview-siIvjA_I.js";import{c,r as d}from"./register-all-widgets-and-editors-for-testing-BXl4u6X6.js";import"./changeable-lVrmJTcF.js";import"./article-renderer-C4HWfxjq.js";import"./server-item-renderer-CSu13Qsq.js";import"./hints-renderer-BqEsfExB.js";import"./content-preview-DgiuKhaz.js";import"./editor-page-BGB0-D53.js";import"./components-C7QaUjOu.js";import"./viewport-resizer-Cv7WHn7X.js";import"./image-widget-generator-BkbJOfbU.js";import"./tex-error-view-EdeL6KLk.js";import"./item-extras-editor-CGKh1tAp.js";import"./preview-panel-DduoDjrw.js";import"./editor-jsonify-bYBcMVX5.js";import"./blur-input-dKjy86m3.js";import"./free-response-editor-COwVu2jT.js";import"./input-number-editor-Dybsii9Z.js";import"./Popper-CPVRWjVK.js";import"./label-image-editor-DTH_fW7P.js";import"./form-wrapped-text-field-BkWD3wYV.js";import"./global-colors-DSS4FaUr.js";import"./answer-choices-BfzOC0h-.js";import"./behavior-DGxfSWAG.js";import"./question-markers-CpUIBPHd.js";import"./marker-DZfyZc4R.js";import"./select-image-CT1tSffD.js";import"./matcher-editor-MrV3hN5z.js";import"./number-line-editor-D0zyiUeb.js";import"./phet-simulation-editor-DQ58OY72.js";import"./plotter-editor-Bz2NUgnD.js";import"./python-program-editor-BFB0Pr0V.js";import"./sorter-editor-D6NI_UML.js";const g={content:"The total number of boxes the forklift can carry is [[â˜ƒ dropdown 1]] $60$.",images:{},widgets:{"dropdown 1":{type:"dropdown",alignment:"default",static:!1,graded:!0,options:{static:!1,placeholder:"greater/less than or equal to",choices:[{content:"greater than or equal to",correct:!1},{content:"less than or equal to",correct:!0}]},version:{major:0,minor:0}}}},{action:l}=__STORYBOOK_MODULE_ACTIONS__;d();const H={title:"Widgets/Dropdown/Editor Demo",component:c,tags:["!dev"]},o={args:{onChange:l("onChange")}},t={render:()=>m.jsx(p,{question:g})};var r,e,i;o.parameters={...o.parameters,docs:{...(r=o.parameters)==null?void 0:r.docs,source:{originalSource:`{
  args: {
    onChange: action("onChange")
  }
}`,...(i=(e=o.parameters)==null?void 0:e.docs)==null?void 0:i.source}}};var a,s,n;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`{
  render: (): React.ReactElement => <EditorPageWithStorybookPreview question={question} />
}`,...(n=(s=t.parameters)==null?void 0:s.docs)==null?void 0:n.source}}};const J=["Default","WithinEditorPage"];export{o as Default,t as WithinEditorPage,J as __namedExportsOrder,H as default};
