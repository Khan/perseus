import{j as f}from"./jsx-runtime-BGVbfQ2Z.js";import{e as d,U as m,K as u}from"./util-EDQcR2F7.js";import{c as y}from"./index-awCzqCwC.js";import{$ as g}from"./jquery-5v7aFUvu.js";import{P as e}from"./index-tvtfaFq4.js";import{r as _}from"./index-qhcEwEpg.js";import{R as r}from"./index-E09jvG0x.js";import{_ as a}from"./index-default-4_ZsnO94.js";import{P as V}from"./i18n-context-9-s9cJ--.js";const{firstNumericalParse:h,captureScratchpadTouchStart:N}=m,p=u.toNumericString,v=u.getNumericFormat,o=class o extends _.Component{constructor(){super(...arguments),this.state={format:this.props.format},this.getValue=()=>this.parseInputValue(r.findDOMNode(this.refs.input).value),this.getStringValue=()=>r.findDOMNode(this.refs.input).value.toString(),this.parseInputValue=t=>{if(t===""){const i=this.props.placeholder;return a.isFinite(i)?+i:null}const s=h(t,this.context.strings);return a.isFinite(s)?s:this.props.value},this.focus=()=>{r.findDOMNode(this.refs.input).focus(),this._handleFocus()},this.blur=()=>{r.findDOMNode(this.refs.input).blur(),this._handleBlur()},this.setSelectionRange=(t,s)=>{r.findDOMNode(this).setSelectionRange(t,s)},this.getSelectionStart=()=>r.findDOMNode(this).selectionStart,this.getSelectionEnd=()=>r.findDOMNode(this).selectionEnd,this._checkValidity=t=>{if(t==null)return!0;const s=h(t,this.context.strings),i=this.props.checkValidity;return a.isFinite(s)&&i(s)},this._handleChange=t=>{const s=t.target.value,i=this.parseInputValue(s),n=v(s);this.props.onChange(i),n&&(this.props.onFormatChange(i,n),this.setState({format:n}))},this._handleFocus=()=>{this.props.onFocus&&this.props.onFocus()},this._handleBlur=t=>{t&&t.type==="keypress"&&t.keyCode!==13||(this._setValue(this.props.value,this.state.format),this.props.onBlur&&this.props.onBlur())},this._onKeyDown=t=>{if(this.props.onKeyDown&&this.props.onKeyDown(t),!this.props.useArrowKeys||!a.contains(["ArrowUp","ArrowDown"],t.key))return;let s=this.getValue();s===Math.floor(s)&&(t.key==="ArrowUp"?s=s+1:t.key==="ArrowDown"&&(s=s-1),this._checkValidity(s)&&this.props.onChange(s))},this._setValue=(t,s)=>{g(r.findDOMNode(this.refs.input)).val(p(t,s))}}render(){let t=y({"number-input":!0,"invalid-input":!this._checkValidity(this.props.value),mini:this.props.size==="mini",small:this.props.size==="small",normal:this.props.size==="normal"});this.props.className!=null&&(t=t+" "+this.props.className);const{onFormatChange:s,checkValidity:i,useArrowKeys:n,...c}=this.props;return f("input",{...c,className:t,type:"text",ref:"input",onChange:this._handleChange,onFocus:this._handleFocus,onBlur:this._handleBlur,onKeyPress:this._handleBlur,onKeyDown:this._onKeyDown,onTouchStart:N,defaultValue:p(this.props.value,this.state.format),value:void 0})}componentDidUpdate(t){d(this.getValue(),this.props.value)||this._setValue(this.props.value,this.state.format)}};o.contextType=V,o.propTypes={value:e.number,format:e.string,placeholder:e.oneOfType([e.string,e.number]),onChange:e.func.isRequired,onFormatChange:e.func,checkValidity:e.func,size:e.string,label:e.oneOf(["put your labels outside your inputs!"])},o.defaultProps={value:null,placeholder:null,format:null,onFormatChange:()=>null,checkValidity:()=>!0,useArrowKeys:!1};let l=o;try{l.displayName="NumberInput",l.__docgenInfo={description:"",displayName:"NumberInput",props:{}}}catch{}export{l as N};
