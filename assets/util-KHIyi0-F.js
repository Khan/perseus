import"./util-KY8kJaBW.js";import"./jquery-yG1GhClm.js";import{l as x,s as P}from"./svg-image-UfCByHtE.js";import{g as S,b as f,e as F,f as h,h as w,i as A,j as T,k,l as q}from"./article-renderer-4IRFaiMP.js";import"./version-akiLXZts.js";import"./dependencies-9B_Bv_mA.js";import"./perseus-api-GqFoxb6z.js";import"./multi-renderer-bTBM95Ap.js";import"./hints-renderer-q11RVp2Y.js";import"./renderer-pli2TMa5.js";import"./base-radio-zkDiNGbB.js";import"./button-group-KR3umc1e.js";import"./graph-VKYZ1zR1.js";import"./hud-CJYktPgf.js";import"./icon-TA3bBVIW.js";import"./index-8nUh1h5D.js";import"./inline-icon-QIU9thzn.js";import"./math-input-7B2jEM5H.js";import"./multi-button-group-AxfQn4Cq.js";import"./number-input-_vmR2dDD.js";import"./range-input-W6BaCFKq.js";import"./text-input-wkUsDgzz.js";import"./text-list-editor--7RKQsFY.js";import"./i18n-context-SHL040F7.js";import{w as b}from"./index-J2t_5nK1.js";function tt(t){t.focus({preventScroll:!0})}const i="grayH";function y(t){switch(t){case"point":return{type:"point",coord:[0,0],color:i,filled:!0};case"line":return{type:"line",kind:"line",points:[y("point"),{...y("point"),coord:[2,2]}],color:i,lineStyle:"solid",showPoint1:!1,showPoint2:!1};case"vector":return{type:"vector",points:[[0,0],[2,2]],color:i};case"ellipse":return{type:"ellipse",center:[0,0],radius:[1,1],angle:0,color:i,fillStyle:"none",strokeStyle:"solid"};case"polygon":return{type:"polygon",points:[[0,2],[-1,0],[1,0]],color:i,showVertices:!1,fillStyle:"none",strokeStyle:"solid"};case"function":return{type:"function",color:i,strokeStyle:"solid",equation:"x^2",directionalAxis:"x"};default:throw new b(t)}}function ot(t){return t/180*Math.PI}function et(t){return t/Math.PI*180}function rt(t,o,e){switch(t.type){case"linear":case"ray":return q({...t,startCoords:void 0},o,e);case"segment":return k({...t,startCoords:void 0},o,e);case"linear-system":return T({...t,startCoords:void 0},o,e);case"circle":const r=A({...t,startCoords:void 0}),n=x(P(r.radiusPoint,r.center));return{center:r.center,radius:n};case"sinusoid":return w({...t,startCoords:void 0},o,e);case"quadratic":return h({...t,startCoords:void 0},o,e);case"point":return F({...t,startCoords:void 0},o,e);case"polygon":return f({...t,startCoords:void 0},o,e);case"angle":return S({graph:{...t,startCoords:void 0},range:o,step:e});default:return}}const nt=t=>{const o=t[0],e=t[1],r=e[1]-o[1],n=Math.PI/(2*(e[0]-o[0])),s=o[0]*n,c=o[1];return"y = "+r.toFixed(3)+"sin("+n.toFixed(3)+"x - "+s.toFixed(3)+") + "+c.toFixed(3)},st=t=>{const o=t[0],e=t[1],r=t[2],n=(o[0]-e[0])*(o[0]-r[0])*(e[0]-r[0]);if(n===0)return"Division by zero error";const s=(r[0]*(e[1]-o[1])+e[0]*(o[1]-r[1])+o[0]*(r[1]-e[1]))/n,c=(r[0]*r[0]*(o[1]-e[1])+e[0]*e[0]*(r[1]-o[1])+o[0]*o[0]*(e[1]-r[1]))/n,d=(e[0]*r[0]*(e[0]-r[0])*o[1]+r[0]*o[0]*(r[0]-o[0])*e[1]+o[0]*e[0]*(o[0]-e[0])*r[1])/n;return"y = "+s.toFixed(3)+"x^2 + "+c.toFixed(3)+"x + "+d.toFixed(3)},C=(t,o)=>{const e=t[0]-o[0],r=t[1]-o[1];return(180+Math.atan2(-r,-e)*180/Math.PI+360)%360},it=t=>{const[o,e,r]=t;return`${(C(r,e)-C(o,e)).toFixed(0)}Â° angle at (${e[0]}, ${e[1]})`},ct=(t,o)=>{var u,a,l,p,m;const e=["linear","linear-system","ray","segment","circle"],r=["sinusoid","quadratic"],n=(u=t==null?void 0:t.mafs)==null?void 0:u["start-coords-ui-phase-1"],s=(a=t==null?void 0:t.mafs)==null?void 0:a["start-coords-ui-phase-2"],c=(l=t==null?void 0:t.mafs)==null?void 0:l["start-coords-ui-point"],d=(p=t==null?void 0:t.mafs)==null?void 0:p["start-coords-ui-polygon"],v=(m=t==null?void 0:t.mafs)==null?void 0:m["start-coords-ui-angle"];return!!(n&&e.includes(o.type)||s&&r.includes(o.type)||v&&o.type==="angle"||c&&o.type==="point"&&o.numPoints!=="unlimited"||d&&o.type==="polygon"&&o.numSides!=="unlimited"&&(o.snapTo==="grid"||o.snapTo===void 0))};export{it as a,st as b,nt as c,ot as d,rt as e,tt as f,y as g,et as r,ct as s};
