import{j as d}from"./jsx-runtime-BGVbfQ2Z.js";import{e as f,U as m,K as u}from"./util-HWMzrHku.js";import{c as y}from"./index-awCzqCwC.js";import{$ as g}from"./jquery-5v7aFUvu.js";import{P as s}from"./index-tvtfaFq4.js";import{r as _}from"./index-qhcEwEpg.js";import{R as r}from"./index-E09jvG0x.js";import{_ as n}from"./index-default-4_ZsnO94.js";const{firstNumericalParse:p,captureScratchpadTouchStart:N}=m,h=u.toNumericString,V=u.getNumericFormat,l=class l extends _.Component{constructor(){super(...arguments),this.state={format:this.props.format},this.getValue=()=>this.parseInputValue(r.findDOMNode(this.refs.input).value),this.getStringValue=()=>r.findDOMNode(this.refs.input).value.toString(),this.parseInputValue=t=>{if(t===""){const i=this.props.placeholder;return n.isFinite(i)?+i:null}const e=p(t);return n.isFinite(e)?e:this.props.value},this.focus=()=>{r.findDOMNode(this.refs.input).focus(),this._handleFocus()},this.blur=()=>{r.findDOMNode(this.refs.input).blur(),this._handleBlur()},this.setSelectionRange=(t,e)=>{r.findDOMNode(this).setSelectionRange(t,e)},this.getSelectionStart=()=>r.findDOMNode(this).selectionStart,this.getSelectionEnd=()=>r.findDOMNode(this).selectionEnd,this._checkValidity=t=>{if(t==null)return!0;const e=p(t),i=this.props.checkValidity;return n.isFinite(e)&&i(e)},this._handleChange=t=>{const e=t.target.value,i=this.parseInputValue(e),o=V(e);this.props.onChange(i),o&&(this.props.onFormatChange(i,o),this.setState({format:o}))},this._handleFocus=()=>{this.props.onFocus&&this.props.onFocus()},this._handleBlur=t=>{t&&t.type==="keypress"&&t.keyCode!==13||(this._setValue(this.props.value,this.state.format),this.props.onBlur&&this.props.onBlur())},this._onKeyDown=t=>{if(this.props.onKeyDown&&this.props.onKeyDown(t),!this.props.useArrowKeys||!n.contains(["ArrowUp","ArrowDown"],t.key))return;let e=this.getValue();e===Math.floor(e)&&(t.key==="ArrowUp"?e=e+1:t.key==="ArrowDown"&&(e=e-1),this._checkValidity(e)&&this.props.onChange(e))},this._setValue=(t,e)=>{g(r.findDOMNode(this.refs.input)).val(h(t,e))}}render(){let t=y({"number-input":!0,"invalid-input":!this._checkValidity(this.props.value),mini:this.props.size==="mini",small:this.props.size==="small",normal:this.props.size==="normal"});this.props.className!=null&&(t=t+" "+this.props.className);const{onFormatChange:e,checkValidity:i,useArrowKeys:o,...c}=this.props;return d("input",{...c,className:t,type:"text",ref:"input",onChange:this._handleChange,onFocus:this._handleFocus,onBlur:this._handleBlur,onKeyPress:this._handleBlur,onKeyDown:this._onKeyDown,onTouchStart:N,defaultValue:h(this.props.value,this.state.format),value:void 0})}componentDidUpdate(t){f(this.getValue(),this.props.value)||this._setValue(this.props.value,this.state.format)}};l.propTypes={value:s.number,format:s.string,placeholder:s.oneOfType([s.string,s.number]),onChange:s.func.isRequired,onFormatChange:s.func,checkValidity:s.func,size:s.string,label:s.oneOf(["put your labels outside your inputs!"])},l.defaultProps={value:null,placeholder:null,format:null,onFormatChange:()=>null,checkValidity:()=>!0,useArrowKeys:!1};let a=l;try{a.displayName="NumberInput",a.__docgenInfo={description:"",displayName:"NumberInput",props:{}}}catch{}export{a as N};
