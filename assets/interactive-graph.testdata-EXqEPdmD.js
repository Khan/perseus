import{i as e}from"./interactive-graph-question-builder-7fsMMH95.js";const s=e().withContent(`**Drag the vertex of the angle to place the vertex at point $\\text{A}$.**  

**Drag another point on the angle to make one of the rays go through point $\\text{B}$.**

**Make the other ray go through one of the unlabeled black points to create an acute angle.**  
*The arc symbol near the vertex indicates the angle being measured.*

[[☃ interactive-graph 1]]`).withBackgroundImage("https://ka-perseus-graphie.s3.amazonaws.com/807ea77cf7031c1b9a45694083f05b5e09b01946.png",400,400,{bottom:0,left:0,scale:1}).withMarkings("none").withAngle({allowReflexAngles:!1,angleOffsetDeg:1,coords:[[2.2059851900220853,2.2059851900220853],[-2,-2],[-4.973144353700384,5.004289159600586]],snapDegrees:4}).build();e().withAngle().build();const d=e().withCircle({center:[-2,-4],radius:2}).build();e().withCircle().build();const r=e().withLinear({coords:[[-1,1],[0,-2]]}).build();e().withLinear().build();const l=e().withLinearSystem({coords:[[[-7,7],[0,-2]],[[-3,-7],[7,-3]]]}).build();e().withLinearSystem().build();const n=e().withContent(`We want to find the zeros of this polynomial:

$p(x)=x(2x+5)(x+1)$

**Plot all the zeros ($x$-intercepts) of the polynomial in the interactive graph.**

[[☃ interactive-graph 1]]`).withBackgroundImage("web+graphie://ka-perseus-graphie.s3.amazonaws.com/9e825947f778170369f22da5f87239cbf4c1ebe3",425,425).withMarkings("none").withGridStep(.5,.5).withSnapStep(.5,.5).withTickStep(1,1).withXRange(-4,4).withYRange(-4,4).withPoints("unlimited",{coords:[[0,0],[-2.5,0],[-1,0]]}).build();e().withPoints(1).build();const h=e().withPoints(2,{startCoords:[[0,0],[2,2]]}).build(),o=e().withContent(`**Sides shown** Drag the vertices of the triangle below to draw a right triangle with side lengths $3$, $4$, and $5$. 
[[☃ interactive-graph 1]] 
`).withGridStep(.5,.5).withSnapStep(.25,.25).withTickStep(.5,.5).withMarkings("none").withXRange(-1,6).withYRange(-1,6).withPolygon("grid",{match:"congruent",numSides:3,showSides:!0,coords:[[3.5,2],[3.5,5],[-.5,2]]}).build();e().withContent(`**Angles shown** Drag the vertices of the triangle below to draw a right triangle with side lengths $3$, $4$, and $5$. 
[[☃ interactive-graph 1]] 
`).withGridStep(.5,.5).withSnapStep(.25,.25).withTickStep(.5,.5).withMarkings("none").withXRange(-1,6).withYRange(-1,6).withPolygon("grid",{match:"congruent",numSides:3,showAngles:!0,coords:[[3.5,2],[3.5,5],[-.5,2]]}).build();e().withContent(`**Example of snapTo set to \`angles\`.** 
 Drag the vertices of the triangle below to draw a right triangle with side lengths $3$, $4$, and $5$. 
[[☃ interactive-graph 1]] 
`).withGridStep(.5,.5).withSnapStep(.25,.25).withTickStep(.5,.5).withMarkings("none").withXRange(-1,6).withYRange(-1,6).withPolygon("angles",{match:"congruent",numSides:3,showSides:!0,showAngles:!0,coords:[[3.5,2],[3.5,5],[-.5,2]]}).build();e().withContent(`**Polygon with angles and many sides** 
[[☃ interactive-graph 1]] 
`).withGridStep(.5,.5).withSnapStep(.25,.25).withTickStep(.5,.5).withMarkings("none").withXRange(-1,6).withYRange(-1,6).withPolygon("grid",{match:"congruent",numSides:9,showSides:!0,showAngles:!0}).build();e().withContent(`**Polygon with angles and four sides** 
[[☃ interactive-graph 1]] 
`).withGridStep(.5,.5).withSnapStep(.25,.25).withTickStep(.5,.5).withMarkings("none").withXRange(-1,6).withYRange(-1,6).withPolygon("grid",{match:"congruent",numSides:4,showSides:!0,showAngles:!0}).build();e().withContent(`**Example of snapping to sides** 
[[☃ interactive-graph 1]] 
`).withGridStep(.5,.5).withSnapStep(.25,.25).withTickStep(.5,.5).withMarkings("none").withXRange(-1,6).withYRange(-1,6).withPolygon("sides",{match:"congruent",numSides:4,showSides:!0,showAngles:!1}).build();e().withPolygon("grid").build();const c=e().withContent(`**Move the ray so it has an endpoint at point $\\text{B}$ and goes through point $\\text{A}$. Then complete the statement below.**

[[☃ interactive-graph 1]]`).withMarkings("none").addLockedPointAt(5,3).addLockedPointAt(-5,-5).withRay({coords:[[5,3],[-5,-5]]}).build();e().withRay().build();const g=e().withContent(`Line segment $\\overline{OG}$ is rotated $180^\\circ$ about the point $(-2,4)$.  

**Draw the image of this rotation using the interactive graph.**

*The direction of a rotation by a positive angle is counter-clockwise.* 

[[☃ interactive-graph 1]]

`).addLockedPointAt(-2,4,{color:"green"}).addLockedLine([-6,3],[3,1],{kind:"segment",color:"blue"}).withSegments({coords:[[[-7,7],[2,5]]]}).build();e().withSegments({coords:[[[-5,5],[5,5]]]}).build();const w=e().withSegments({startCoords:[[[0,0],[2,2]]]}).build(),u=e().withSegments({startCoords:[[[0,0],[2,2]],[[0,2],[2,0]]]}).build(),p=e().withLinear({startCoords:[[3,0],[3,3]]}).build(),k=e().withLinearSystem({startCoords:[[[-3,0],[-3,3]],[[3,0],[3,3]]]}).build(),S=e().withRay({startCoords:[[3,0],[3,3]]}).build(),m=e().withCircle({startCoords:{center:[9,9],radius:5}}).build(),b=e().withQuadratic({startCoords:[[-1,-1],[0,0],[1,-1]]}).build(),f=e().withSinusoid({startCoords:[[0,0],[1,-1]]}).build(),L=e().addLockedPointAt(-7,-7,{filled:!0}).addLockedPointAt(2,-5,{filled:!1}).withSegments().build();e().addLockedPointAt(-7,-7,{color:"green"}).addLockedPointAt(2,-5,{color:"green"}).withSegments().build();const y=e().addLockedLine([-7,-7],[2,-5],{kind:"line",color:"green",filled:[!0,!1],showPoint1:!0,showPoint2:!0}).addLockedLine([-7,-6],[2,-4],{kind:"segment",color:"grayH",filled:[!1,!0],showPoint1:!0,showPoint2:!0}).addLockedLine([-7,-8],[2,-6],{kind:"ray",color:"pink",filled:[!1,!0],showPoint1:!0,showPoint2:!0}).withSegments().build(),P=e().withContent(`**Graph $h(x)=3\\sin(2x-\\pi)+2$ in the interactive widget.**  
*Note that one moveable point always defines an extremum point in the graph and the other point always defines a neighbouring intersection with the midline.*

[[☃ interactive-graph 1]]`).withBackgroundImage("https://ka-perseus-graphie.s3.amazonaws.com/ba6cf7327a7aaed2386ca00d48b6d554a357ac57.png",425,425,{scale:1,bottom:0,left:0}).withMarkings("none").withSinusoid({coords:[[1,2],[1.5,5]]}).build();e().withSinusoid().build();e().withContent(`**Plot the image of triangle $\\triangle ABC$ under a reflection across line $\\ell$.**

[[☃ interactive-graph 1]]`).withBackgroundImage("web+graphie://ka-perseus-graphie.s3.amazonaws.com/1aa858afa68530210704235a0134a165b4b66d43",400,400).withMarkings("none").withSnapStep(1,1).withGridStep(1,1).withTickStep(1,1).withXRange(-8,8).withYRange(-8,8).withPolygon("grid",{coords:[[-6,-7],[1,-4],[-3,-4]]}).build(),e().withContent(`The graph below contains quadrilateral $TREK$ and the point $P(-8,-6)$.  
  
**Draw the image of quadrilateral $TREK$ under a dilation whose center is $P$ and scale factor is $3$.**  
  
[[☃ interactive-graph 1]]`).withBackgroundImage("web+graphie://ka-perseus-graphie.s3.amazonaws.com/a1b7a05c177742523250b64a3995c9b37aac3399",425,425,{scale:1,bottom:0,left:0}).withMarkings("none").withSnapStep(1,1).withGridStep(1,1).withTickStep(2,2).withXRange(-12,12).withYRange(-8,16).withPolygon("grid",{numSides:"unlimited",coords:[[-5,0],[4,15],[4,0],[1,3]]}).build();const $=e().addLockedLine([-7,-5],[2,-3],{kind:"segment",color:"green",filled:[!0,!1],showPoint1:!0,showPoint2:!0,lineStyle:"solid"}).addLockedLine([-7,-6],[2,-4],{kind:"segment",color:"grayH",filled:[!0,!1],showPoint1:!0,showPoint2:!1,lineStyle:"dashed"}).addLockedLine([-7,-7],[2,-5],{kind:"segment",color:"pink",filled:[!0,!1],showPoint1:!1,showPoint2:!1,lineStyle:"solid"}).build(),C=e().addLockedLine([-7,-5],[2,-3],{kind:"line",color:"green",filled:[!0,!1],showPoint1:!0,showPoint2:!0,lineStyle:"solid"}).addLockedLine([-7,-6],[2,-4],{kind:"line",color:"grayH",filled:[!0,!1],showPoint1:!0,showPoint2:!1,lineStyle:"dashed"}).addLockedLine([-7,-7],[2,-5],{kind:"line",color:"pink",filled:[!0,!1],showPoint1:!1,showPoint2:!1,lineStyle:"solid"}).build(),v=e().addLockedLine([-7,-5],[2,-3],{kind:"ray",color:"green",filled:[!0,!1],showPoint1:!0,showPoint2:!0,lineStyle:"solid"}).addLockedLine([-7,-6],[2,-4],{kind:"ray",color:"grayH",filled:[!0,!1],showPoint1:!0,showPoint2:!1,lineStyle:"dashed"}).addLockedLine([-7,-7],[2,-5],{kind:"ray",color:"pink",filled:[!0,!1],showPoint1:!1,showPoint2:!1,lineStyle:"solid"}).build(),R=e().addLockedVector([0,0],[2,2]).addLockedVector([2,2],[-2,4],"green").build(),A=e().addLockedEllipse([0,0],[5,5]).addLockedEllipse([-5,5],[2,3],{angle:3*Math.PI/4,color:"green",fillStyle:"solid",strokeStyle:"solid"}).addLockedEllipse([5,5],[2,3],{angle:Math.PI/4,color:"green",fillStyle:"translucent",strokeStyle:"dashed"}).build();e().addLockedEllipse([0,0],[5,5],{color:"green",fillStyle:"white"}).addLockedEllipse([-5,5],[2,3],{color:"pink",fillStyle:"translucent"}).build();const Q=e().addLockedPolygon([[-3,4],[-5,1],[-1,1]]).addLockedPolygon([[1,4],[4,4],[4,1],[1,1]],{color:"green",showVertices:!0,fillStyle:"translucent",strokeStyle:"dashed"}).addLockedPolygon([[0,-1],[-2,-3],[-1,-5],[1,-5],[2,-3]],{color:"purple",showVertices:!1,fillStyle:"solid",strokeStyle:"solid"}).build();e().addLockedPolygon([[0,3],[-3,0],[3,0]],{color:"green",fillStyle:"white"}).addLockedPolygon([[-5,0],[-3,-1],[3,-1]],{color:"pink",fillStyle:"translucent"}).build();const x=(t="x^2",i)=>e().addLockedFunction(t,i).build(),W=e().addLockedPointAt(-7,-7).addLockedLine([-7,-5],[2,-3]).addLockedVector([0,0],[8,2],"purple").addLockedEllipse([0,5],[4,2],{angle:Math.PI/4,color:"blue"}).addLockedPolygon([[-9,4],[-6,4],[-6,1],[-9,1]],{color:"pink"}).build();e().withQuadratic().build();e().withQuadratic().build();export{Q as A,P as B,u as a,k as b,m as c,f as d,o as e,W as f,x as g,s as h,d as i,r as j,l as k,p as l,n as m,c as n,g as o,h as p,b as q,S as r,w as s,L as t,y as u,$ as v,C as w,v as x,R as y,A as z};
