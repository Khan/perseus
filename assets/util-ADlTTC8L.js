import"./util-KY8kJaBW.js";import"./jquery-yG1GhClm.js";import{l as v,s as S}from"./svg-image-UfCByHtE.js";import{g as P,b as f,e as x,f as F,h as w,i as T,j as h,k,l as q}from"./article-renderer-zBHfTPp6.js";import"./version-akiLXZts.js";import"./dependencies-9B_Bv_mA.js";import"./perseus-api-GqFoxb6z.js";import"./multi-renderer-hVK1qHI-.js";import"./hints-renderer-h8GarQKP.js";import"./renderer-eoBA14Te.js";import"./base-radio-yA4g8reu.js";import"./button-group-KR3umc1e.js";import"./graph-VKYZ1zR1.js";import"./hud-CJYktPgf.js";import"./icon-TA3bBVIW.js";import"./index-unb9_VrH.js";import"./inline-icon-QIU9thzn.js";import"./math-input-FrakTMQN.js";import"./multi-button-group-AxfQn4Cq.js";import"./number-input-_vmR2dDD.js";import"./range-input-W6BaCFKq.js";import"./text-input-Q1V0RBx1.js";import"./text-list-editor--7RKQsFY.js";import"./i18n-context-SHL040F7.js";import{w as b}from"./index-J2t_5nK1.js";function g(o){o.focus({preventScroll:!0})}const i="grayH";function y(o){switch(o){case"point":return{type:"point",coord:[0,0],color:i,filled:!0};case"line":return{type:"line",kind:"line",points:[y("point"),{...y("point"),coord:[2,2]}],color:i,lineStyle:"solid",showPoint1:!1,showPoint2:!1};case"vector":return{type:"vector",points:[[0,0],[2,2]],color:i};case"ellipse":return{type:"ellipse",center:[0,0],radius:[1,1],angle:0,color:i,fillStyle:"none",strokeStyle:"solid"};case"polygon":return{type:"polygon",points:[[0,2],[-1,0],[1,0]],color:i,showVertices:!1,fillStyle:"none",strokeStyle:"solid"};case"function":return{type:"function",color:i,strokeStyle:"solid",equation:"x^2",directionalAxis:"x"};default:throw new b(o)}}function oo(o){return o/180*Math.PI}function to(o){return o/Math.PI*180}function ro(o,t,r){switch(o.type){case"linear":case"ray":return q({...o,startCoords:void 0},t,r);case"segment":return k({...o,startCoords:void 0},t,r);case"linear-system":return h({...o,startCoords:void 0},t,r);case"circle":const e=T({...o,startCoords:void 0}),s=v(S(e.radiusPoint,e.center));return{center:e.center,radius:s};case"sinusoid":return w({...o,startCoords:void 0},t,r);case"quadratic":return F({...o,startCoords:void 0},t,r);case"point":return x({...o,startCoords:void 0},t,r);case"polygon":return f({...o,startCoords:void 0},t,r);case"angle":return P({graph:{...o,startCoords:void 0},range:t,step:r});default:return}}const eo=o=>{const t=o[0],r=o[1],e=r[1]-t[1],s=Math.PI/(2*(r[0]-t[0])),n=t[0]*s,c=t[1];return"y = "+e.toFixed(3)+"sin("+s.toFixed(3)+"x - "+n.toFixed(3)+") + "+c.toFixed(3)},so=o=>{const t=o[0],r=o[1],e=o[2],s=(t[0]-r[0])*(t[0]-e[0])*(r[0]-e[0]);if(s===0)return"Division by zero error";const n=(e[0]*(r[1]-t[1])+r[0]*(t[1]-e[1])+t[0]*(e[1]-r[1]))/s,c=(e[0]*e[0]*(t[1]-r[1])+r[0]*r[0]*(e[1]-t[1])+t[0]*t[0]*(r[1]-e[1]))/s,d=(r[0]*e[0]*(r[0]-e[0])*t[1]+e[0]*t[0]*(e[0]-t[0])*r[1]+t[0]*r[0]*(t[0]-r[0])*e[1])/s;return"y = "+n.toFixed(3)+"x^2 + "+c.toFixed(3)+"x + "+d.toFixed(3)},io=(o,t)=>{var u,a,l,p,m;const r=["linear","linear-system","ray","segment","circle"],e=["sinusoid","quadratic"],s=(u=o==null?void 0:o.mafs)==null?void 0:u["start-coords-ui-phase-1"],n=(a=o==null?void 0:o.mafs)==null?void 0:a["start-coords-ui-phase-2"],c=(l=o==null?void 0:o.mafs)==null?void 0:l["start-coords-ui-point"],d=(p=o==null?void 0:o.mafs)==null?void 0:p["start-coords-ui-polygon"],C=(m=o==null?void 0:o.mafs)==null?void 0:m["start-coords-ui-angle"];return!!(s&&r.includes(t.type)||n&&e.includes(t.type)||C&&t.type==="angle"||c&&t.type==="point"&&t.numPoints!=="unlimited"||d&&t.type==="polygon"&&t.numSides!=="unlimited"&&(t.snapTo==="grid"||t.snapTo===void 0))};export{so as a,eo as b,ro as c,oo as d,g as f,y as g,to as r,io as s};
