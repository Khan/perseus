import{B as J}from"./index-71P4mDMp.js";import{V as c}from"./index-hw7d7wq0.js";import{S as P,O as E}from"./answer-choices-wcf9GgF1.js";import{T as L}from"./index-F5uqTDBi.js";import{I as A}from"./index-Y1DiWZsM.js";import{S as o}from"./index-v_a-r9JG.js";import{s as i,c as g}from"./index-zRqVZh6A.js";import{L as I,a as w}from"./index-jek-Xksa.js";import{L as U,p as Y}from"./locked-figure-aria-t3fiR_yn.js";import{n as C}from"./no-important-xCWWYXQR.js";import{r as e}from"./index-6oxdNXpR.js";import{P as N}from"./trash-bold-pmaWn4kq.js";import{C as K}from"./color-select-s_aI5KvJ.js";import{L as Q}from"./line-stroke-select-lm-qv-3r.js";import{L as Z}from"./line-swatch-yUlF76V-.js";import{L as ee,a as ae}from"./locked-label-settings-Q427P9KJ.js";import{g as ne,j as te,b as re}from"./util-O8OIWs-A.js";const le=""+new URL("copy-oXFFmXIn.svg",import.meta.url).href,ie=""+new URL("note-pencil-qql72tMF.svg",import.meta.url).href,M={linear:["x + 5","1/2x - 2"],polynomial:["1/2x^2 + 3x - 4","(1/3)x^3 - 2x^2 + 3x - 4"],trigonometric:["sin(x) * 3","arctan(2x) + 4"]},_=m=>{const{color:p,strokeStyle:u,equation:x,directionalAxis:b,domain:l,ariaLabel:B,onChangeProps:d,onMove:R,onRemove:$}=m,s=m.labels??[],S=b==="x"?"y=":"x=",D=`Function (${S}${x})`,q=a=>[Number.isFinite(a[0])?a[0].toString():"",Number.isFinite(a[1])?a[1].toString():""],[v,T]=e.useState(q(l)),[f,O]=e.useState("");e.useEffect(()=>{T(q(l))},[l]);async function V(){let t=`Function${await te(s)} with equation ${S}${x}`;(Number.isFinite(l[0])||Number.isFinite(l[1]))&&(t+=`, domain from ${l[0]} to ${l[1]}`);const r=re(p,u);return t+=r,t}function h(a,t){const r={};r[a]=t,d(r)}function F(a,t){const r=[...v];r[a]=t,T(r);const y=[...l];let k=parseFloat(t);t===""&&a===0?k=-1/0:t===""&&a===1&&(k=1/0),y[a]=k,d({domain:y})}const j=Object.keys(M),z=f!=="",W=z?M[f]:["Select category to see example equations"];function H(a){const t={color:a};t.labels=s.map(r=>({...r,color:a})),d(t)}function X(a,t){const r=[...s];r[t]={...s[t],...a},d({labels:r})}function G(a){const t=s.filter((r,y)=>y!==a);d({labels:t})}return e.createElement(N,{expanded:m.expanded,onToggle:m.onToggle,header:e.createElement(c,{style:n.row},e.createElement(I,{style:n.accordionHeader},D),e.createElement(o,{size:i.xSmall_8}),e.createElement(Z,{color:p,lineStyle:u}))},e.createElement(c,{style:[n.row,n.spaceUnder]},e.createElement(K,{selectedValue:p,onChange:H}),e.createElement(o,{size:i.small_12}),e.createElement(Q,{selectedValue:u,onChange:a=>{h("strokeStyle",a)}})),e.createElement(c,{style:[n.row,n.rowSpace]},e.createElement(P,{selectedValue:b,onChange:a=>{h("directionalAxis",a)},"aria-label":"equation prefix",style:[n.dropdownLabel,n.axisMenu],placeholder:""},e.createElement(E,{value:"x",label:"y ="}),e.createElement(E,{value:"y",label:"x ="})),e.createElement(o,{size:i.xSmall_8}),e.createElement(L,{type:"text","aria-label":"equation",value:x,onChange:a=>{h("equation",a)},style:[n.textField]})),e.createElement(c,{style:[n.row,n.rowSpace]},e.createElement(w,{tag:"label",style:[n.dropdownLabel,n.domainMin]},"domain min",e.createElement(o,{size:i.xxSmall_6}),e.createElement(L,{type:"number",style:n.domainMinField,value:v[0],onChange:a=>{F(0,a)}})),e.createElement(o,{size:i.medium_16}),e.createElement(w,{tag:"label","aria-label":"domain max",style:[n.dropdownLabel,n.domainMax]},"max",e.createElement(o,{size:i.xxSmall_6}),e.createElement(L,{type:"number",style:n.domainMaxField,value:v[1],onChange:a=>{F(1,a)}}))),e.createElement(N,{header:e.createElement(I,null,"Example Functions"),expanded:!1,containerStyle:n.exampleWorkspace,panelStyle:n.exampleAccordionPanel},e.createElement(w,{tag:"label",style:n.dropdownLabel},"Choose a category",e.createElement(o,{size:i.xxSmall_6}),e.createElement(P,{selectedValue:f,onChange:O,placeholder:"examples"},j.map(a=>e.createElement(E,{key:a,value:a,label:a})))),z&&e.createElement("ul",{className:C.css(n.exampleContainer)},W.map((a,t)=>e.createElement(oe,{key:t,category:f,example:a,index:t,pasteEquationFn:h})))),e.createElement(o,{size:i.small_12}),e.createElement(c,{style:n.horizontalRule}),e.createElement(U,{ariaLabel:B,getPrepopulatedAriaLabel:V,onChangeProps:a=>{d(a)}}),e.createElement(o,{size:i.xxxSmall_4}),e.createElement(c,{style:n.horizontalRule}),e.createElement(o,{size:i.small_12}),e.createElement(w,null,"Visible labels"),s.map((a,t,r)=>e.createElement(ee,{key:t,...a,expanded:!0,onChangeProps:y=>{X(y,t)},onRemove:()=>{G(t)},containerStyle:n.labelContainer})),e.createElement(J,{kind:"tertiary",startIcon:Y,onClick:()=>{const a={...ne("label"),coord:[0,-s.length],color:p};d({labels:[...s,a]})},style:n.addButton},"Add visible label"),e.createElement(ae,{figureType:m.type,onMove:R,onRemove:$}))},oe=m=>{const{category:p,example:u,index:x,pasteEquationFn:b}=m,l=e.useId();return e.createElement("li",{key:`${p}-${x}`,className:C.css(n.exampleRow)},e.createElement(A,{icon:ie,"aria-label":"paste example","aria-describedby":l,onClick:()=>b("equation",u),size:"medium",style:n.copyPasteButton}),e.createElement(A,{icon:le,"aria-label":"copy example","aria-describedby":l,onClick:()=>navigator.clipboard.writeText(u),size:"medium",style:n.copyPasteButton}),e.createElement(o,{size:i.xxxSmall_4}),e.createElement(c,{style:n.exampleContent,id:l},u))},n=C.StyleSheet.create({accordionHeader:{textOverflow:"ellipsis",maxWidth:"calc(100% - 64px)",overflow:"hidden",whiteSpace:"nowrap"},axisMenu:{minWidth:"auto"},copyPasteButton:{flexShrink:"0",margin:"0 2px"},domainMin:{justifyContent:"space-between",width:"calc(((100% - 141px) / 2) + 88.7px)",textWrap:"nowrap"},domainMinField:{width:"calc(100% - 88.7px)"},domainMax:{width:"calc(((100% - 141px) / 2) + 36.2px)"},domainMaxField:{width:"calc(100% - 36.2px)"},dropdownLabel:{alignItems:"center",display:"flex"},exampleAccordionPanel:{alignItems:"start",paddingBottom:"12px",flexDirection:"row",flexWrap:"wrap"},exampleContainer:{background:"white",border:`1px solid ${g.fadedOffBlack16}`,borderRadius:"4px",flexGrow:"1",listStyleType:"none",maxHeight:"88px",margin:"8px 0 0 0",overflowY:"scroll",padding:"4px 12px 4px 4px"},exampleContent:{fontFamily:'"Lato", sans-serif',flexGrow:"1",color:g.offBlack},exampleRow:{alignItems:"center",display:"flex",flexDirection:"row",minHeight:"44px"},exampleWorkspace:{background:g.white50},rowSpace:{marginTop:i.xSmall_8},row:{display:"flex",flexDirection:"row",alignItems:"center"},textField:{flexGrow:"1"},addButton:{alignSelf:"start"},horizontalRule:{height:1,backgroundColor:g.offBlack16},labelContainer:{backgroundColor:g.white}}),Ce=_;_.__docgenInfo={description:"",methods:[],displayName:"LockedFunctionSettings",props:{type:{required:!0,tsType:{name:"literal",value:'"function"'},description:""},color:{required:!0,tsType:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]"},description:""},strokeStyle:{required:!0,tsType:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}]},description:""},equation:{required:!0,tsType:{name:"string"},description:"This is the user-defined equation (as it was typed)"},directionalAxis:{required:!0,tsType:{name:"union",raw:'"x" | "y"',elements:[{name:"literal",value:'"x"'},{name:"literal",value:'"y"'}]},description:"The independent variable of this function"},domain:{required:!0,tsType:{name:"tuple",raw:"[min: number, max: number]",elements:[{name:"unknown"},{name:"unknown"}]},description:"The minimum and maximum values along the `directionalAxis` at which\nthis function should be graphed. Values of -Infinity and Infinity are\nallowed. Note that infinite values are serialized as `null` in JSON."},labels:{required:!1,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]"},description:""},ariaLabel:{required:!1,tsType:{name:"string"},description:""},onMove:{required:!0,tsType:{name:"signature",type:"function",raw:"(movement: LockedFigureSettingsMovementType) => void",signature:{arguments:[{type:{name:"union",raw:`| "back"
| "backward"
| "forward"
| "front"`,elements:[{name:"literal",value:'"back"'},{name:"literal",value:'"backward"'},{name:"literal",value:'"forward"'},{name:"literal",value:'"front"'}]},name:"movement"}],return:{name:"void"}}},description:"Called when a movement button (top, up, down, bottom) is pressed."},onRemove:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when the delete button is pressed."},expanded:{required:!1,tsType:{name:"boolean"},description:"Whether this accordion is expanded."},onToggle:{required:!1,tsType:{name:"signature",type:"function",raw:"(expanded: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"expanded"}],return:{name:"void"}}},description:"Called when the accordion is expanded or collapsed."},onChangeProps:{required:!0,tsType:{name:"signature",type:"function",raw:"(newProps: Partial<LockedFunctionType>) => void",signature:{arguments:[{type:{name:"Partial",elements:[{name:"signature",type:"object",raw:`{
    type: "function";
    color: LockedFigureColor;
    strokeStyle: LockedLineStyle;
    /**
     * This is the user-defined equation (as it was typed)
     */
    equation: string;
    /**
     * The independent variable of this function
     */
    directionalAxis: "x" | "y";
    /**
     * The minimum and maximum values along the \`directionalAxis\` at which
     * this function should be graphed. Values of -Infinity and Infinity are
     * allowed. Note that infinite values are serialized as \`null\` in JSON.
     */
    domain: [min: number, max: number];
    labels?: LockedLabelType[];
    ariaLabel?: string;
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"function"',required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"strokeStyle",value:{name:"union",raw:'"solid" | "dashed"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"dashed"'}],required:!0}},{key:"equation",value:{name:"string",required:!0},description:"This is the user-defined equation (as it was typed)"},{key:"directionalAxis",value:{name:"union",raw:'"x" | "y"',elements:[{name:"literal",value:'"x"'},{name:"literal",value:'"y"'}],required:!0},description:"The independent variable of this function"},{key:"domain",value:{name:"tuple",raw:"[min: number, max: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0},description:"The minimum and maximum values along the `directionalAxis` at which\nthis function should be graphed. Values of -Infinity and Infinity are\nallowed. Note that infinite values are serialized as `null` in JSON."},{key:"labels",value:{name:"Array",elements:[{name:"signature",type:"object",raw:`{
    type: "label";
    coord: Coord;
    // TeX-supported string
    text: string;
    color: LockedFigureColor;
    size: "small" | "medium" | "large";
}`,signature:{properties:[{key:"type",value:{name:"literal",value:'"label"',required:!0}},{key:"coord",value:{name:"tuple",raw:"[x: number, y: number]",elements:[{name:"unknown"},{name:"unknown"}],required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"color",value:{name:"unknown[number]",raw:"(typeof lockedFigureColorNames)[number]",required:!0}},{key:"size",value:{name:"union",raw:'"small" | "medium" | "large"',elements:[{name:"literal",value:'"small"'},{name:"literal",value:'"medium"'},{name:"literal",value:'"large"'}],required:!0}}]}}],raw:"LockedLabelType[]",required:!1}},{key:"ariaLabel",value:{name:"string",required:!1}}]}}],raw:"Partial<LockedFunctionType>"},name:"newProps"}],return:{name:"void"}}},description:"Called when the props (points, color, etc.) are updated."}}};export{Ce as L};
