var f=Object.defineProperty;var y=(l,r,e)=>r in l?f(l,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[r]=e;var n=(l,r,e)=>(y(l,typeof r!="symbol"?r+"":r,e),e);import{j as g}from"./jsx-runtime-BT65X5dW.js";import{b as _,U as b,K as d}from"./util-Cnd83mYg.js";import{_ as i}from"./underscore-U-AHniOr.js";import"./core-widget-registry-EaDT6WdJ.js";import{P as v,E as V}from"./perseus-error-CSETqePQ.js";import{c as k}from"./index-D7h-teXI.js";import{P as a}from"./index-CrGd2QqM.js";import{r as p}from"./index-C6mWTJJr.js";function w(l){return Number.isInteger(l)?!1:l%Math.PI===0||l%(Math.PI/2)===0||l%(Math.PI/3)===0||l%(Math.PI/4)===0||l%(Math.PI/6)===0}const{firstNumericalParse:c,captureScratchpadTouchStart:I}=b,m=d.toNumericString,S=d.getNumericFormat;class u extends p.Component{constructor(){super(...arguments);n(this,"inputRef",p.createRef());n(this,"state",{format:this.props.format});n(this,"_getInput",()=>{if(!this.inputRef.current)throw new v("Input ref accessed before set",V.Internal);return this.inputRef.current});n(this,"getValue",()=>this.parseInputValue(this._getInput().value));n(this,"getStringValue",()=>this._getInput().toString());n(this,"parseInputValue",e=>{if(e===""){const s=this.props.placeholder;return i.isFinite(s)?+s:null}const t=c(e);return i.isFinite(t)?t:this.props.value});n(this,"focus",()=>{this._getInput().focus(),this._handleFocus()});n(this,"blur",()=>{this._getInput().blur(),this._handleBlur()});n(this,"setSelectionRange",(e,t)=>{this._getInput().setSelectionRange(e,t)});n(this,"getSelectionStart",()=>this._getInput().selectionStart);n(this,"getSelectionEnd",()=>this._getInput().selectionEnd);n(this,"_checkValidity",e=>{if(e==null)return!0;const t=c(e),s=this.props.checkValidity;return i.isFinite(t)&&s(t)});n(this,"_handleChange",e=>{const t=e.target.value,s=this.parseInputValue(t),o=S(t);this.props.onChange(s),o&&(this.props.onFormatChange(s,o),this.setState({format:o}))});n(this,"_handleFocus",()=>{this.props.onFocus&&this.props.onFocus()});n(this,"_handleBlur",e=>{e&&e.type==="keypress"&&e.keyCode!==13||(this._setValue(this.props.value,this.state.format),this.props.onBlur&&this.props.onBlur())});n(this,"_onKeyDown",e=>{if(this.props.onKeyDown&&this.props.onKeyDown(e),!this.props.useArrowKeys||!i.contains(["ArrowUp","ArrowDown"],e.key))return;let t=this.getValue();t===Math.floor(t)&&(e.key==="ArrowUp"?t=t+1:e.key==="ArrowDown"&&(t=t-1),this._checkValidity(t)&&this.props.onChange(t))});n(this,"_setValue",(e,t)=>{this._getInput().value=m(e,t)})}componentDidMount(){const e=this.getValue();this.props.allowPiTruncation&&e!==null&&e!==0&&this.state.format!=="pi"&&w(e)&&(this._setValue(e/Math.PI,"pi"),this.setState({format:"pi"}))}componentDidUpdate(e){_(this.getValue(),this.props.value)||this._setValue(this.props.value,this.state.format)}render(){let e=k({"number-input":!0,"invalid-input":!this._checkValidity(this.props.value),mini:this.props.size==="mini",small:this.props.size==="small",normal:this.props.size==="normal"});this.props.className!=null&&(e=e+" "+this.props.className);const{onFormatChange:t,checkValidity:s,useArrowKeys:o,allowPiTruncation:P,...h}=this.props;return g.jsx("input",{...h,className:e,type:"text",ref:this.inputRef,onChange:this._handleChange,onFocus:this._handleFocus,onBlur:this._handleBlur,onKeyPress:this._handleBlur,onKeyDown:this._onKeyDown,onTouchStart:I,defaultValue:m(this.props.value,this.state.format),value:void 0})}}n(u,"propTypes",{value:a.number,format:a.string,placeholder:a.oneOfType([a.string,a.number]),onChange:a.func.isRequired,onFormatChange:a.func,checkValidity:a.func,size:a.oneOf(["mini","small","normal"]),label:a.oneOf(["put your labels outside your inputs!"]),allowPiTruncation:a.bool}),n(u,"defaultProps",{value:null,placeholder:null,format:null,onFormatChange:()=>null,checkValidity:()=>!0,useArrowKeys:!1});u.__docgenInfo={description:'An input box that accepts only numeric strings\n\nCalls `onChange(value, format)` for valid numbers.\n\nReverts to the current value `onBlur` or on [ENTER],\n  but maintains the format (i.e. 3/2, 1 1/2, 150%)\n\nAccepts empty input and sends it to `onChange` as `null` if no numeric\nplaceholder is set.\n\nIf given a `checkValidity` function, will turn the background/outline red\nwhen invalid.\n\nIf `useArrowKeys` is set to `true`, up/down arrows will increment/decrement\nintegers.\n\nOptionally takes a `size` (`"mini"`, `"small"`,` `"normal"`)',methods:[{name:"_getInput",docblock:null,modifiers:[],params:[],returns:null},{name:"getValue",docblock:null,modifiers:[],params:[],returns:null},{name:"getStringValue",docblock:null,modifiers:[],params:[],returns:null},{name:"parseInputValue",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:null}],returns:null},{name:"focus",docblock:null,modifiers:[],params:[],returns:null},{name:"blur",docblock:null,modifiers:[],params:[],returns:null},{name:"setSelectionRange",docblock:null,modifiers:[],params:[{name:"selectionStart",optional:!1,type:null},{name:"selectionEnd",optional:!1,type:null}],returns:null},{name:"getSelectionStart",docblock:null,modifiers:[],params:[],returns:null},{name:"getSelectionEnd",docblock:null,modifiers:[],params:[],returns:null},{name:"_checkValidity",docblock:null,modifiers:[],params:[{name:"value",optional:!1,type:null}],returns:null},{name:"_handleChange",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:null}],returns:null},{name:"_handleFocus",docblock:null,modifiers:[],params:[],returns:null},{name:"_handleBlur",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:null}],returns:null},{name:"_onKeyDown",docblock:null,modifiers:[],params:[{name:"e",optional:!1,type:null}],returns:null},{name:"_setValue",docblock:null,modifiers:[],params:[{name:"val",optional:!1,type:null},{name:"format",optional:!1,type:null}],returns:null}],displayName:"NumberInput",props:{value:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"number"},required:!1},placeholder:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1},format:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"string"},required:!1},onFormatChange:{defaultValue:{value:"() => null",computed:!1},description:"",type:{name:"func"},required:!1},checkValidity:{defaultValue:{value:"() => true",computed:!1},description:"",type:{name:"func"},required:!1},useArrowKeys:{defaultValue:{value:"false",computed:!1},required:!1},onChange:{description:"",type:{name:"func"},required:!0},size:{description:"",type:{name:"enum",value:[{value:'"mini"',computed:!1},{value:'"small"',computed:!1},{value:'"normal"',computed:!1}]},required:!1},label:{description:"",type:{name:"enum",value:[{value:'"put your labels outside your inputs!"',computed:!1}]},required:!1},allowPiTruncation:{description:"",type:{name:"bool"},required:!1}}};export{u as N};
