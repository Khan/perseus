"use strict";(self.webpackChunkperseus=self.webpackChunkperseus||[]).push([[1501],{"./packages/math-input/src/components/keypad/keypad-mathquill.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{V2KeypadWithMathquill:()=>V2KeypadWithMathquill,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _khanacademy_wonder_blocks_color__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@khanacademy/wonder-blocks-color/dist/es/index.js"),_khanacademy_wonder_blocks_popover__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@khanacademy/wonder-blocks-popover/dist/es/index.js"),react__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/react/index.js"),_input_cursor_contexts__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./packages/math-input/src/components/input/cursor-contexts.ts"),_input_mathquill_helpers__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./packages/math-input/src/components/input/mathquill-helpers.ts"),_input_mathquill_instance__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./packages/math-input/src/components/input/mathquill-instance.ts"),_key_handlers_key_translator__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./packages/math-input/src/components/key-handlers/key-translator.ts"),_index__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./packages/math-input/src/components/keypad/index.tsx");const __WEBPACK_DEFAULT_EXPORT__={title:"math-input/components/v2 Keypad With Mathquill"};function V2KeypadWithMathquill(){const mathFieldWrapperRef=react__WEBPACK_IMPORTED_MODULE_2__.useRef(null),[mathField,setMathField]=react__WEBPACK_IMPORTED_MODULE_2__.useState(),[keypadOpen,setKeypadOpen]=react__WEBPACK_IMPORTED_MODULE_2__.useState(!0),[cursorContext,setCursorContext]=react__WEBPACK_IMPORTED_MODULE_2__.useState(_input_cursor_contexts__WEBPACK_IMPORTED_MODULE_3__.z.NONE);return react__WEBPACK_IMPORTED_MODULE_2__.useEffect((()=>{if(!mathField&&mathFieldWrapperRef.current){const mathFieldInstance=(0,_input_mathquill_instance__WEBPACK_IMPORTED_MODULE_5__.O)(mathFieldWrapperRef.current,(baseConfig=>({...baseConfig,handlers:{edit:_mathField=>{setCursorContext((0,_input_mathquill_helpers__WEBPACK_IMPORTED_MODULE_4__._w)(_mathField))}}})));setMathField(mathFieldInstance)}}),[mathField]),react__WEBPACK_IMPORTED_MODULE_2__.createElement("div",{style:{maxWidth:"400px",margin:"2em"}},react__WEBPACK_IMPORTED_MODULE_2__.createElement(_khanacademy_wonder_blocks_popover__WEBPACK_IMPORTED_MODULE_1__.J2,{content:react__WEBPACK_IMPORTED_MODULE_2__.createElement(_khanacademy_wonder_blocks_popover__WEBPACK_IMPORTED_MODULE_1__.wV,{style:{padding:10,maxWidth:"initial"}},react__WEBPACK_IMPORTED_MODULE_2__.createElement(_index__WEBPACK_IMPORTED_MODULE_7__.Z,{extraKeys:["x","y","PI","THETA"],onClickKey:function handleClickKey(key){if(!mathField)return;"DISMISS"===key&&setKeypadOpen(!1);const mathFieldCallback=_key_handlers_key_translator__WEBPACK_IMPORTED_MODULE_6__.Z[key];mathFieldCallback?(mathFieldCallback(mathField,key),setCursorContext((0,_input_mathquill_helpers__WEBPACK_IMPORTED_MODULE_4__._w)(mathField))):console.warn(`No translation to Mathquill for: ${key}`)},cursorContext,advancedRelations:!0,basicRelations:!0,divisionKey:!0,logarithms:!0,convertDotToTimes:!0,preAlgebra:!0,trigonometry:!0,onAnalyticsEvent:async event=>{console.log("Send Event:",event)},showDismiss:!0})),dismissEnabled:!0,opened:keypadOpen},react__WEBPACK_IMPORTED_MODULE_2__.createElement("div",{style:{width:"100%",marginBottom:"1em",border:`1px solid ${_khanacademy_wonder_blocks_color__WEBPACK_IMPORTED_MODULE_0__.default.offBlack16}`},ref:mathFieldWrapperRef})),react__WEBPACK_IMPORTED_MODULE_2__.createElement("button",{onClick:()=>setKeypadOpen(!keypadOpen)},keypadOpen?"close keypad":"open keypad"))}V2KeypadWithMathquill.parameters={...V2KeypadWithMathquill.parameters,docs:{...V2KeypadWithMathquill.parameters?.docs,source:{originalSource:'function V2KeypadWithMathquill() {\n  const mathFieldWrapperRef = React.useRef<HTMLDivElement>(null);\n  const [mathField, setMathField] = React.useState<MathFieldInterface>();\n  const [keypadOpen, setKeypadOpen] = React.useState<boolean>(true);\n  const [cursorContext, setCursorContext] = React.useState<(typeof CursorContext)[keyof typeof CursorContext]>(CursorContext.NONE);\n  React.useEffect(() => {\n    if (!mathField && mathFieldWrapperRef.current) {\n      const mathFieldInstance = createMathField(mathFieldWrapperRef.current, baseConfig => ({\n        ...baseConfig,\n        handlers: {\n          edit: (_mathField: MathFieldInterface) => {\n            setCursorContext(getCursorContext(_mathField));\n          }\n        }\n      }));\n      setMathField(mathFieldInstance);\n    }\n  }, [mathField]);\n  function handleClickKey(key: Key) {\n    if (!mathField) {\n      return;\n    }\n    if (key === "DISMISS") {\n      setKeypadOpen(false);\n    }\n    const mathFieldCallback = keyTranslator[key];\n    if (mathFieldCallback) {\n      mathFieldCallback(mathField, key);\n      setCursorContext(getCursorContext(mathField));\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn(`No translation to Mathquill for: ${key}`);\n    }\n  }\n  return <div style={{\n    maxWidth: "400px",\n    margin: "2em"\n  }}>\n            <Popover content={<PopoverContentCore style={{\n      padding: 10,\n      maxWidth: "initial"\n    }}>\n                        <Keypad extraKeys={["x", "y", "PI", "THETA"]} onClickKey={handleClickKey} cursorContext={cursorContext} advancedRelations basicRelations divisionKey logarithms convertDotToTimes preAlgebra trigonometry onAnalyticsEvent={async event => {\n        // eslint-disable-next-line no-console\n        console.log("Send Event:", event);\n      }} showDismiss />\n                    </PopoverContentCore>} dismissEnabled opened={keypadOpen}>\n                <div style={{\n        width: "100%",\n        marginBottom: "1em",\n        border: `1px solid ${Color.offBlack16}`\n      }} ref={mathFieldWrapperRef} />\n            </Popover>\n            <button onClick={() => setKeypadOpen(!keypadOpen)}>\n                {keypadOpen ? "close keypad" : "open keypad"}\n            </button>\n        </div>;\n}',...V2KeypadWithMathquill.parameters?.docs?.source}}}}}]);