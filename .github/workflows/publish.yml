name: Release

on:
    push:
        branches: [main]
    workflow_dispatch:

# IMPORTANT! We have a concurrency solely on this workflow, meaning that this
# workflow can only run one instance at a time. This prevents us from trying to
# publish a snapshot and a release at the same time (which has historically
# caused problems). We also do not want to cancel in-progress runs, because we
# don't want a production publish to be interrupted by a snapshot publish ever.
concurrency: ${{ github.workflow }}

jobs:
    # Production Release
    #
    # This workflow will run changesets depending on two different scenarios:
    #
    # 1. If we are landing a specific commit into main (Author PR), then
    #    changesets will check if there are changes verifying the Markdown files
    #    generated automatically:
    #      a) There are new versions and there's NO Release PR, then the
    #         changesets action will create a new Release PR.
    #      b) There's a Release PR, then the changesets action will update the
    #         existing Release PR with the new commit.
    #
    #    NOTE: (in both cases, changesets will modify the new version in
    #    package.json for each package, and will remove the MD files as part of the
    #    Release PR).
    #
    # 2. If we are landing the Release PR into main, then the changesets action
    #    will publish the changes to npm.
    #
    # For more info about this workflow, see:
    # https://github.com/changesets/action#usage
    release:
        name: Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        runs-on: ${{ matrix.os }}
        permissions:
            id-token: write # required for publishing to npm with provenance
            contents: write # required for creating pull requests
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install & cache node_modules
              uses: ./.github/actions/shared-node-cache
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Create Release Pull Request or Publish to npm
              id: changesets
              uses: changesets/action@v1
              with:
                  publish: pnpm publish:ci
              env:
                  # We use a Personal Access Token here rather than the GITHUB_TOKEN
                  # so that it will trigger our other actions. The token has to be on
                  # the account of someone with appropriate access levels and given the
                  # repo scope.
                  GITHUB_TOKEN: ${{ secrets.KHAN_ACTIONS_BOT_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
                  # We set this so that (p)npm publish will include the
                  # provenance information in the package.json file and surface
                  # it in the npm registry.
                  # See: https://docs.npmjs.com/generating-provenance-statements
                  NPM_CONFIG_PROVENANCE: true

            - name: Send a Slack notification if a publish fails
              if: failure()
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_EXERCISENEXT_WEBHOOK }}
                  SLACK_CHANNEL: eng-perseus
                  SLACK_MSG_AUTHOR: ${{ github.event.pull_request.user.login }}
                  SLACK_USERNAME: GithubGoose
                  SLACK_ICON_EMOJI: ":goose:"
                  SLACK_MESSAGE: "Something went wrong with the release of ${{ github.event.repository.name }}. \nPlease check the logs → https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  SLACK_TITLE: "Oops! I'm the Bad News Goose!"
                  SLACK_FOOTER: Perseus Slack Notification
                  MSG_MINIMAL: true

            - name: Send a Slack notification for web if a publish happens
              if: steps.changesets.outputs.published == 'true'
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_EXERCISENEXT_WEBHOOK }}
                  SLACK_CHANNEL: eng-perseus
                  SLACK_MSG_AUTHOR: ${{ github.event.pull_request.user.login }}
                  SLACK_USERNAME: GithubGoose
                  SLACK_ICON_EMOJI: ":goose:"
                  SLACK_MESSAGE: "A new version of ${{ github.event.repository.name }} was published! \nRelease notes → https://github.com/${{ github.repository }}/releases/"
                  SLACK_TITLE: "New Perseus release!"
                  SLACK_FOOTER: Perseus Slack Notification
                  MSG_MINIMAL: true
