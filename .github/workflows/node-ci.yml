name: Node CI

on:
    workflow_dispatch:
    pull_request:
        # edited is needed because that's the trigger when the base branch is
        # changed on a PR
        # The rest are the defaults.
        types: [edited, opened, synchronize, reopened]

# Although our GITHUB_TOKEN has enough permissions for standard PRs, when these
# actions are run for Dependabot PRs, we need to explicitly increase access.
permissions:
    pull-requests: write
    issues: write

# When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    changeset:
        name: Check for .changeset entries for all changed files
        if: github.actor != 'dependabot[bot]' && github.actor != 'dependabot-preview[bot]'
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: pnpm/action-setup@v4
              name: Install pnpm
              with:
                  run_install: false

            - name: Force Node version
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  # Note that we don't specify 'cache: pnpm' here because we
                  # don't install node_modules in this workflow/job!

            - name: Get changed files
              uses: Khan/actions@get-changed-files-v2
              id: changed

            - name: Filter out files that don't need a changeset
              uses: Khan/actions@filter-files-v1
              id: match
              with:
                  changed-files: ${{ steps.changed.outputs.files }}
                  files: "packages/, config/build/" # Only look for changes in packages, build
                  globs: "!(**/__tests__/*), !(**/__testdata__/*), !(**/__stories__/*), !(**/__docs__/*), !(**/dist/*), !(**/*.test.ts), !(**/*.test.tsx)" # Ignore test files
                  matchAllGlobs: true # Default is to match any of the globs, which ends up matching all files
                  conjunctive: true # Only match files that match all of the above

            - uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.KHAN_ACTIONS_BOT_SSH_PRIVATE_KEY }}

            - name: Verify changeset entries
              uses: Khan/actions@check-for-changeset-v1
              with:
                  changed_files: ${{ steps.match.outputs.filtered }}

    lint:
        name: Lint, Typecheck, Format, and Test
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - name: Checking out latest commit
              uses: actions/checkout@v4

            - name: Install & cache node_modules
              uses: ./.github/actions/shared-node-cache
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Get All Changed Files
              uses: Khan/actions@get-changed-files-v2
              id: changed

            - name: Check formatting
              run: |
                  pnpm prettier --check .

            - id: js-files
              name: Find .js(x)/.ts(x) changed files
              uses: Khan/actions@filter-files-v1
              with:
                  changed-files: ${{ steps.changed.outputs.files }}
                  extensions: ".js,.jsx,.ts,.tsx"
                  files: "pnpm-lock.yaml,tsconfig-build.json,tsconfig-common.json,tsconfig.json,packages/tsconfig-shared.json"

            - id: eslint-reset
              uses: Khan/actions@filter-files-v1
              name: Files that would trigger a full eslint run
              with:
                  changed-files: ${{ steps.changed.outputs.files }}
                  files: ".eslintrc.js,package.json,pnpm-lock.yaml,.eslintignore"

            # Linting / type checking
            - name: Eslint
              uses: Khan/actions@full-or-limited-v0
              with:
                  full-trigger: ${{ steps.eslint-reset.outputs.filtered }}
                  full: pnpm lint packages
                  limited-trigger: ${{ steps.js-files.outputs.filtered }}
                  limited: pnpm lint {}

            - name: Typecheck
              if: (success() || failure()) && steps.js-files.outputs.filtered != '[]'
              run: pnpm typecheck

            - name: Build types
              if: (success() || failure()) && steps.js-files.outputs.filtered != '[]'
              run: pnpm build:types

            # Run tests for our target matrix
            - id: jest-reset
              uses: Khan/actions@filter-files-v1
              name: Files that would trigger a full jest run
              with:
                  changed-files: ${{ steps.changed.outputs.files }}
                  files: "jest.config.js,package.json,pnpm-lock.yaml,test.config.js,test.transform.js"

            - name: Jest
              uses: Khan/actions@full-or-limited-v0
              with:
                  full-trigger: ${{ steps.jest-reset.outputs.filtered }}
                  full: pnpm jest
                  limited-trigger: ${{ steps.js-files.outputs.filtered }}
                  limited: pnpm jest --passWithNoTests --findRelatedTests {}

            # We use STOPSHIP internally to mark code that's not safe to go live yet.
            # We use an if block because we want to return the exact inverse of what
            # `git grep` returns (0 on none found, 1 on some found).
            - name: Checks that STOPSHIP is not used in any files.
              run: ./utils/stopship-check.sh

    cypress:
        name: Cypress
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - name: Checking out latest commit
              uses: actions/checkout@v4

            # MUST be before we install node_modules as that depends on finding
            # Cypress binaries in this cache!
            - uses: actions/cache@v4
              with:
                  path: ~/.cache/Cypress
                  # Generate a new cache whenever the lock file changes
                  key: ${{ runner.os }}-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
                  # If source files changed, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-cypress-

            - name: Install & cache node_modules
              uses: ./.github/actions/shared-node-cache
              with:
                  node-version: ${{ matrix.node-version }}

            # We _should_ have a valid Cypress binary in place at this point,
            # but we _could_ have had a cache miss on `~/.cache/Cypress` but a
            # cache hit on `node_modules` leaving us in a state where the
            # Cypress binary isn't available. This step ensures that the
            # Cypress binary is in place
            - name: Install Cypress
              run: pnpm exec cypress install

            - name: Run tests
              run: pnpm cypress:ci

            - name: Upload Screenshots
              uses: actions/upload-artifact@v4
              if: failure()
              with:
                  name: cypress-screenshots
                  path: ./cypress/screenshots

    check_builds:
        name: Check builds for changes in size
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - name: Checking out latest commit
              uses: actions/checkout@v4

            - name: Install & cache node_modules
              uses: ./.github/actions/shared-node-cache
              with:
                  node-version: ${{ matrix.node-version }}

            # Make sure our packages aren't growing unexpectedly. This must come
            # last as it builds the old code last and so leaves the wrong code
            # in place for the next job; in other words, it leaves the repo on a
            # base branch.
            - name: Check Builds
              uses: preactjs/compressed-size-action@v2
              with:
                  # We only care about the ES module size, really:
                  pattern: "**/dist/es/*.js"
                  # Always ignore SourceMaps and node_modules:
                  exclude: "{**/*.map,**/node_modules/**}"
                  # Clean up before a build
                  clean-script: "clean"
                  # Build production
                  build-script: "build:prodsizecheck"

            #
            # Do not place any steps after "Check Builds"
            #

    check_schema:
        name: Check for schema changes
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - name: Check out latest commit
              uses: actions/checkout@v4

            - name: Install & cache node_modules
              uses: ./.github/actions/shared-node-cache
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Compare Perseus Schema to base branch
              uses: ./.github/actions/branch-compare
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  build-command: |
                      pnpm install && \
                      pnpm tsc --declaration --emitDeclarationOnly \
                        --outfile ${{ runner.temp }}/schema.d.ts \
                        packages/perseus-core/src/data-schema.ts
                      pnpm prettier --write ${{ runner.temp }}/schema.d.ts
                  path-to-artifact: ${{ runner.temp }}/schema.d.ts
                  label-name: schema-change
                  comment-title: 🗄️ Schema Change

    check_item_splitting:
        name: Check for item splitting changes
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        steps:
            - name: Check out latest commit
              uses: actions/checkout@v4

            - name: Install & cache node_modules
              uses: ./.github/actions/shared-node-cache
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Use branch-compare action to generate item splitting artifacts
              id: split-item-compare
              uses: ./.github/actions/branch-compare
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  build-command: pnpm install && pnpm build
                  path-to-artifact: packages/perseus-core/dist/es/index.item-splitting.js
                  label-name: item-splitting-change
                  comment-title: 🛠️ Item Splitting
